
ADC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f18  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08005100  08005100  00015100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005418  08005418  00015418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  08005420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a8  200001dc  080055fc  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000384  080055fc  00020384  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   000127b7  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002c18  00000000  00000000  000329bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fca  00000000  00000000  000355d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007c8  00000000  00000000  000395a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008e8  00000000  00000000  00039d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005180  00000000  00000000  0003a650  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002ba5  00000000  00000000  0003f7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00042375  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002264  00000000  00000000  000423f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	080050e8 	.word	0x080050e8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	080050e8 	.word	0x080050e8

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f092 0f00 	teq	r2, #0
 8000522:	bf14      	ite	ne
 8000524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e720      	b.n	800037c <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aedc 	beq.w	800032a <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6c1      	b.n	800032a <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c14:	f1a2 0201 	sub.w	r2, r2, #1
 8000c18:	d1ed      	bne.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_InitTick+0x3c>)
{
 8001018:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101a:	7818      	ldrb	r0, [r3, #0]
 800101c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001020:	fbb3 f3f0 	udiv	r3, r3, r0
 8001024:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <HAL_InitTick+0x40>)
 8001026:	6810      	ldr	r0, [r2, #0]
 8001028:	fbb0 f0f3 	udiv	r0, r0, r3
 800102c:	f000 fb74 	bl	8001718 <HAL_SYSTICK_Config>
 8001030:	4604      	mov	r4, r0
 8001032:	b958      	cbnz	r0, 800104c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001034:	2d0f      	cmp	r5, #15
 8001036:	d809      	bhi.n	800104c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001038:	4602      	mov	r2, r0
 800103a:	4629      	mov	r1, r5
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f000 fb2a 	bl	8001698 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001044:	4b04      	ldr	r3, [pc, #16]	; (8001058 <HAL_InitTick+0x44>)
 8001046:	4620      	mov	r0, r4
 8001048:	601d      	str	r5, [r3, #0]
 800104a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800104c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800104e:	bd38      	pop	{r3, r4, r5, pc}
 8001050:	20000000 	.word	0x20000000
 8001054:	20000008 	.word	0x20000008
 8001058:	20000004 	.word	0x20000004

0800105c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <HAL_Init+0x20>)
{
 800105e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001060:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001062:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	f043 0310 	orr.w	r3, r3, #16
 8001068:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106a:	f000 fb03 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff ffd0 	bl	8001014 <HAL_InitTick>
  HAL_MspInit();
 8001074:	f001 fba4 	bl	80027c0 <HAL_MspInit>
}
 8001078:	2000      	movs	r0, #0
 800107a:	bd08      	pop	{r3, pc}
 800107c:	40022000 	.word	0x40022000

08001080 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001080:	4a03      	ldr	r2, [pc, #12]	; (8001090 <HAL_IncTick+0x10>)
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <HAL_IncTick+0x14>)
 8001084:	6811      	ldr	r1, [r2, #0]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	440b      	add	r3, r1
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000204 	.word	0x20000204
 8001094:	20000000 	.word	0x20000000

08001098 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001098:	4b01      	ldr	r3, [pc, #4]	; (80010a0 <HAL_GetTick+0x8>)
 800109a:	6818      	ldr	r0, [r3, #0]
}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000204 	.word	0x20000204

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b538      	push	{r3, r4, r5, lr}
 80010a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff fff6 	bl	8001098 <HAL_GetTick>
 80010ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ae:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80010b0:	bf1e      	ittt	ne
 80010b2:	4b04      	ldrne	r3, [pc, #16]	; (80010c4 <HAL_Delay+0x20>)
 80010b4:	781b      	ldrbne	r3, [r3, #0]
 80010b6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010b8:	f7ff ffee 	bl	8001098 <HAL_GetTick>
 80010bc:	1b40      	subs	r0, r0, r5
 80010be:	4284      	cmp	r4, r0
 80010c0:	d8fa      	bhi.n	80010b8 <HAL_Delay+0x14>
  {
  }
}
 80010c2:	bd38      	pop	{r3, r4, r5, pc}
 80010c4:	20000000 	.word	0x20000000

080010c8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80010ca:	2600      	movs	r6, #0
{
 80010cc:	4604      	mov	r4, r0
 80010ce:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80010d0:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80010d2:	f7ff ffe1 	bl	8001098 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80010d6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80010d8:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	05d2      	lsls	r2, r2, #23
 80010de:	d508      	bpl.n	80010f2 <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 80010e0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80010e4:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e8:	f043 0320 	orr.w	r3, r3, #32
 80010ec:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80010ee:	b003      	add	sp, #12
 80010f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	05d6      	lsls	r6, r2, #23
 80010f6:	d403      	bmi.n	8001100 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80010fa:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80010fe:	d03b      	beq.n	8001178 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001100:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <HAL_ADC_PollForConversion+0x124>)
 8001102:	2002      	movs	r0, #2
 8001104:	681e      	ldr	r6, [r3, #0]
 8001106:	f000 ff89 	bl	800201c <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800110a:	6823      	ldr	r3, [r4, #0]
 800110c:	4a38      	ldr	r2, [pc, #224]	; (80011f0 <HAL_ADC_PollForConversion+0x128>)
 800110e:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001110:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001114:	4211      	tst	r1, r2
 8001116:	4a37      	ldr	r2, [pc, #220]	; (80011f4 <HAL_ADC_PollForConversion+0x12c>)
 8001118:	d14f      	bne.n	80011ba <HAL_ADC_PollForConversion+0xf2>
 800111a:	68de      	ldr	r6, [r3, #12]
 800111c:	4936      	ldr	r1, [pc, #216]	; (80011f8 <HAL_ADC_PollForConversion+0x130>)
 800111e:	420e      	tst	r6, r1
 8001120:	d14b      	bne.n	80011ba <HAL_ADC_PollForConversion+0xf2>
 8001122:	6919      	ldr	r1, [r3, #16]
 8001124:	4211      	tst	r1, r2
 8001126:	d159      	bne.n	80011dc <HAL_ADC_PollForConversion+0x114>
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	4b34      	ldr	r3, [pc, #208]	; (80011fc <HAL_ADC_PollForConversion+0x134>)
 800112c:	421a      	tst	r2, r3
 800112e:	bf14      	ite	ne
 8001130:	2329      	movne	r3, #41	; 0x29
 8001132:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001134:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001138:	9b01      	ldr	r3, [sp, #4]
 800113a:	429e      	cmp	r6, r3
 800113c:	d920      	bls.n	8001180 <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 800113e:	1c6b      	adds	r3, r5, #1
 8001140:	d005      	beq.n	800114e <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001142:	b15d      	cbz	r5, 800115c <HAL_ADC_PollForConversion+0x94>
 8001144:	f7ff ffa8 	bl	8001098 <HAL_GetTick>
 8001148:	1bc0      	subs	r0, r0, r7
 800114a:	4285      	cmp	r5, r0
 800114c:	d306      	bcc.n	800115c <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 800114e:	9b01      	ldr	r3, [sp, #4]
 8001150:	3301      	adds	r3, #1
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	e7f0      	b.n	8001138 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 8001156:	1c68      	adds	r0, r5, #1
 8001158:	d00f      	beq.n	800117a <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800115a:	b945      	cbnz	r5, 800116e <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800115c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 800115e:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8001166:	2300      	movs	r3, #0
 8001168:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 800116c:	e7bf      	b.n	80010ee <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800116e:	f7ff ff93 	bl	8001098 <HAL_GetTick>
 8001172:	1bc0      	subs	r0, r0, r7
 8001174:	4285      	cmp	r5, r0
 8001176:	d3f1      	bcc.n	800115c <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001178:	6822      	ldr	r2, [r4, #0]
 800117a:	6813      	ldr	r3, [r2, #0]
 800117c:	0799      	lsls	r1, r3, #30
 800117e:	d5ea      	bpl.n	8001156 <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001180:	f06f 0312 	mvn.w	r3, #18
 8001184:	6822      	ldr	r2, [r4, #0]
 8001186:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001188:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800118a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800118e:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001190:	6893      	ldr	r3, [r2, #8]
 8001192:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001196:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800119a:	d125      	bne.n	80011e8 <HAL_ADC_PollForConversion+0x120>
 800119c:	68e3      	ldr	r3, [r4, #12]
 800119e:	bb1b      	cbnz	r3, 80011e8 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011a6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80011aa:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80011ae:	d11b      	bne.n	80011e8 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80011b8:	e799      	b.n	80010ee <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80011ba:	6919      	ldr	r1, [r3, #16]
 80011bc:	4211      	tst	r1, r2
 80011be:	d103      	bne.n	80011c8 <HAL_ADC_PollForConversion+0x100>
 80011c0:	68d9      	ldr	r1, [r3, #12]
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_ADC_PollForConversion+0x134>)
 80011c4:	4211      	tst	r1, r2
 80011c6:	d00b      	beq.n	80011e0 <HAL_ADC_PollForConversion+0x118>
 80011c8:	6919      	ldr	r1, [r3, #16]
 80011ca:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <HAL_ADC_PollForConversion+0x138>)
 80011cc:	4211      	tst	r1, r2
 80011ce:	d109      	bne.n	80011e4 <HAL_ADC_PollForConversion+0x11c>
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	4213      	tst	r3, r2
 80011d4:	bf14      	ite	ne
 80011d6:	23fc      	movne	r3, #252	; 0xfc
 80011d8:	2354      	moveq	r3, #84	; 0x54
 80011da:	e7ab      	b.n	8001134 <HAL_ADC_PollForConversion+0x6c>
 80011dc:	2329      	movs	r3, #41	; 0x29
 80011de:	e7a9      	b.n	8001134 <HAL_ADC_PollForConversion+0x6c>
 80011e0:	2354      	movs	r3, #84	; 0x54
 80011e2:	e7a7      	b.n	8001134 <HAL_ADC_PollForConversion+0x6c>
 80011e4:	23fc      	movs	r3, #252	; 0xfc
 80011e6:	e7a5      	b.n	8001134 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 80011e8:	2000      	movs	r0, #0
 80011ea:	e780      	b.n	80010ee <HAL_ADC_PollForConversion+0x26>
 80011ec:	20000008 	.word	0x20000008
 80011f0:	24924924 	.word	0x24924924
 80011f4:	12492492 	.word	0x12492492
 80011f8:	00924924 	.word	0x00924924
 80011fc:	00492492 	.word	0x00492492
 8001200:	00249249 	.word	0x00249249

08001204 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001204:	6803      	ldr	r3, [r0, #0]
 8001206:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001208:	4770      	bx	lr
	...

0800120c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800120c:	2300      	movs	r3, #0
{ 
 800120e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001210:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001212:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001216:	2b01      	cmp	r3, #1
 8001218:	d074      	beq.n	8001304 <HAL_ADC_ConfigChannel+0xf8>
 800121a:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800121c:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800121e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001222:	2d06      	cmp	r5, #6
 8001224:	6802      	ldr	r2, [r0, #0]
 8001226:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800122a:	680c      	ldr	r4, [r1, #0]
 800122c:	d825      	bhi.n	800127a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800122e:	442b      	add	r3, r5
 8001230:	251f      	movs	r5, #31
 8001232:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001234:	3b05      	subs	r3, #5
 8001236:	409d      	lsls	r5, r3
 8001238:	ea26 0505 	bic.w	r5, r6, r5
 800123c:	fa04 f303 	lsl.w	r3, r4, r3
 8001240:	432b      	orrs	r3, r5
 8001242:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001244:	2c09      	cmp	r4, #9
 8001246:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800124a:	688d      	ldr	r5, [r1, #8]
 800124c:	d92f      	bls.n	80012ae <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800124e:	2607      	movs	r6, #7
 8001250:	4423      	add	r3, r4
 8001252:	68d1      	ldr	r1, [r2, #12]
 8001254:	3b1e      	subs	r3, #30
 8001256:	409e      	lsls	r6, r3
 8001258:	ea21 0106 	bic.w	r1, r1, r6
 800125c:	fa05 f303 	lsl.w	r3, r5, r3
 8001260:	430b      	orrs	r3, r1
 8001262:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001264:	f1a4 0310 	sub.w	r3, r4, #16
 8001268:	2b01      	cmp	r3, #1
 800126a:	d92b      	bls.n	80012c4 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800126c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800126e:	2200      	movs	r2, #0
 8001270:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001274:	4618      	mov	r0, r3
 8001276:	b002      	add	sp, #8
 8001278:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800127a:	2d0c      	cmp	r5, #12
 800127c:	d80b      	bhi.n	8001296 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800127e:	442b      	add	r3, r5
 8001280:	251f      	movs	r5, #31
 8001282:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001284:	3b23      	subs	r3, #35	; 0x23
 8001286:	409d      	lsls	r5, r3
 8001288:	ea26 0505 	bic.w	r5, r6, r5
 800128c:	fa04 f303 	lsl.w	r3, r4, r3
 8001290:	432b      	orrs	r3, r5
 8001292:	6313      	str	r3, [r2, #48]	; 0x30
 8001294:	e7d6      	b.n	8001244 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001296:	442b      	add	r3, r5
 8001298:	251f      	movs	r5, #31
 800129a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800129c:	3b41      	subs	r3, #65	; 0x41
 800129e:	409d      	lsls	r5, r3
 80012a0:	ea26 0505 	bic.w	r5, r6, r5
 80012a4:	fa04 f303 	lsl.w	r3, r4, r3
 80012a8:	432b      	orrs	r3, r5
 80012aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80012ac:	e7ca      	b.n	8001244 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012ae:	2607      	movs	r6, #7
 80012b0:	6911      	ldr	r1, [r2, #16]
 80012b2:	4423      	add	r3, r4
 80012b4:	409e      	lsls	r6, r3
 80012b6:	ea21 0106 	bic.w	r1, r1, r6
 80012ba:	fa05 f303 	lsl.w	r3, r5, r3
 80012be:	430b      	orrs	r3, r1
 80012c0:	6113      	str	r3, [r2, #16]
 80012c2:	e7cf      	b.n	8001264 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <HAL_ADC_ConfigChannel+0xfc>)
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d116      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012ca:	6893      	ldr	r3, [r2, #8]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	d4cd      	bmi.n	800126c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012d0:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012d2:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012d8:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012da:	d1c7      	bne.n	800126c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_ADC_ConfigChannel+0x100>)
 80012de:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <HAL_ADC_ConfigChannel+0x104>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80012e6:	230a      	movs	r3, #10
 80012e8:	4353      	muls	r3, r2
            wait_loop_index--;
 80012ea:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80012ec:	9b01      	ldr	r3, [sp, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0bc      	beq.n	800126c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80012f2:	9b01      	ldr	r3, [sp, #4]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	e7f8      	b.n	80012ea <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80012fa:	f043 0320 	orr.w	r3, r3, #32
 80012fe:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e7b4      	b.n	800126e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001304:	2302      	movs	r3, #2
 8001306:	e7b5      	b.n	8001274 <HAL_ADC_ConfigChannel+0x68>
 8001308:	40012400 	.word	0x40012400
 800130c:	20000008 	.word	0x20000008
 8001310:	000f4240 	.word	0x000f4240

08001314 <HAL_ADC_GetState>:
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
  /* Return ADC state */
  return hadc->State;
 8001314:	6a80      	ldr	r0, [r0, #40]	; 0x28
}
 8001316:	4770      	bx	lr

08001318 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001318:	2300      	movs	r3, #0
{
 800131a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800131c:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800131e:	6803      	ldr	r3, [r0, #0]
{
 8001320:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	07d2      	lsls	r2, r2, #31
 8001326:	d502      	bpl.n	800132e <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001328:	2000      	movs	r0, #0
}
 800132a:	b002      	add	sp, #8
 800132c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	f042 0201 	orr.w	r2, r2, #1
 8001334:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <ADC_Enable+0x68>)
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <ADC_Enable+0x6c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001340:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001342:	9b01      	ldr	r3, [sp, #4]
 8001344:	b9c3      	cbnz	r3, 8001378 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8001346:	f7ff fea7 	bl	8001098 <HAL_GetTick>
 800134a:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	689d      	ldr	r5, [r3, #8]
 8001350:	f015 0501 	ands.w	r5, r5, #1
 8001354:	d1e8      	bne.n	8001328 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001356:	f7ff fe9f 	bl	8001098 <HAL_GetTick>
 800135a:	1b80      	subs	r0, r0, r6
 800135c:	2802      	cmp	r0, #2
 800135e:	d9f5      	bls.n	800134c <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001360:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8001362:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800136e:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001376:	e7d8      	b.n	800132a <ADC_Enable+0x12>
      wait_loop_index--;
 8001378:	9b01      	ldr	r3, [sp, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	e7e0      	b.n	8001340 <ADC_Enable+0x28>
 800137e:	bf00      	nop
 8001380:	20000008 	.word	0x20000008
 8001384:	000f4240 	.word	0x000f4240

08001388 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8001388:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800138c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800138e:	2b01      	cmp	r3, #1
{
 8001390:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001392:	d054      	beq.n	800143e <HAL_ADC_Start+0xb6>
 8001394:	2301      	movs	r3, #1
 8001396:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800139a:	f7ff ffbd 	bl	8001318 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800139e:	2800      	cmp	r0, #0
 80013a0:	d149      	bne.n	8001436 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80013a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013a4:	4a27      	ldr	r2, [pc, #156]	; (8001444 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80013a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013aa:	f023 0301 	bic.w	r3, r3, #1
 80013ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d104      	bne.n	80013c4 <HAL_ADC_Start+0x3c>
 80013ba:	4923      	ldr	r1, [pc, #140]	; (8001448 <HAL_ADC_Start+0xc0>)
 80013bc:	684a      	ldr	r2, [r1, #4]
 80013be:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80013c2:	d12e      	bne.n	8001422 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80013c6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80013ca:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013cc:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013ce:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013d0:	bf41      	itttt	mi
 80013d2:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80013d4:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80013d8:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80013dc:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80013e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013e4:	bf1c      	itt	ne
 80013e6:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80013e8:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80013ec:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013f4:	f06f 0202 	mvn.w	r2, #2
 80013f8:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001400:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001404:	d113      	bne.n	800142e <HAL_ADC_Start+0xa6>
 8001406:	4a0f      	ldr	r2, [pc, #60]	; (8001444 <HAL_ADC_Start+0xbc>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d105      	bne.n	8001418 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800140c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001410:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001412:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001416:	d10a      	bne.n	800142e <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001422:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001424:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001428:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800142a:	684a      	ldr	r2, [r1, #4]
 800142c:	e7cf      	b.n	80013ce <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001434:	e7f3      	b.n	800141e <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8001436:	2300      	movs	r3, #0
 8001438:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800143c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800143e:	2002      	movs	r0, #2
}
 8001440:	bd10      	pop	{r4, pc}
 8001442:	bf00      	nop
 8001444:	40012800 	.word	0x40012800
 8001448:	40012400 	.word	0x40012400

0800144c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800144c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800144e:	6803      	ldr	r3, [r0, #0]
{
 8001450:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	07d2      	lsls	r2, r2, #31
 8001456:	d401      	bmi.n	800145c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001458:	2000      	movs	r0, #0
 800145a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	f022 0201 	bic.w	r2, r2, #1
 8001462:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001464:	f7ff fe18 	bl	8001098 <HAL_GetTick>
 8001468:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	07db      	lsls	r3, r3, #31
 8001470:	d5f2      	bpl.n	8001458 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001472:	f7ff fe11 	bl	8001098 <HAL_GetTick>
 8001476:	1b40      	subs	r0, r0, r5
 8001478:	2802      	cmp	r0, #2
 800147a:	d9f6      	bls.n	800146a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001486:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800148e:	bd38      	pop	{r3, r4, r5, pc}

08001490 <HAL_ADC_Init>:
{
 8001490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8001492:	4604      	mov	r4, r0
 8001494:	2800      	cmp	r0, #0
 8001496:	d077      	beq.n	8001588 <HAL_ADC_Init+0xf8>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001498:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800149a:	b923      	cbnz	r3, 80014a6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800149c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800149e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80014a2:	f001 f8ad 	bl	8002600 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014a6:	4620      	mov	r0, r4
 80014a8:	f7ff ffd0 	bl	800144c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014ae:	f013 0310 	ands.w	r3, r3, #16
 80014b2:	d16b      	bne.n	800158c <HAL_ADC_Init+0xfc>
 80014b4:	2800      	cmp	r0, #0
 80014b6:	d169      	bne.n	800158c <HAL_ADC_Init+0xfc>
    ADC_STATE_CLR_SET(hadc->State,
 80014b8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80014ba:	4937      	ldr	r1, [pc, #220]	; (8001598 <HAL_ADC_Init+0x108>)
    ADC_STATE_CLR_SET(hadc->State,
 80014bc:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80014c0:	f022 0202 	bic.w	r2, r2, #2
 80014c4:	f042 0202 	orr.w	r2, r2, #2
 80014c8:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80014ca:	e894 0024 	ldmia.w	r4, {r2, r5}
 80014ce:	428a      	cmp	r2, r1
 80014d0:	69e1      	ldr	r1, [r4, #28]
 80014d2:	d104      	bne.n	80014de <HAL_ADC_Init+0x4e>
 80014d4:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 80014d8:	bf08      	it	eq
 80014da:	f44f 2100 	moveq.w	r1, #524288	; 0x80000
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80014de:	68e6      	ldr	r6, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80014e0:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
 80014e4:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014e6:	68a5      	ldr	r5, [r4, #8]
 80014e8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80014ec:	d035      	beq.n	800155a <HAL_ADC_Init+0xca>
 80014ee:	2d01      	cmp	r5, #1
 80014f0:	bf08      	it	eq
 80014f2:	f44f 7380 	moveq.w	r3, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014f6:	6967      	ldr	r7, [r4, #20]
 80014f8:	2f01      	cmp	r7, #1
 80014fa:	d106      	bne.n	800150a <HAL_ADC_Init+0x7a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014fc:	bb7e      	cbnz	r6, 800155e <HAL_ADC_Init+0xce>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014fe:	69a6      	ldr	r6, [r4, #24]
 8001500:	3e01      	subs	r6, #1
 8001502:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
 8001506:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800150a:	6856      	ldr	r6, [r2, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800150c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001510:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8001514:	ea43 0306 	orr.w	r3, r3, r6
 8001518:	6053      	str	r3, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800151a:	6896      	ldr	r6, [r2, #8]
 800151c:	4b1f      	ldr	r3, [pc, #124]	; (800159c <HAL_ADC_Init+0x10c>)
 800151e:	ea03 0306 	and.w	r3, r3, r6
 8001522:	ea43 0301 	orr.w	r3, r3, r1
 8001526:	6093      	str	r3, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001528:	d001      	beq.n	800152e <HAL_ADC_Init+0x9e>
 800152a:	2d01      	cmp	r5, #1
 800152c:	d120      	bne.n	8001570 <HAL_ADC_Init+0xe0>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800152e:	6923      	ldr	r3, [r4, #16]
 8001530:	3b01      	subs	r3, #1
 8001532:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001534:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8001536:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800153a:	432b      	orrs	r3, r5
 800153c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800153e:	6892      	ldr	r2, [r2, #8]
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_ADC_Init+0x110>)
 8001542:	4013      	ands	r3, r2
 8001544:	4299      	cmp	r1, r3
 8001546:	d115      	bne.n	8001574 <HAL_ADC_Init+0xe4>
      ADC_CLEAR_ERRORCODE(hadc);
 8001548:	2300      	movs	r3, #0
 800154a:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800154c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800154e:	f023 0303 	bic.w	r3, r3, #3
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	62a3      	str	r3, [r4, #40]	; 0x28
 8001558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800155a:	462b      	mov	r3, r5
 800155c:	e7cb      	b.n	80014f6 <HAL_ADC_Init+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800155e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001560:	f046 0620 	orr.w	r6, r6, #32
 8001564:	62a6      	str	r6, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001566:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001568:	f046 0601 	orr.w	r6, r6, #1
 800156c:	62e6      	str	r6, [r4, #44]	; 0x2c
 800156e:	e7cc      	b.n	800150a <HAL_ADC_Init+0x7a>
  uint32_t tmp_sqr1 = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	e7df      	b.n	8001534 <HAL_ADC_Init+0xa4>
      ADC_STATE_CLR_SET(hadc->State,
 8001574:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001576:	f023 0312 	bic.w	r3, r3, #18
 800157a:	f043 0310 	orr.w	r3, r3, #16
 800157e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001580:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001588:	2001      	movs	r0, #1
}
 800158a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800158c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800158e:	f043 0310 	orr.w	r3, r3, #16
 8001592:	62a3      	str	r3, [r4, #40]	; 0x28
 8001594:	e7f8      	b.n	8001588 <HAL_ADC_Init+0xf8>
 8001596:	bf00      	nop
 8001598:	40013c00 	.word	0x40013c00
 800159c:	ffe1f7fd 	.word	0xffe1f7fd
 80015a0:	ff1f0efe 	.word	0xff1f0efe

080015a4 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80015a4:	2300      	movs	r3, #0
{
 80015a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80015a8:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015aa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80015ae:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d05a      	beq.n	800166a <HAL_ADCEx_Calibration_Start+0xc6>
 80015b4:	2301      	movs	r3, #1
 80015b6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015ba:	f7ff ff47 	bl	800144c <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80015be:	4605      	mov	r5, r0
 80015c0:	2800      	cmp	r0, #0
 80015c2:	d132      	bne.n	800162a <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015c6:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 80015c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015cc:	f023 0302 	bic.w	r3, r3, #2
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015d6:	4b26      	ldr	r3, [pc, #152]	; (8001670 <HAL_ADCEx_Calibration_Start+0xcc>)
 80015d8:	681e      	ldr	r6, [r3, #0]
 80015da:	f000 fd1f 	bl	800201c <HAL_RCCEx_GetPeriphCLKFreq>
 80015de:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80015e2:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 80015e4:	9001      	str	r0, [sp, #4]

    while(wait_loop_index != 0U)
 80015e6:	9b01      	ldr	r3, [sp, #4]
 80015e8:	bb1b      	cbnz	r3, 8001632 <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80015ea:	4620      	mov	r0, r4
 80015ec:	f7ff fe94 	bl	8001318 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	6893      	ldr	r3, [r2, #8]
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 80015fa:	f7ff fd4d 	bl	8001098 <HAL_GetTick>
 80015fe:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	0712      	lsls	r2, r2, #28
 8001606:	d418      	bmi.n	800163a <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	f042 0204 	orr.w	r2, r2, #4
 800160e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001610:	f7ff fd42 	bl	8001098 <HAL_GetTick>
 8001614:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	075b      	lsls	r3, r3, #29
 800161c:	d41f      	bmi.n	800165e <HAL_ADCEx_Calibration_Start+0xba>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800161e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001620:	f023 0303 	bic.w	r3, r3, #3
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800162a:	2300      	movs	r3, #0
 800162c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001630:	e012      	b.n	8001658 <HAL_ADCEx_Calibration_Start+0xb4>
      wait_loop_index--;
 8001632:	9b01      	ldr	r3, [sp, #4]
 8001634:	3b01      	subs	r3, #1
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	e7d5      	b.n	80015e6 <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800163a:	f7ff fd2d 	bl	8001098 <HAL_GetTick>
 800163e:	1b80      	subs	r0, r0, r6
 8001640:	280a      	cmp	r0, #10
 8001642:	d9dd      	bls.n	8001600 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8001644:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 8001646:	2501      	movs	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 8001648:	f023 0312 	bic.w	r3, r3, #18
 800164c:	f043 0310 	orr.w	r3, r3, #16
 8001650:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8001652:	2300      	movs	r3, #0
 8001654:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001658:	4628      	mov	r0, r5
 800165a:	b002      	add	sp, #8
 800165c:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800165e:	f7ff fd1b 	bl	8001098 <HAL_GetTick>
 8001662:	1b80      	subs	r0, r0, r6
 8001664:	280a      	cmp	r0, #10
 8001666:	d9d6      	bls.n	8001616 <HAL_ADCEx_Calibration_Start+0x72>
 8001668:	e7ec      	b.n	8001644 <HAL_ADCEx_Calibration_Start+0xa0>
  __HAL_LOCK(hadc);
 800166a:	2502      	movs	r5, #2
 800166c:	e7f4      	b.n	8001658 <HAL_ADCEx_Calibration_Start+0xb4>
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008

08001674 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001676:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800167a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001682:	041b      	lsls	r3, r3, #16
 8001684:	0c1b      	lsrs	r3, r3, #16
 8001686:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800168a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800168e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001690:	60d3      	str	r3, [r2, #12]
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169a:	b530      	push	{r4, r5, lr}
 800169c:	68dc      	ldr	r4, [r3, #12]
 800169e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	bf28      	it	cs
 80016ac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b4:	bf98      	it	ls
 80016b6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	fa05 f303 	lsl.w	r3, r5, r3
 80016bc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c0:	bf88      	it	hi
 80016c2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4019      	ands	r1, r3
 80016c6:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	fa05 f404 	lsl.w	r4, r5, r4
 80016cc:	3c01      	subs	r4, #1
 80016ce:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80016d0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d2:	ea42 0201 	orr.w	r2, r2, r1
 80016d6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016da:	bfaf      	iteee	ge
 80016dc:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e0:	4b06      	ldrlt	r3, [pc, #24]	; (80016fc <HAL_NVIC_SetPriority+0x64>)
 80016e2:	f000 000f 	andlt.w	r0, r0, #15
 80016e6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	bfa5      	ittet	ge
 80016ea:	b2d2      	uxtbge	r2, r2
 80016ec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80016f6:	bd30      	pop	{r4, r5, pc}
 80016f8:	e000ed00 	.word	0xe000ed00
 80016fc:	e000ed14 	.word	0xe000ed14

08001700 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001700:	2301      	movs	r3, #1
 8001702:	0942      	lsrs	r2, r0, #5
 8001704:	f000 001f 	and.w	r0, r0, #31
 8001708:	fa03 f000 	lsl.w	r0, r3, r0
 800170c:	4b01      	ldr	r3, [pc, #4]	; (8001714 <HAL_NVIC_EnableIRQ+0x14>)
 800170e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100

08001718 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	3801      	subs	r0, #1
 800171a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800171e:	d20a      	bcs.n	8001736 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800172c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001730:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e010 	.word	0xe000e010
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001744:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001748:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800174a:	2b02      	cmp	r3, #2
 800174c:	d003      	beq.n	8001756 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800174e:	2304      	movs	r3, #4
 8001750:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001752:	2001      	movs	r0, #1
 8001754:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001756:	6803      	ldr	r3, [r0, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	f022 020e 	bic.w	r2, r2, #14
 800175e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	f022 0201 	bic.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001768:	4a29      	ldr	r2, [pc, #164]	; (8001810 <HAL_DMA_Abort_IT+0xcc>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d924      	bls.n	80017b8 <HAL_DMA_Abort_IT+0x74>
 800176e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001772:	4293      	cmp	r3, r2
 8001774:	d019      	beq.n	80017aa <HAL_DMA_Abort_IT+0x66>
 8001776:	3214      	adds	r2, #20
 8001778:	4293      	cmp	r3, r2
 800177a:	d018      	beq.n	80017ae <HAL_DMA_Abort_IT+0x6a>
 800177c:	3214      	adds	r2, #20
 800177e:	4293      	cmp	r3, r2
 8001780:	d017      	beq.n	80017b2 <HAL_DMA_Abort_IT+0x6e>
 8001782:	3214      	adds	r2, #20
 8001784:	4293      	cmp	r3, r2
 8001786:	bf0c      	ite	eq
 8001788:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 800178c:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8001790:	4a20      	ldr	r2, [pc, #128]	; (8001814 <HAL_DMA_Abort_IT+0xd0>)
 8001792:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001794:	2301      	movs	r3, #1

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001796:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001798:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800179c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800179e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80017a2:	b39b      	cbz	r3, 800180c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80017a4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80017a6:	4620      	mov	r0, r4
 80017a8:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017aa:	2301      	movs	r3, #1
 80017ac:	e7f0      	b.n	8001790 <HAL_DMA_Abort_IT+0x4c>
 80017ae:	2310      	movs	r3, #16
 80017b0:	e7ee      	b.n	8001790 <HAL_DMA_Abort_IT+0x4c>
 80017b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b6:	e7eb      	b.n	8001790 <HAL_DMA_Abort_IT+0x4c>
 80017b8:	4917      	ldr	r1, [pc, #92]	; (8001818 <HAL_DMA_Abort_IT+0xd4>)
 80017ba:	428b      	cmp	r3, r1
 80017bc:	d016      	beq.n	80017ec <HAL_DMA_Abort_IT+0xa8>
 80017be:	3114      	adds	r1, #20
 80017c0:	428b      	cmp	r3, r1
 80017c2:	d015      	beq.n	80017f0 <HAL_DMA_Abort_IT+0xac>
 80017c4:	3114      	adds	r1, #20
 80017c6:	428b      	cmp	r3, r1
 80017c8:	d014      	beq.n	80017f4 <HAL_DMA_Abort_IT+0xb0>
 80017ca:	3114      	adds	r1, #20
 80017cc:	428b      	cmp	r3, r1
 80017ce:	d014      	beq.n	80017fa <HAL_DMA_Abort_IT+0xb6>
 80017d0:	3114      	adds	r1, #20
 80017d2:	428b      	cmp	r3, r1
 80017d4:	d014      	beq.n	8001800 <HAL_DMA_Abort_IT+0xbc>
 80017d6:	3114      	adds	r1, #20
 80017d8:	428b      	cmp	r3, r1
 80017da:	d014      	beq.n	8001806 <HAL_DMA_Abort_IT+0xc2>
 80017dc:	4293      	cmp	r3, r2
 80017de:	bf14      	ite	ne
 80017e0:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80017e4:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80017e8:	4a0c      	ldr	r2, [pc, #48]	; (800181c <HAL_DMA_Abort_IT+0xd8>)
 80017ea:	e7d2      	b.n	8001792 <HAL_DMA_Abort_IT+0x4e>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e7fb      	b.n	80017e8 <HAL_DMA_Abort_IT+0xa4>
 80017f0:	2310      	movs	r3, #16
 80017f2:	e7f9      	b.n	80017e8 <HAL_DMA_Abort_IT+0xa4>
 80017f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f8:	e7f6      	b.n	80017e8 <HAL_DMA_Abort_IT+0xa4>
 80017fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fe:	e7f3      	b.n	80017e8 <HAL_DMA_Abort_IT+0xa4>
 8001800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001804:	e7f0      	b.n	80017e8 <HAL_DMA_Abort_IT+0xa4>
 8001806:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800180a:	e7ed      	b.n	80017e8 <HAL_DMA_Abort_IT+0xa4>
  HAL_StatusTypeDef status = HAL_OK;
 800180c:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800180e:	bd10      	pop	{r4, pc}
 8001810:	40020080 	.word	0x40020080
 8001814:	40020400 	.word	0x40020400
 8001818:	40020008 	.word	0x40020008
 800181c:	40020000 	.word	0x40020000

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001824:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001826:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001828:	4f6c      	ldr	r7, [pc, #432]	; (80019dc <HAL_GPIO_Init+0x1bc>)
 800182a:	4b6d      	ldr	r3, [pc, #436]	; (80019e0 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800182c:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 80019e8 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8001830:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80019ec <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 8001834:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001838:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800183a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800183e:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001842:	45a0      	cmp	r8, r4
 8001844:	f040 8085 	bne.w	8001952 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8001848:	684d      	ldr	r5, [r1, #4]
 800184a:	2d12      	cmp	r5, #18
 800184c:	f000 80b7 	beq.w	80019be <HAL_GPIO_Init+0x19e>
 8001850:	f200 808d 	bhi.w	800196e <HAL_GPIO_Init+0x14e>
 8001854:	2d02      	cmp	r5, #2
 8001856:	f000 80af 	beq.w	80019b8 <HAL_GPIO_Init+0x198>
 800185a:	f200 8081 	bhi.w	8001960 <HAL_GPIO_Init+0x140>
 800185e:	2d00      	cmp	r5, #0
 8001860:	f000 8091 	beq.w	8001986 <HAL_GPIO_Init+0x166>
 8001864:	2d01      	cmp	r5, #1
 8001866:	f000 80a5 	beq.w	80019b4 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800186a:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800186e:	2cff      	cmp	r4, #255	; 0xff
 8001870:	bf93      	iteet	ls
 8001872:	4682      	movls	sl, r0
 8001874:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001878:	3d08      	subhi	r5, #8
 800187a:	f8d0 b000 	ldrls.w	fp, [r0]
 800187e:	bf92      	itee	ls
 8001880:	00b5      	lslls	r5, r6, #2
 8001882:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001886:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001888:	fa09 f805 	lsl.w	r8, r9, r5
 800188c:	ea2b 0808 	bic.w	r8, fp, r8
 8001890:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001894:	bf88      	it	hi
 8001896:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800189a:	ea48 0505 	orr.w	r5, r8, r5
 800189e:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018a2:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80018a6:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80018aa:	d052      	beq.n	8001952 <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018ac:	69bd      	ldr	r5, [r7, #24]
 80018ae:	f026 0803 	bic.w	r8, r6, #3
 80018b2:	f045 0501 	orr.w	r5, r5, #1
 80018b6:	61bd      	str	r5, [r7, #24]
 80018b8:	69bd      	ldr	r5, [r7, #24]
 80018ba:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80018be:	f005 0501 	and.w	r5, r5, #1
 80018c2:	9501      	str	r5, [sp, #4]
 80018c4:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80018c8:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018cc:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80018ce:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80018d2:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80018d6:	fa09 f90b 	lsl.w	r9, r9, fp
 80018da:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018de:	4d41      	ldr	r5, [pc, #260]	; (80019e4 <HAL_GPIO_Init+0x1c4>)
 80018e0:	42a8      	cmp	r0, r5
 80018e2:	d071      	beq.n	80019c8 <HAL_GPIO_Init+0x1a8>
 80018e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018e8:	42a8      	cmp	r0, r5
 80018ea:	d06f      	beq.n	80019cc <HAL_GPIO_Init+0x1ac>
 80018ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018f0:	42a8      	cmp	r0, r5
 80018f2:	d06d      	beq.n	80019d0 <HAL_GPIO_Init+0x1b0>
 80018f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018f8:	42a8      	cmp	r0, r5
 80018fa:	d06b      	beq.n	80019d4 <HAL_GPIO_Init+0x1b4>
 80018fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001900:	42a8      	cmp	r0, r5
 8001902:	d069      	beq.n	80019d8 <HAL_GPIO_Init+0x1b8>
 8001904:	4570      	cmp	r0, lr
 8001906:	bf0c      	ite	eq
 8001908:	2505      	moveq	r5, #5
 800190a:	2506      	movne	r5, #6
 800190c:	fa05 f50b 	lsl.w	r5, r5, fp
 8001910:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001914:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001918:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800191a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800191e:	bf14      	ite	ne
 8001920:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001922:	43a5      	biceq	r5, r4
 8001924:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001926:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001928:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800192c:	bf14      	ite	ne
 800192e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001930:	43a5      	biceq	r5, r4
 8001932:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001934:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001936:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800193a:	bf14      	ite	ne
 800193c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800193e:	43a5      	biceq	r5, r4
 8001940:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001942:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001944:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001948:	bf14      	ite	ne
 800194a:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800194c:	ea25 0404 	biceq.w	r4, r5, r4
 8001950:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001952:	3601      	adds	r6, #1
 8001954:	2e10      	cmp	r6, #16
 8001956:	f47f af6d 	bne.w	8001834 <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 800195a:	b003      	add	sp, #12
 800195c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001960:	2d03      	cmp	r5, #3
 8001962:	d025      	beq.n	80019b0 <HAL_GPIO_Init+0x190>
 8001964:	2d11      	cmp	r5, #17
 8001966:	d180      	bne.n	800186a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001968:	68ca      	ldr	r2, [r1, #12]
 800196a:	3204      	adds	r2, #4
          break;
 800196c:	e77d      	b.n	800186a <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800196e:	4565      	cmp	r5, ip
 8001970:	d009      	beq.n	8001986 <HAL_GPIO_Init+0x166>
 8001972:	d812      	bhi.n	800199a <HAL_GPIO_Init+0x17a>
 8001974:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80019f0 <HAL_GPIO_Init+0x1d0>
 8001978:	454d      	cmp	r5, r9
 800197a:	d004      	beq.n	8001986 <HAL_GPIO_Init+0x166>
 800197c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001980:	454d      	cmp	r5, r9
 8001982:	f47f af72 	bne.w	800186a <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001986:	688a      	ldr	r2, [r1, #8]
 8001988:	b1e2      	cbz	r2, 80019c4 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800198a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800198c:	bf0c      	ite	eq
 800198e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001992:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001996:	2208      	movs	r2, #8
 8001998:	e767      	b.n	800186a <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800199a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80019f4 <HAL_GPIO_Init+0x1d4>
 800199e:	454d      	cmp	r5, r9
 80019a0:	d0f1      	beq.n	8001986 <HAL_GPIO_Init+0x166>
 80019a2:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80019a6:	454d      	cmp	r5, r9
 80019a8:	d0ed      	beq.n	8001986 <HAL_GPIO_Init+0x166>
 80019aa:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80019ae:	e7e7      	b.n	8001980 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019b0:	2200      	movs	r2, #0
 80019b2:	e75a      	b.n	800186a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019b4:	68ca      	ldr	r2, [r1, #12]
          break;
 80019b6:	e758      	b.n	800186a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019b8:	68ca      	ldr	r2, [r1, #12]
 80019ba:	3208      	adds	r2, #8
          break;
 80019bc:	e755      	b.n	800186a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019be:	68ca      	ldr	r2, [r1, #12]
 80019c0:	320c      	adds	r2, #12
          break;
 80019c2:	e752      	b.n	800186a <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019c4:	2204      	movs	r2, #4
 80019c6:	e750      	b.n	800186a <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019c8:	2500      	movs	r5, #0
 80019ca:	e79f      	b.n	800190c <HAL_GPIO_Init+0xec>
 80019cc:	2501      	movs	r5, #1
 80019ce:	e79d      	b.n	800190c <HAL_GPIO_Init+0xec>
 80019d0:	2502      	movs	r5, #2
 80019d2:	e79b      	b.n	800190c <HAL_GPIO_Init+0xec>
 80019d4:	2503      	movs	r5, #3
 80019d6:	e799      	b.n	800190c <HAL_GPIO_Init+0xec>
 80019d8:	2504      	movs	r5, #4
 80019da:	e797      	b.n	800190c <HAL_GPIO_Init+0xec>
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010400 	.word	0x40010400
 80019e4:	40010800 	.word	0x40010800
 80019e8:	40011c00 	.word	0x40011c00
 80019ec:	10210000 	.word	0x10210000
 80019f0:	10110000 	.word	0x10110000
 80019f4:	10310000 	.word	0x10310000

080019f8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f8:	6803      	ldr	r3, [r0, #0]
{
 80019fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fe:	07db      	lsls	r3, r3, #31
{
 8001a00:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a02:	d410      	bmi.n	8001a26 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a04:	682b      	ldr	r3, [r5, #0]
 8001a06:	079f      	lsls	r7, r3, #30
 8001a08:	d45e      	bmi.n	8001ac8 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0a:	682b      	ldr	r3, [r5, #0]
 8001a0c:	0719      	lsls	r1, r3, #28
 8001a0e:	f100 8095 	bmi.w	8001b3c <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a12:	682b      	ldr	r3, [r5, #0]
 8001a14:	075a      	lsls	r2, r3, #29
 8001a16:	f100 80bf 	bmi.w	8001b98 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1a:	69ea      	ldr	r2, [r5, #28]
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	f040 812d 	bne.w	8001c7c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001a22:	2000      	movs	r0, #0
 8001a24:	e014      	b.n	8001a50 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a26:	4c90      	ldr	r4, [pc, #576]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001a28:	6863      	ldr	r3, [r4, #4]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d007      	beq.n	8001a42 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a32:	6863      	ldr	r3, [r4, #4]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d10c      	bne.n	8001a56 <HAL_RCC_OscConfig+0x5e>
 8001a3c:	6863      	ldr	r3, [r4, #4]
 8001a3e:	03de      	lsls	r6, r3, #15
 8001a40:	d509      	bpl.n	8001a56 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a42:	6823      	ldr	r3, [r4, #0]
 8001a44:	039c      	lsls	r4, r3, #14
 8001a46:	d5dd      	bpl.n	8001a04 <HAL_RCC_OscConfig+0xc>
 8001a48:	686b      	ldr	r3, [r5, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1da      	bne.n	8001a04 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001a4e:	2001      	movs	r0, #1
}
 8001a50:	b002      	add	sp, #8
 8001a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a56:	686b      	ldr	r3, [r5, #4]
 8001a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5c:	d110      	bne.n	8001a80 <HAL_RCC_OscConfig+0x88>
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a64:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a66:	f7ff fb17 	bl	8001098 <HAL_GetTick>
 8001a6a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6c:	6823      	ldr	r3, [r4, #0]
 8001a6e:	0398      	lsls	r0, r3, #14
 8001a70:	d4c8      	bmi.n	8001a04 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a72:	f7ff fb11 	bl	8001098 <HAL_GetTick>
 8001a76:	1b80      	subs	r0, r0, r6
 8001a78:	2864      	cmp	r0, #100	; 0x64
 8001a7a:	d9f7      	bls.n	8001a6c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	e7e7      	b.n	8001a50 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a80:	b99b      	cbnz	r3, 8001aaa <HAL_RCC_OscConfig+0xb2>
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a88:	6023      	str	r3, [r4, #0]
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a90:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a92:	f7ff fb01 	bl	8001098 <HAL_GetTick>
 8001a96:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	0399      	lsls	r1, r3, #14
 8001a9c:	d5b2      	bpl.n	8001a04 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a9e:	f7ff fafb 	bl	8001098 <HAL_GetTick>
 8001aa2:	1b80      	subs	r0, r0, r6
 8001aa4:	2864      	cmp	r0, #100	; 0x64
 8001aa6:	d9f7      	bls.n	8001a98 <HAL_RCC_OscConfig+0xa0>
 8001aa8:	e7e8      	b.n	8001a7c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	d103      	bne.n	8001aba <HAL_RCC_OscConfig+0xc2>
 8001ab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab6:	6023      	str	r3, [r4, #0]
 8001ab8:	e7d1      	b.n	8001a5e <HAL_RCC_OscConfig+0x66>
 8001aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001abe:	6023      	str	r3, [r4, #0]
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac6:	e7cd      	b.n	8001a64 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ac8:	4c67      	ldr	r4, [pc, #412]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001aca:	6863      	ldr	r3, [r4, #4]
 8001acc:	f013 0f0c 	tst.w	r3, #12
 8001ad0:	d007      	beq.n	8001ae2 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ad2:	6863      	ldr	r3, [r4, #4]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d110      	bne.n	8001afe <HAL_RCC_OscConfig+0x106>
 8001adc:	6863      	ldr	r3, [r4, #4]
 8001ade:	03da      	lsls	r2, r3, #15
 8001ae0:	d40d      	bmi.n	8001afe <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	079b      	lsls	r3, r3, #30
 8001ae6:	d502      	bpl.n	8001aee <HAL_RCC_OscConfig+0xf6>
 8001ae8:	692b      	ldr	r3, [r5, #16]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d1af      	bne.n	8001a4e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	696a      	ldr	r2, [r5, #20]
 8001af2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001af6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001afa:	6023      	str	r3, [r4, #0]
 8001afc:	e785      	b.n	8001a0a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001afe:	692a      	ldr	r2, [r5, #16]
 8001b00:	4b5a      	ldr	r3, [pc, #360]	; (8001c6c <HAL_RCC_OscConfig+0x274>)
 8001b02:	b16a      	cbz	r2, 8001b20 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001b04:	2201      	movs	r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b08:	f7ff fac6 	bl	8001098 <HAL_GetTick>
 8001b0c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	079f      	lsls	r7, r3, #30
 8001b12:	d4ec      	bmi.n	8001aee <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b14:	f7ff fac0 	bl	8001098 <HAL_GetTick>
 8001b18:	1b80      	subs	r0, r0, r6
 8001b1a:	2802      	cmp	r0, #2
 8001b1c:	d9f7      	bls.n	8001b0e <HAL_RCC_OscConfig+0x116>
 8001b1e:	e7ad      	b.n	8001a7c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001b20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b22:	f7ff fab9 	bl	8001098 <HAL_GetTick>
 8001b26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	0798      	lsls	r0, r3, #30
 8001b2c:	f57f af6d 	bpl.w	8001a0a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b30:	f7ff fab2 	bl	8001098 <HAL_GetTick>
 8001b34:	1b80      	subs	r0, r0, r6
 8001b36:	2802      	cmp	r0, #2
 8001b38:	d9f6      	bls.n	8001b28 <HAL_RCC_OscConfig+0x130>
 8001b3a:	e79f      	b.n	8001a7c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b3c:	69aa      	ldr	r2, [r5, #24]
 8001b3e:	4c4a      	ldr	r4, [pc, #296]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001b40:	4b4b      	ldr	r3, [pc, #300]	; (8001c70 <HAL_RCC_OscConfig+0x278>)
 8001b42:	b1da      	cbz	r2, 8001b7c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b48:	f7ff faa6 	bl	8001098 <HAL_GetTick>
 8001b4c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b50:	079b      	lsls	r3, r3, #30
 8001b52:	d50d      	bpl.n	8001b70 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b54:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_RCC_OscConfig+0x27c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b60:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001b62:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001b64:	9b01      	ldr	r3, [sp, #4]
 8001b66:	1e5a      	subs	r2, r3, #1
 8001b68:	9201      	str	r2, [sp, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f9      	bne.n	8001b62 <HAL_RCC_OscConfig+0x16a>
 8001b6e:	e750      	b.n	8001a12 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b70:	f7ff fa92 	bl	8001098 <HAL_GetTick>
 8001b74:	1b80      	subs	r0, r0, r6
 8001b76:	2802      	cmp	r0, #2
 8001b78:	d9e9      	bls.n	8001b4e <HAL_RCC_OscConfig+0x156>
 8001b7a:	e77f      	b.n	8001a7c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001b7c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001b7e:	f7ff fa8b 	bl	8001098 <HAL_GetTick>
 8001b82:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b86:	079f      	lsls	r7, r3, #30
 8001b88:	f57f af43 	bpl.w	8001a12 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7ff fa84 	bl	8001098 <HAL_GetTick>
 8001b90:	1b80      	subs	r0, r0, r6
 8001b92:	2802      	cmp	r0, #2
 8001b94:	d9f6      	bls.n	8001b84 <HAL_RCC_OscConfig+0x18c>
 8001b96:	e771      	b.n	8001a7c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b98:	4c33      	ldr	r4, [pc, #204]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	69e3      	ldr	r3, [r4, #28]
 8001b9c:	00d8      	lsls	r0, r3, #3
 8001b9e:	d424      	bmi.n	8001bea <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001ba0:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	69e3      	ldr	r3, [r4, #28]
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	61e3      	str	r3, [r4, #28]
 8001baa:	69e3      	ldr	r3, [r4, #28]
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	4e30      	ldr	r6, [pc, #192]	; (8001c78 <HAL_RCC_OscConfig+0x280>)
 8001bb6:	6833      	ldr	r3, [r6, #0]
 8001bb8:	05d9      	lsls	r1, r3, #23
 8001bba:	d518      	bpl.n	8001bee <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bbc:	68eb      	ldr	r3, [r5, #12]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d126      	bne.n	8001c10 <HAL_RCC_OscConfig+0x218>
 8001bc2:	6a23      	ldr	r3, [r4, #32]
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001bca:	f7ff fa65 	bl	8001098 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001bd2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd4:	6a23      	ldr	r3, [r4, #32]
 8001bd6:	079b      	lsls	r3, r3, #30
 8001bd8:	d53f      	bpl.n	8001c5a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001bda:	2f00      	cmp	r7, #0
 8001bdc:	f43f af1d 	beq.w	8001a1a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be0:	69e3      	ldr	r3, [r4, #28]
 8001be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be6:	61e3      	str	r3, [r4, #28]
 8001be8:	e717      	b.n	8001a1a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001bea:	2700      	movs	r7, #0
 8001bec:	e7e2      	b.n	8001bb4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bee:	6833      	ldr	r3, [r6, #0]
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001bf6:	f7ff fa4f 	bl	8001098 <HAL_GetTick>
 8001bfa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	6833      	ldr	r3, [r6, #0]
 8001bfe:	05da      	lsls	r2, r3, #23
 8001c00:	d4dc      	bmi.n	8001bbc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c02:	f7ff fa49 	bl	8001098 <HAL_GetTick>
 8001c06:	eba0 0008 	sub.w	r0, r0, r8
 8001c0a:	2864      	cmp	r0, #100	; 0x64
 8001c0c:	d9f6      	bls.n	8001bfc <HAL_RCC_OscConfig+0x204>
 8001c0e:	e735      	b.n	8001a7c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c10:	b9ab      	cbnz	r3, 8001c3e <HAL_RCC_OscConfig+0x246>
 8001c12:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c14:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	6223      	str	r3, [r4, #32]
 8001c1e:	6a23      	ldr	r3, [r4, #32]
 8001c20:	f023 0304 	bic.w	r3, r3, #4
 8001c24:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001c26:	f7ff fa37 	bl	8001098 <HAL_GetTick>
 8001c2a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2c:	6a23      	ldr	r3, [r4, #32]
 8001c2e:	0798      	lsls	r0, r3, #30
 8001c30:	d5d3      	bpl.n	8001bda <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7ff fa31 	bl	8001098 <HAL_GetTick>
 8001c36:	1b80      	subs	r0, r0, r6
 8001c38:	4540      	cmp	r0, r8
 8001c3a:	d9f7      	bls.n	8001c2c <HAL_RCC_OscConfig+0x234>
 8001c3c:	e71e      	b.n	8001a7c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3e:	2b05      	cmp	r3, #5
 8001c40:	6a23      	ldr	r3, [r4, #32]
 8001c42:	d103      	bne.n	8001c4c <HAL_RCC_OscConfig+0x254>
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	6223      	str	r3, [r4, #32]
 8001c4a:	e7ba      	b.n	8001bc2 <HAL_RCC_OscConfig+0x1ca>
 8001c4c:	f023 0301 	bic.w	r3, r3, #1
 8001c50:	6223      	str	r3, [r4, #32]
 8001c52:	6a23      	ldr	r3, [r4, #32]
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	e7b6      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7ff fa1d 	bl	8001098 <HAL_GetTick>
 8001c5e:	eba0 0008 	sub.w	r0, r0, r8
 8001c62:	42b0      	cmp	r0, r6
 8001c64:	d9b6      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x1dc>
 8001c66:	e709      	b.n	8001a7c <HAL_RCC_OscConfig+0x84>
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	42420000 	.word	0x42420000
 8001c70:	42420480 	.word	0x42420480
 8001c74:	20000008 	.word	0x20000008
 8001c78:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c7c:	4c22      	ldr	r4, [pc, #136]	; (8001d08 <HAL_RCC_OscConfig+0x310>)
 8001c7e:	6863      	ldr	r3, [r4, #4]
 8001c80:	f003 030c 	and.w	r3, r3, #12
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	f43f aee2 	beq.w	8001a4e <HAL_RCC_OscConfig+0x56>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	4e1f      	ldr	r6, [pc, #124]	; (8001d0c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001c90:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c92:	d12b      	bne.n	8001cec <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001c94:	f7ff fa00 	bl	8001098 <HAL_GetTick>
 8001c98:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	0199      	lsls	r1, r3, #6
 8001c9e:	d41f      	bmi.n	8001ce0 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ca0:	6a2b      	ldr	r3, [r5, #32]
 8001ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca6:	d105      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ca8:	6862      	ldr	r2, [r4, #4]
 8001caa:	68a9      	ldr	r1, [r5, #8]
 8001cac:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001cb6:	6862      	ldr	r2, [r4, #4]
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001cc6:	f7ff f9e7 	bl	8001098 <HAL_GetTick>
 8001cca:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	019a      	lsls	r2, r3, #6
 8001cd0:	f53f aea7 	bmi.w	8001a22 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7ff f9e0 	bl	8001098 <HAL_GetTick>
 8001cd8:	1b40      	subs	r0, r0, r5
 8001cda:	2802      	cmp	r0, #2
 8001cdc:	d9f6      	bls.n	8001ccc <HAL_RCC_OscConfig+0x2d4>
 8001cde:	e6cd      	b.n	8001a7c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce0:	f7ff f9da 	bl	8001098 <HAL_GetTick>
 8001ce4:	1bc0      	subs	r0, r0, r7
 8001ce6:	2802      	cmp	r0, #2
 8001ce8:	d9d7      	bls.n	8001c9a <HAL_RCC_OscConfig+0x2a2>
 8001cea:	e6c7      	b.n	8001a7c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001cec:	f7ff f9d4 	bl	8001098 <HAL_GetTick>
 8001cf0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf2:	6823      	ldr	r3, [r4, #0]
 8001cf4:	019b      	lsls	r3, r3, #6
 8001cf6:	f57f ae94 	bpl.w	8001a22 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7ff f9cd 	bl	8001098 <HAL_GetTick>
 8001cfe:	1b40      	subs	r0, r0, r5
 8001d00:	2802      	cmp	r0, #2
 8001d02:	d9f6      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x2fa>
 8001d04:	e6ba      	b.n	8001a7c <HAL_RCC_OscConfig+0x84>
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	42420060 	.word	0x42420060

08001d10 <HAL_RCC_GetSysClockFreq>:
{
 8001d10:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001d14:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d16:	ac02      	add	r4, sp, #8
 8001d18:	f103 0510 	add.w	r5, r3, #16
 8001d1c:	4622      	mov	r2, r4
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	6859      	ldr	r1, [r3, #4]
 8001d22:	3308      	adds	r3, #8
 8001d24:	c203      	stmia	r2!, {r0, r1}
 8001d26:	42ab      	cmp	r3, r5
 8001d28:	4614      	mov	r4, r2
 8001d2a:	d1f7      	bne.n	8001d1c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001d32:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001d34:	4911      	ldr	r1, [pc, #68]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d36:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001d3a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001d3c:	f003 020c 	and.w	r2, r3, #12
 8001d40:	2a08      	cmp	r2, #8
 8001d42:	d117      	bne.n	8001d74 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d44:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001d48:	a806      	add	r0, sp, #24
 8001d4a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d4c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d4e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d52:	d50c      	bpl.n	8001d6e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d54:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d56:	480a      	ldr	r0, [pc, #40]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d58:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d5c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d5e:	aa06      	add	r2, sp, #24
 8001d60:	4413      	add	r3, r2
 8001d62:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d66:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001d6a:	b007      	add	sp, #28
 8001d6c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x74>)
 8001d70:	4350      	muls	r0, r2
 8001d72:	e7fa      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001d76:	e7f8      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x5a>
 8001d78:	08005100 	.word	0x08005100
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	007a1200 	.word	0x007a1200
 8001d84:	003d0900 	.word	0x003d0900

08001d88 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d88:	4a54      	ldr	r2, [pc, #336]	; (8001edc <HAL_RCC_ClockConfig+0x154>)
{
 8001d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d8e:	6813      	ldr	r3, [r2, #0]
{
 8001d90:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	428b      	cmp	r3, r1
{
 8001d98:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d9a:	d32a      	bcc.n	8001df2 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d9c:	6829      	ldr	r1, [r5, #0]
 8001d9e:	078c      	lsls	r4, r1, #30
 8001da0:	d434      	bmi.n	8001e0c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da2:	07ca      	lsls	r2, r1, #31
 8001da4:	d447      	bmi.n	8001e36 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001da6:	4a4d      	ldr	r2, [pc, #308]	; (8001edc <HAL_RCC_ClockConfig+0x154>)
 8001da8:	6813      	ldr	r3, [r2, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	429e      	cmp	r6, r3
 8001db0:	f0c0 8082 	bcc.w	8001eb8 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	682a      	ldr	r2, [r5, #0]
 8001db6:	4c4a      	ldr	r4, [pc, #296]	; (8001ee0 <HAL_RCC_ClockConfig+0x158>)
 8001db8:	f012 0f04 	tst.w	r2, #4
 8001dbc:	f040 8087 	bne.w	8001ece <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc0:	0713      	lsls	r3, r2, #28
 8001dc2:	d506      	bpl.n	8001dd2 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dc4:	6863      	ldr	r3, [r4, #4]
 8001dc6:	692a      	ldr	r2, [r5, #16]
 8001dc8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001dcc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001dd0:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dd2:	f7ff ff9d 	bl	8001d10 <HAL_RCC_GetSysClockFreq>
 8001dd6:	6863      	ldr	r3, [r4, #4]
 8001dd8:	4a42      	ldr	r2, [pc, #264]	; (8001ee4 <HAL_RCC_ClockConfig+0x15c>)
 8001dda:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	40d8      	lsrs	r0, r3
 8001de2:	4b41      	ldr	r3, [pc, #260]	; (8001ee8 <HAL_RCC_ClockConfig+0x160>)
 8001de4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff f914 	bl	8001014 <HAL_InitTick>
  return HAL_OK;
 8001dec:	2000      	movs	r0, #0
}
 8001dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	6813      	ldr	r3, [r2, #0]
 8001df4:	f023 0307 	bic.w	r3, r3, #7
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dfc:	6813      	ldr	r3, [r2, #0]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	4299      	cmp	r1, r3
 8001e04:	d0ca      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001e06:	2001      	movs	r0, #1
 8001e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e0c:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e12:	bf1e      	ittt	ne
 8001e14:	685a      	ldrne	r2, [r3, #4]
 8001e16:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001e1a:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e1e:	bf42      	ittt	mi
 8001e20:	685a      	ldrmi	r2, [r3, #4]
 8001e22:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001e26:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	68a8      	ldr	r0, [r5, #8]
 8001e2c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e30:	4302      	orrs	r2, r0
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	e7b5      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e36:	686a      	ldr	r2, [r5, #4]
 8001e38:	4c29      	ldr	r4, [pc, #164]	; (8001ee0 <HAL_RCC_ClockConfig+0x158>)
 8001e3a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3e:	d11c      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e40:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e44:	d0df      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e46:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e4c:	f023 0303 	bic.w	r3, r3, #3
 8001e50:	4313      	orrs	r3, r2
 8001e52:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001e54:	f7ff f920 	bl	8001098 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e58:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001e5a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d114      	bne.n	8001e8a <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e60:	6863      	ldr	r3, [r4, #4]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d09d      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6a:	f7ff f915 	bl	8001098 <HAL_GetTick>
 8001e6e:	1bc0      	subs	r0, r0, r7
 8001e70:	4540      	cmp	r0, r8
 8001e72:	d9f5      	bls.n	8001e60 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001e74:	2003      	movs	r0, #3
 8001e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7a:	2a02      	cmp	r2, #2
 8001e7c:	d102      	bne.n	8001e84 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e82:	e7df      	b.n	8001e44 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	f013 0f02 	tst.w	r3, #2
 8001e88:	e7dc      	b.n	8001e44 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d10f      	bne.n	8001eae <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e8e:	6863      	ldr	r3, [r4, #4]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d086      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e98:	f7ff f8fe 	bl	8001098 <HAL_GetTick>
 8001e9c:	1bc0      	subs	r0, r0, r7
 8001e9e:	4540      	cmp	r0, r8
 8001ea0:	d9f5      	bls.n	8001e8e <HAL_RCC_ClockConfig+0x106>
 8001ea2:	e7e7      	b.n	8001e74 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea4:	f7ff f8f8 	bl	8001098 <HAL_GetTick>
 8001ea8:	1bc0      	subs	r0, r0, r7
 8001eaa:	4540      	cmp	r0, r8
 8001eac:	d8e2      	bhi.n	8001e74 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eae:	6863      	ldr	r3, [r4, #4]
 8001eb0:	f013 0f0c 	tst.w	r3, #12
 8001eb4:	d1f6      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x11c>
 8001eb6:	e776      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb8:	6813      	ldr	r3, [r2, #0]
 8001eba:	f023 0307 	bic.w	r3, r3, #7
 8001ebe:	4333      	orrs	r3, r6
 8001ec0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ec2:	6813      	ldr	r3, [r2, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	429e      	cmp	r6, r3
 8001eca:	d19c      	bne.n	8001e06 <HAL_RCC_ClockConfig+0x7e>
 8001ecc:	e772      	b.n	8001db4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ece:	6863      	ldr	r3, [r4, #4]
 8001ed0:	68e9      	ldr	r1, [r5, #12]
 8001ed2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	6063      	str	r3, [r4, #4]
 8001eda:	e771      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x38>
 8001edc:	40022000 	.word	0x40022000
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	0800513a 	.word	0x0800513a
 8001ee8:	20000008 	.word	0x20000008

08001eec <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	4a03      	ldr	r2, [pc, #12]	; (8001f08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001efa:	6810      	ldr	r0, [r2, #0]
}    
 8001efc:	40d8      	lsrs	r0, r3
 8001efe:	4770      	bx	lr
 8001f00:	40021000 	.word	0x40021000
 8001f04:	0800514a 	.word	0x0800514a
 8001f08:	20000008 	.word	0x20000008

08001f0c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001f16:	5cd3      	ldrb	r3, [r2, r3]
 8001f18:	4a03      	ldr	r2, [pc, #12]	; (8001f28 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f1a:	6810      	ldr	r0, [r2, #0]
} 
 8001f1c:	40d8      	lsrs	r0, r3
 8001f1e:	4770      	bx	lr
 8001f20:	40021000 	.word	0x40021000
 8001f24:	0800514a 	.word	0x0800514a
 8001f28:	20000008 	.word	0x20000008

08001f2c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f2c:	6803      	ldr	r3, [r0, #0]
{
 8001f2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f32:	07d9      	lsls	r1, r3, #31
{
 8001f34:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f36:	d520      	bpl.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f38:	4c35      	ldr	r4, [pc, #212]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001f3a:	69e3      	ldr	r3, [r4, #28]
 8001f3c:	00da      	lsls	r2, r3, #3
 8001f3e:	d432      	bmi.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001f40:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	69e3      	ldr	r3, [r4, #28]
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f48:	61e3      	str	r3, [r4, #28]
 8001f4a:	69e3      	ldr	r3, [r4, #28]
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f54:	4e2f      	ldr	r6, [pc, #188]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001f56:	6833      	ldr	r3, [r6, #0]
 8001f58:	05db      	lsls	r3, r3, #23
 8001f5a:	d526      	bpl.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f5c:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f5e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f62:	d136      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001f64:	6a23      	ldr	r3, [r4, #32]
 8001f66:	686a      	ldr	r2, [r5, #4]
 8001f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f70:	b11f      	cbz	r7, 8001f7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f72:	69e3      	ldr	r3, [r4, #28]
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f78:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f7a:	6828      	ldr	r0, [r5, #0]
 8001f7c:	0783      	lsls	r3, r0, #30
 8001f7e:	d506      	bpl.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f80:	4a23      	ldr	r2, [pc, #140]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001f82:	68a9      	ldr	r1, [r5, #8]
 8001f84:	6853      	ldr	r3, [r2, #4]
 8001f86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f8a:	430b      	orrs	r3, r1
 8001f8c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f8e:	f010 0010 	ands.w	r0, r0, #16
 8001f92:	d01b      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f94:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001f96:	6969      	ldr	r1, [r5, #20]
 8001f98:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f9a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f9c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	6053      	str	r3, [r2, #4]
 8001fa4:	e012      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001fa6:	2700      	movs	r7, #0
 8001fa8:	e7d4      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	6833      	ldr	r3, [r6, #0]
 8001fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001fb2:	f7ff f871 	bl	8001098 <HAL_GetTick>
 8001fb6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	6833      	ldr	r3, [r6, #0]
 8001fba:	05d8      	lsls	r0, r3, #23
 8001fbc:	d4ce      	bmi.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbe:	f7ff f86b 	bl	8001098 <HAL_GetTick>
 8001fc2:	eba0 0008 	sub.w	r0, r0, r8
 8001fc6:	2864      	cmp	r0, #100	; 0x64
 8001fc8:	d9f6      	bls.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001fca:	2003      	movs	r0, #3
}
 8001fcc:	b002      	add	sp, #8
 8001fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fd2:	686a      	ldr	r2, [r5, #4]
 8001fd4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d0c3      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fdc:	2001      	movs	r0, #1
 8001fde:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fe0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fe2:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe4:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fe6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fea:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001fec:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fee:	07d9      	lsls	r1, r3, #31
 8001ff0:	d5b8      	bpl.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001ff2:	f7ff f851 	bl	8001098 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001ffa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffc:	6a23      	ldr	r3, [r4, #32]
 8001ffe:	079a      	lsls	r2, r3, #30
 8002000:	d4b0      	bmi.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7ff f849 	bl	8001098 <HAL_GetTick>
 8002006:	1b80      	subs	r0, r0, r6
 8002008:	4540      	cmp	r0, r8
 800200a:	d9f7      	bls.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800200c:	e7dd      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	40007000 	.word	0x40007000
 8002018:	42420440 	.word	0x42420440

0800201c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800201c:	4602      	mov	r2, r0
 800201e:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002020:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
{
 8002022:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002024:	ad02      	add	r5, sp, #8
 8002026:	f103 0610 	add.w	r6, r3, #16
 800202a:	462c      	mov	r4, r5
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	3308      	adds	r3, #8
 8002032:	c403      	stmia	r4!, {r0, r1}
 8002034:	42b3      	cmp	r3, r6
 8002036:	4625      	mov	r5, r4
 8002038:	d1f7      	bne.n	800202a <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800203a:	2301      	movs	r3, #1
 800203c:	f88d 3004 	strb.w	r3, [sp, #4]
 8002040:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8002042:	1e50      	subs	r0, r2, #1
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002044:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8002048:	280f      	cmp	r0, #15
 800204a:	d85e      	bhi.n	800210a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800204c:	e8df f000 	tbb	[pc, r0]
 8002050:	2d5d5132 	.word	0x2d5d5132
 8002054:	2d5d5d5d 	.word	0x2d5d5d5d
 8002058:	5d5d5d5d 	.word	0x5d5d5d5d
 800205c:	085d5d5d 	.word	0x085d5d5d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002060:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 8002062:	6859      	ldr	r1, [r3, #4]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800206a:	d037      	beq.n	80020dc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800206c:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8002070:	a806      	add	r0, sp, #24
 8002072:	4402      	add	r2, r0
 8002074:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002078:	03ca      	lsls	r2, r1, #15
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800207a:	bf41      	itttt	mi
 800207c:	685a      	ldrmi	r2, [r3, #4]
 800207e:	a906      	addmi	r1, sp, #24
 8002080:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8002084:	1852      	addmi	r2, r2, r1
 8002086:	bf44      	itt	mi
 8002088:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800208c:	4a22      	ldrmi	r2, [pc, #136]	; (8002118 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800208e:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002090:	bf4c      	ite	mi
 8002092:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002096:	4a21      	ldrpl	r2, [pc, #132]	; (800211c <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002098:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800209a:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800209e:	d41d      	bmi.n	80020dc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 80020a0:	2303      	movs	r3, #3
 80020a2:	0040      	lsls	r0, r0, #1
      }
      break;
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80020a4:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80020a8:	e018      	b.n	80020dc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
    {
      break;
    }
  }
  return(frequency);
}
 80020aa:	b006      	add	sp, #24
 80020ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      frequency = HAL_RCC_GetSysClockFreq();
 80020b0:	f7ff be2e 	b.w	8001d10 <HAL_RCC_GetSysClockFreq>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80020b4:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80020b8:	4a16      	ldr	r2, [pc, #88]	; (8002114 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 80020ba:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80020bc:	4019      	ands	r1, r3
 80020be:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80020c2:	d01f      	beq.n	8002104 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80020c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020cc:	d108      	bne.n	80020e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        frequency = LSI_VALUE;
 80020ce:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80020d2:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80020d4:	f013 0f02 	tst.w	r3, #2
        frequency = HSE_VALUE / 128U;
 80020d8:	bf08      	it	eq
 80020da:	2000      	moveq	r0, #0
}
 80020dc:	b006      	add	sp, #24
 80020de:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80020e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020e4:	d111      	bne.n	800210a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80020e6:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 80020e8:	f24f 4024 	movw	r0, #62500	; 0xf424
 80020ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020f0:	e7f2      	b.n	80020d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80020f2:	f7ff ff0b 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80020fe:	3301      	adds	r3, #1
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	e7cf      	b.n	80020a4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        frequency = LSE_VALUE;
 8002104:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002108:	e7e8      	b.n	80020dc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
        frequency = 0U;
 800210a:	2000      	movs	r0, #0
 800210c:	e7e6      	b.n	80020dc <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 800210e:	bf00      	nop
 8002110:	08005110 	.word	0x08005110
 8002114:	40021000 	.word	0x40021000
 8002118:	007a1200 	.word	0x007a1200
 800211c:	003d0900 	.word	0x003d0900

08002120 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002120:	6803      	ldr	r3, [r0, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002128:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	f022 0201 	bic.w	r2, r2, #1
 8002130:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002132:	2320      	movs	r3, #32
 8002134:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002138:	4770      	bx	lr
	...

0800213c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800213c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002140:	6805      	ldr	r5, [r0, #0]
 8002142:	68c2      	ldr	r2, [r0, #12]
 8002144:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002146:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002148:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800214c:	4313      	orrs	r3, r2
 800214e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002150:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002152:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002154:	430b      	orrs	r3, r1
 8002156:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002158:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800215c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002160:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002162:	4313      	orrs	r3, r2
 8002164:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002166:	696b      	ldr	r3, [r5, #20]
 8002168:	6982      	ldr	r2, [r0, #24]
 800216a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800216e:	4313      	orrs	r3, r2
 8002170:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002172:	4b40      	ldr	r3, [pc, #256]	; (8002274 <UART_SetConfig+0x138>)
{
 8002174:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8002176:	429d      	cmp	r5, r3
 8002178:	f04f 0419 	mov.w	r4, #25
 800217c:	d146      	bne.n	800220c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800217e:	f7ff fec5 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
 8002182:	fb04 f300 	mul.w	r3, r4, r0
 8002186:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800218a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800218e:	00b6      	lsls	r6, r6, #2
 8002190:	fbb3 f3f6 	udiv	r3, r3, r6
 8002194:	fbb3 f3f8 	udiv	r3, r3, r8
 8002198:	011e      	lsls	r6, r3, #4
 800219a:	f7ff feb7 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
 800219e:	4360      	muls	r0, r4
 80021a0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	fbb0 f7f3 	udiv	r7, r0, r3
 80021aa:	f7ff feaf 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
 80021ae:	4360      	muls	r0, r4
 80021b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ba:	fbb3 f3f8 	udiv	r3, r3, r8
 80021be:	fb08 7313 	mls	r3, r8, r3, r7
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	3332      	adds	r3, #50	; 0x32
 80021c6:	fbb3 f3f8 	udiv	r3, r3, r8
 80021ca:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80021ce:	f7ff fe9d 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
 80021d2:	4360      	muls	r0, r4
 80021d4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80021d8:	0092      	lsls	r2, r2, #2
 80021da:	fbb0 faf2 	udiv	sl, r0, r2
 80021de:	f7ff fe95 	bl	8001f0c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021e2:	4360      	muls	r0, r4
 80021e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ee:	fbb3 f3f8 	udiv	r3, r3, r8
 80021f2:	fb08 a313 	mls	r3, r8, r3, sl
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	3332      	adds	r3, #50	; 0x32
 80021fa:	fbb3 f3f8 	udiv	r3, r3, r8
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	433b      	orrs	r3, r7
 8002204:	4433      	add	r3, r6
 8002206:	60ab      	str	r3, [r5, #8]
 8002208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800220c:	f7ff fe6e 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002210:	fb04 f300 	mul.w	r3, r4, r0
 8002214:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002218:	f04f 0864 	mov.w	r8, #100	; 0x64
 800221c:	00b6      	lsls	r6, r6, #2
 800221e:	fbb3 f3f6 	udiv	r3, r3, r6
 8002222:	fbb3 f3f8 	udiv	r3, r3, r8
 8002226:	011e      	lsls	r6, r3, #4
 8002228:	f7ff fe60 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 800222c:	4360      	muls	r0, r4
 800222e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	fbb0 f7f3 	udiv	r7, r0, r3
 8002238:	f7ff fe58 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 800223c:	4360      	muls	r0, r4
 800223e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	fbb0 f3f3 	udiv	r3, r0, r3
 8002248:	fbb3 f3f8 	udiv	r3, r3, r8
 800224c:	fb08 7313 	mls	r3, r8, r3, r7
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	3332      	adds	r3, #50	; 0x32
 8002254:	fbb3 f3f8 	udiv	r3, r3, r8
 8002258:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800225c:	f7ff fe46 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002260:	4360      	muls	r0, r4
 8002262:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002266:	0092      	lsls	r2, r2, #2
 8002268:	fbb0 faf2 	udiv	sl, r0, r2
 800226c:	f7ff fe3e 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002270:	e7b7      	b.n	80021e2 <UART_SetConfig+0xa6>
 8002272:	bf00      	nop
 8002274:	40013800 	.word	0x40013800

08002278 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227a:	4604      	mov	r4, r0
 800227c:	460e      	mov	r6, r1
 800227e:	4617      	mov	r7, r2
 8002280:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002282:	6821      	ldr	r1, [r4, #0]
 8002284:	680b      	ldr	r3, [r1, #0]
 8002286:	ea36 0303 	bics.w	r3, r6, r3
 800228a:	d101      	bne.n	8002290 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800228c:	2000      	movs	r0, #0
}
 800228e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002290:	1c6b      	adds	r3, r5, #1
 8002292:	d0f7      	beq.n	8002284 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002294:	b995      	cbnz	r5, 80022bc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002296:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002298:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80022a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	f022 0201 	bic.w	r2, r2, #1
 80022a8:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80022aa:	2320      	movs	r3, #32
 80022ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80022b0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80022b4:	2300      	movs	r3, #0
 80022b6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80022ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80022bc:	f7fe feec 	bl	8001098 <HAL_GetTick>
 80022c0:	1bc0      	subs	r0, r0, r7
 80022c2:	4285      	cmp	r5, r0
 80022c4:	d2dd      	bcs.n	8002282 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80022c6:	e7e6      	b.n	8002296 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080022c8 <HAL_UART_Init>:
{
 80022c8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80022ca:	4604      	mov	r4, r0
 80022cc:	b340      	cbz	r0, 8002320 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80022ce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022d6:	b91b      	cbnz	r3, 80022e0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80022d8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80022dc:	f000 fb18 	bl	8002910 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80022e0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80022e2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80022e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80022e8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80022ea:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80022ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022f0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80022f2:	f7ff ff23 	bl	800213c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022f6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002308:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002310:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002312:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002314:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002316:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800231a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800231e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002320:	2001      	movs	r0, #1
}
 8002322:	bd10      	pop	{r4, pc}

08002324 <HAL_UART_Transmit>:
{
 8002324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002328:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800232a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800232e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8002330:	2b20      	cmp	r3, #32
{
 8002332:	460d      	mov	r5, r1
 8002334:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002336:	d14e      	bne.n	80023d6 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8002338:	2900      	cmp	r1, #0
 800233a:	d049      	beq.n	80023d0 <HAL_UART_Transmit+0xac>
 800233c:	2a00      	cmp	r2, #0
 800233e:	d047      	beq.n	80023d0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002340:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002344:	2b01      	cmp	r3, #1
 8002346:	d046      	beq.n	80023d6 <HAL_UART_Transmit+0xb2>
 8002348:	2301      	movs	r3, #1
 800234a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234e:	2300      	movs	r3, #0
 8002350:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002352:	2321      	movs	r3, #33	; 0x21
 8002354:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002358:	f7fe fe9e 	bl	8001098 <HAL_GetTick>
 800235c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800235e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002362:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002366:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002368:	b29b      	uxth	r3, r3
 800236a:	b96b      	cbnz	r3, 8002388 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800236c:	463b      	mov	r3, r7
 800236e:	4632      	mov	r2, r6
 8002370:	2140      	movs	r1, #64	; 0x40
 8002372:	4620      	mov	r0, r4
 8002374:	f7ff ff80 	bl	8002278 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002378:	b9a8      	cbnz	r0, 80023a6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800237a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800237c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002380:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002388:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800238a:	4632      	mov	r2, r6
      huart->TxXferCount--;
 800238c:	3b01      	subs	r3, #1
 800238e:	b29b      	uxth	r3, r3
 8002390:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002392:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002394:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800239a:	4620      	mov	r0, r4
 800239c:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800239e:	d10e      	bne.n	80023be <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023a0:	f7ff ff6a 	bl	8002278 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80023a4:	b110      	cbz	r0, 80023ac <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80023a6:	2003      	movs	r0, #3
 80023a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80023ac:	882b      	ldrh	r3, [r5, #0]
 80023ae:	6822      	ldr	r2, [r4, #0]
 80023b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023b4:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80023b6:	6923      	ldr	r3, [r4, #16]
 80023b8:	b943      	cbnz	r3, 80023cc <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80023ba:	3502      	adds	r5, #2
 80023bc:	e7d3      	b.n	8002366 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023be:	f7ff ff5b 	bl	8002278 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80023c2:	2800      	cmp	r0, #0
 80023c4:	d1ef      	bne.n	80023a6 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	782a      	ldrb	r2, [r5, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	3501      	adds	r5, #1
 80023ce:	e7ca      	b.n	8002366 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80023d0:	2001      	movs	r0, #1
 80023d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80023d6:	2002      	movs	r0, #2
}
 80023d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080023dc <HAL_UART_TxCpltCallback>:
 80023dc:	4770      	bx	lr

080023de <HAL_UART_RxCpltCallback>:
 80023de:	4770      	bx	lr

080023e0 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80023e0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80023e4:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80023e6:	2b22      	cmp	r3, #34	; 0x22
 80023e8:	d136      	bne.n	8002458 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023ea:	6883      	ldr	r3, [r0, #8]
 80023ec:	6901      	ldr	r1, [r0, #16]
 80023ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f2:	6802      	ldr	r2, [r0, #0]
 80023f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80023f6:	d123      	bne.n	8002440 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023f8:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80023fa:	b9e9      	cbnz	r1, 8002438 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002400:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8002404:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8002406:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002408:	3c01      	subs	r4, #1
 800240a:	b2a4      	uxth	r4, r4
 800240c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800240e:	b98c      	cbnz	r4, 8002434 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002410:	6803      	ldr	r3, [r0, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	f022 0220 	bic.w	r2, r2, #32
 8002418:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002420:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	f022 0201 	bic.w	r2, r2, #1
 8002428:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800242a:	2320      	movs	r3, #32
 800242c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002430:	f7ff ffd5 	bl	80023de <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8002434:	2000      	movs	r0, #0
}
 8002436:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	f823 2b01 	strh.w	r2, [r3], #1
 800243e:	e7e1      	b.n	8002404 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002440:	b921      	cbnz	r1, 800244c <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002442:	1c59      	adds	r1, r3, #1
 8002444:	6852      	ldr	r2, [r2, #4]
 8002446:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002448:	701a      	strb	r2, [r3, #0]
 800244a:	e7dc      	b.n	8002406 <UART_Receive_IT+0x26>
 800244c:	6852      	ldr	r2, [r2, #4]
 800244e:	1c59      	adds	r1, r3, #1
 8002450:	6281      	str	r1, [r0, #40]	; 0x28
 8002452:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002456:	e7f7      	b.n	8002448 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002458:	2002      	movs	r0, #2
 800245a:	bd10      	pop	{r4, pc}

0800245c <HAL_UART_ErrorCallback>:
 800245c:	4770      	bx	lr
	...

08002460 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002460:	6803      	ldr	r3, [r0, #0]
{
 8002462:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002464:	681a      	ldr	r2, [r3, #0]
{
 8002466:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8002468:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800246a:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800246c:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 800246e:	d107      	bne.n	8002480 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002470:	0696      	lsls	r6, r2, #26
 8002472:	d55a      	bpl.n	800252a <HAL_UART_IRQHandler+0xca>
 8002474:	068d      	lsls	r5, r1, #26
 8002476:	d558      	bpl.n	800252a <HAL_UART_IRQHandler+0xca>
}
 8002478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800247c:	f7ff bfb0 	b.w	80023e0 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002480:	f015 0501 	ands.w	r5, r5, #1
 8002484:	d102      	bne.n	800248c <HAL_UART_IRQHandler+0x2c>
 8002486:	f411 7f90 	tst.w	r1, #288	; 0x120
 800248a:	d04e      	beq.n	800252a <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800248c:	07d3      	lsls	r3, r2, #31
 800248e:	d505      	bpl.n	800249c <HAL_UART_IRQHandler+0x3c>
 8002490:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002492:	bf42      	ittt	mi
 8002494:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002496:	f043 0301 	orrmi.w	r3, r3, #1
 800249a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800249c:	0750      	lsls	r0, r2, #29
 800249e:	d504      	bpl.n	80024aa <HAL_UART_IRQHandler+0x4a>
 80024a0:	b11d      	cbz	r5, 80024aa <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024aa:	0793      	lsls	r3, r2, #30
 80024ac:	d504      	bpl.n	80024b8 <HAL_UART_IRQHandler+0x58>
 80024ae:	b11d      	cbz	r5, 80024b8 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024b2:	f043 0304 	orr.w	r3, r3, #4
 80024b6:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024b8:	0716      	lsls	r6, r2, #28
 80024ba:	d504      	bpl.n	80024c6 <HAL_UART_IRQHandler+0x66>
 80024bc:	b11d      	cbz	r5, 80024c6 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024c0:	f043 0308 	orr.w	r3, r3, #8
 80024c4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d066      	beq.n	800259a <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024cc:	0695      	lsls	r5, r2, #26
 80024ce:	d504      	bpl.n	80024da <HAL_UART_IRQHandler+0x7a>
 80024d0:	0688      	lsls	r0, r1, #26
 80024d2:	d502      	bpl.n	80024da <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 80024d4:	4620      	mov	r0, r4
 80024d6:	f7ff ff83 	bl	80023e0 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024da:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 80024dc:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024de:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80024e2:	0711      	lsls	r1, r2, #28
 80024e4:	d402      	bmi.n	80024ec <HAL_UART_IRQHandler+0x8c>
 80024e6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80024ea:	d01a      	beq.n	8002522 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80024ec:	f7ff fe18 	bl	8002120 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	0652      	lsls	r2, r2, #25
 80024f6:	d510      	bpl.n	800251a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024f8:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80024fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002500:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002502:	b150      	cbz	r0, 800251a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002504:	4b25      	ldr	r3, [pc, #148]	; (800259c <HAL_UART_IRQHandler+0x13c>)
 8002506:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002508:	f7ff f91c 	bl	8001744 <HAL_DMA_Abort_IT>
 800250c:	2800      	cmp	r0, #0
 800250e:	d044      	beq.n	800259a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002510:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002516:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002518:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800251a:	4620      	mov	r0, r4
 800251c:	f7ff ff9e 	bl	800245c <HAL_UART_ErrorCallback>
 8002520:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002522:	f7ff ff9b 	bl	800245c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002526:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002528:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800252a:	0616      	lsls	r6, r2, #24
 800252c:	d527      	bpl.n	800257e <HAL_UART_IRQHandler+0x11e>
 800252e:	060d      	lsls	r5, r1, #24
 8002530:	d525      	bpl.n	800257e <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8002532:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002536:	2a21      	cmp	r2, #33	; 0x21
 8002538:	d12f      	bne.n	800259a <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800253a:	68a2      	ldr	r2, [r4, #8]
 800253c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002540:	6a22      	ldr	r2, [r4, #32]
 8002542:	d117      	bne.n	8002574 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002544:	8811      	ldrh	r1, [r2, #0]
 8002546:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800254a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800254c:	6921      	ldr	r1, [r4, #16]
 800254e:	b979      	cbnz	r1, 8002570 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002550:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8002552:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8002554:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002556:	3a01      	subs	r2, #1
 8002558:	b292      	uxth	r2, r2
 800255a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800255c:	b9ea      	cbnz	r2, 800259a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002564:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8002570:	3201      	adds	r2, #1
 8002572:	e7ee      	b.n	8002552 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002574:	1c51      	adds	r1, r2, #1
 8002576:	6221      	str	r1, [r4, #32]
 8002578:	7812      	ldrb	r2, [r2, #0]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	e7ea      	b.n	8002554 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800257e:	0650      	lsls	r0, r2, #25
 8002580:	d50b      	bpl.n	800259a <HAL_UART_IRQHandler+0x13a>
 8002582:	064a      	lsls	r2, r1, #25
 8002584:	d509      	bpl.n	800259a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002586:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002588:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800258a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800258e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002590:	2320      	movs	r3, #32
 8002592:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002596:	f7ff ff21 	bl	80023dc <HAL_UART_TxCpltCallback>
 800259a:	bd70      	pop	{r4, r5, r6, pc}
 800259c:	080025a1 	.word	0x080025a1

080025a0 <UART_DMAAbortOnError>:
{
 80025a0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80025a2:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80025a6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025a8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80025aa:	f7ff ff57 	bl	800245c <HAL_UART_ErrorCallback>
 80025ae:	bd08      	pop	{r3, pc}

080025b0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80025b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80025b2:	4811      	ldr	r0, [pc, #68]	; (80025f8 <MX_ADC1_Init+0x48>)
 80025b4:	4a11      	ldr	r2, [pc, #68]	; (80025fc <MX_ADC1_Init+0x4c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80025b6:	2300      	movs	r3, #0
  hadc1.Instance = ADC1;
 80025b8:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 80025ba:	2401      	movs	r4, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025bc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	9302      	str	r3, [sp, #8]
 80025c4:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80025c6:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80025c8:	60c3      	str	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025ca:	6143      	str	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025cc:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025ce:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 80025d0:	6104      	str	r4, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025d2:	f7fe ff5d 	bl	8001490 <HAL_ADC_Init>
 80025d6:	b108      	cbz	r0, 80025dc <MX_ADC1_Init+0x2c>
  {
    Error_Handler();
 80025d8:	f000 f8f0 	bl	80027bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80025dc:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025de:	a901      	add	r1, sp, #4
 80025e0:	4805      	ldr	r0, [pc, #20]	; (80025f8 <MX_ADC1_Init+0x48>)
  sConfig.Channel = ADC_CHANNEL_1;
 80025e2:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025e4:	9402      	str	r4, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80025e6:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025e8:	f7fe fe10 	bl	800120c <HAL_ADC_ConfigChannel>
 80025ec:	b108      	cbz	r0, 80025f2 <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 80025ee:	f000 f8e5 	bl	80027bc <Error_Handler>
  }

}
 80025f2:	b004      	add	sp, #16
 80025f4:	bd10      	pop	{r4, pc}
 80025f6:	bf00      	nop
 80025f8:	20000208 	.word	0x20000208
 80025fc:	40012400 	.word	0x40012400

08002600 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002600:	b510      	push	{r4, lr}
 8002602:	4604      	mov	r4, r0
 8002604:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002606:	2210      	movs	r2, #16
 8002608:	2100      	movs	r1, #0
 800260a:	a802      	add	r0, sp, #8
 800260c:	f000 fa14 	bl	8002a38 <memset>
  if(adcHandle->Instance==ADC1)
 8002610:	6822      	ldr	r2, [r4, #0]
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HAL_ADC_MspInit+0x54>)
 8002614:	429a      	cmp	r2, r3
 8002616:	d11b      	bne.n	8002650 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002618:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800261c:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261e:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002624:	619a      	str	r2, [r3, #24]
 8002626:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	480b      	ldr	r0, [pc, #44]	; (8002658 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800262a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800262e:	9200      	str	r2, [sp, #0]
 8002630:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	699a      	ldr	r2, [r3, #24]
 8002634:	f042 0204 	orr.w	r2, r2, #4
 8002638:	619a      	str	r2, [r3, #24]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002644:	2302      	movs	r3, #2
 8002646:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002648:	2303      	movs	r3, #3
 800264a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264c:	f7ff f8e8 	bl	8001820 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002650:	b006      	add	sp, #24
 8002652:	bd10      	pop	{r4, pc}
 8002654:	40012400 	.word	0x40012400
 8002658:	40010800 	.word	0x40010800

0800265c <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <MX_GPIO_Init+0x1c>)
{
 800265e:	b082      	sub	sp, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002660:	699a      	ldr	r2, [r3, #24]
 8002662:	f042 0204 	orr.w	r2, r2, #4
 8002666:	619a      	str	r2, [r3, #24]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	9b01      	ldr	r3, [sp, #4]

}
 8002672:	b002      	add	sp, #8
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000

0800267c <__io_putchar>:
#define PUTCHAR_PROTOTYPE  int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 800267c:	b507      	push	{r0, r1, r2, lr}
 800267e:	a902      	add	r1, sp, #8
 8002680:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart1,(uint8_t *)&ch,1,HAL_MAX_DELAY);
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
 8002688:	2201      	movs	r2, #1
 800268a:	4803      	ldr	r0, [pc, #12]	; (8002698 <__io_putchar+0x1c>)
 800268c:	f7ff fe4a 	bl	8002324 <HAL_UART_Transmit>
	return ch;
}
 8002690:	9801      	ldr	r0, [sp, #4]
 8002692:	b003      	add	sp, #12
 8002694:	f85d fb04 	ldr.w	pc, [sp], #4
 8002698:	20000340 	.word	0x20000340

0800269c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800269c:	b510      	push	{r4, lr}
 800269e:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026a0:	2228      	movs	r2, #40	; 0x28
 80026a2:	2100      	movs	r1, #0
 80026a4:	a80c      	add	r0, sp, #48	; 0x30
 80026a6:	f000 f9c7 	bl	8002a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026aa:	2214      	movs	r2, #20
 80026ac:	2100      	movs	r1, #0
 80026ae:	a801      	add	r0, sp, #4
 80026b0:	f000 f9c2 	bl	8002a38 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b4:	2218      	movs	r2, #24
 80026b6:	2100      	movs	r1, #0
 80026b8:	eb0d 0002 	add.w	r0, sp, r2
 80026bc:	f000 f9bc 	bl	8002a38 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026c4:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026c6:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026c8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026ca:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026d0:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026d2:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026d4:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026d6:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026d8:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026da:	f7ff f98d 	bl	80019f8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026de:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026e4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026e6:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026e8:	4621      	mov	r1, r4
 80026ea:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ec:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026ee:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026f0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026f2:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026f4:	f7ff fb48 	bl	8001d88 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80026f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026fc:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026fe:	9406      	str	r4, [sp, #24]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002700:	9308      	str	r3, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002702:	f7ff fc13 	bl	8001f2c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002706:	b016      	add	sp, #88	; 0x58
 8002708:	bd10      	pop	{r4, pc}
	...

0800270c <main>:
{
 800270c:	b580      	push	{r7, lr}
  HAL_Init();
 800270e:	f7fe fca5 	bl	800105c <HAL_Init>
		  VOL_Value = ADC_Value *3.3f/4096;
 8002712:	f04f 5766 	mov.w	r7, #964689920	; 0x39800000
  SystemClock_Config();
 8002716:	f7ff ffc1 	bl	800269c <SystemClock_Config>
  MX_GPIO_Init();
 800271a:	f7ff ff9f 	bl	800265c <MX_GPIO_Init>
  MX_ADC1_Init();
 800271e:	f7ff ff47 	bl	80025b0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002722:	f000 f8d9 	bl	80028d8 <MX_USART1_UART_Init>
	  HAL_ADCEx_Calibration_Start(&hadc1);
 8002726:	4c18      	ldr	r4, [pc, #96]	; (8002788 <main+0x7c>)
		  VOL_Value = ADC_Value *3.3f/4096;
 8002728:	4e18      	ldr	r6, [pc, #96]	; (800278c <main+0x80>)
	  HAL_ADCEx_Calibration_Start(&hadc1);
 800272a:	4620      	mov	r0, r4
 800272c:	f7fe ff3a 	bl	80015a4 <HAL_ADCEx_Calibration_Start>
	  HAL_ADC_Start(&hadc1);
 8002730:	4620      	mov	r0, r4
 8002732:	f7fe fe29 	bl	8001388 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,50);
 8002736:	2132      	movs	r1, #50	; 0x32
 8002738:	4620      	mov	r0, r4
 800273a:	f7fe fcc5 	bl	80010c8 <HAL_ADC_PollForConversion>
	  if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1),HAL_ADC_STATE_REG_EOC))
 800273e:	4620      	mov	r0, r4
 8002740:	f7fe fde8 	bl	8001314 <HAL_ADC_GetState>
 8002744:	0583      	lsls	r3, r0, #22
 8002746:	d51a      	bpl.n	800277e <main+0x72>
		  ADC_Value = HAL_ADC_GetValue(&hadc1);
 8002748:	4620      	mov	r0, r4
 800274a:	f7fe fd5b 	bl	8001204 <HAL_ADC_GetValue>
 800274e:	4d10      	ldr	r5, [pc, #64]	; (8002790 <main+0x84>)
		  printf("ADC : %d \r\n",ADC_Value);
 8002750:	b281      	uxth	r1, r0
		  ADC_Value = HAL_ADC_GetValue(&hadc1);
 8002752:	8028      	strh	r0, [r5, #0]
		  printf("ADC : %d \r\n",ADC_Value);
 8002754:	480f      	ldr	r0, [pc, #60]	; (8002794 <main+0x88>)
 8002756:	f000 fdd9 	bl	800330c <iprintf>
		  VOL_Value = ADC_Value *3.3f/4096;
 800275a:	8828      	ldrh	r0, [r5, #0]
 800275c:	f7fe fab6 	bl	8000ccc <__aeabi_i2f>
 8002760:	4631      	mov	r1, r6
 8002762:	f7fe fb07 	bl	8000d74 <__aeabi_fmul>
 8002766:	4639      	mov	r1, r7
 8002768:	f7fe fb04 	bl	8000d74 <__aeabi_fmul>
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <main+0x8c>)
 800276e:	6018      	str	r0, [r3, #0]
		  printf("VOL:%.2f V \r\n",VOL_Value);
 8002770:	f7fd fec6 	bl	8000500 <__aeabi_f2d>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4808      	ldr	r0, [pc, #32]	; (800279c <main+0x90>)
 800277a:	f000 fdc7 	bl	800330c <iprintf>
	  HAL_Delay(200);
 800277e:	20c8      	movs	r0, #200	; 0xc8
 8002780:	f7fe fc90 	bl	80010a4 <HAL_Delay>
	  HAL_ADCEx_Calibration_Start(&hadc1);
 8002784:	e7d1      	b.n	800272a <main+0x1e>
 8002786:	bf00      	nop
 8002788:	20000208 	.word	0x20000208
 800278c:	40533333 	.word	0x40533333
 8002790:	20000338 	.word	0x20000338
 8002794:	08005120 	.word	0x08005120
 8002798:	2000033c 	.word	0x2000033c
 800279c:	0800512c 	.word	0x0800512c

080027a0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file,char *ptr,int len)
{
 80027a0:	b570      	push	{r4, r5, r6, lr}
 80027a2:	460e      	mov	r6, r1
 80027a4:	4615      	mov	r5, r2
	int DataIdx;
	for(DataIdx = 0;DataIdx < len;DataIdx ++)
 80027a6:	460c      	mov	r4, r1
 80027a8:	1ba3      	subs	r3, r4, r6
 80027aa:	429d      	cmp	r5, r3
 80027ac:	dc01      	bgt.n	80027b2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80027ae:	4628      	mov	r0, r5
 80027b0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80027b2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80027b6:	f7ff ff61 	bl	800267c <__io_putchar>
 80027ba:	e7f5      	b.n	80027a8 <_write+0x8>

080027bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027bc:	4770      	bx	lr
	...

080027c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027c0:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <HAL_MspInit+0x3c>)
{
 80027c2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	619a      	str	r2, [r3, #24]
 80027cc:	699a      	ldr	r2, [r3, #24]
 80027ce:	f002 0201 	and.w	r2, r2, #1
 80027d2:	9200      	str	r2, [sp, #0]
 80027d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d6:	69da      	ldr	r2, [r3, #28]
 80027d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027dc:	61da      	str	r2, [r3, #28]
 80027de:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027e0:	4a07      	ldr	r2, [pc, #28]	; (8002800 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ea:	6853      	ldr	r3, [r2, #4]
 80027ec:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f6:	b002      	add	sp, #8
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000
 8002800:	40010000 	.word	0x40010000

08002804 <NMI_Handler>:
 8002804:	4770      	bx	lr

08002806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002806:	e7fe      	b.n	8002806 <HardFault_Handler>

08002808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002808:	e7fe      	b.n	8002808 <MemManage_Handler>

0800280a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800280a:	e7fe      	b.n	800280a <BusFault_Handler>

0800280c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800280c:	e7fe      	b.n	800280c <UsageFault_Handler>

0800280e <SVC_Handler>:
 800280e:	4770      	bx	lr

08002810 <DebugMon_Handler>:
 8002810:	4770      	bx	lr

08002812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002812:	4770      	bx	lr

08002814 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002814:	f7fe bc34 	b.w	8001080 <HAL_IncTick>

08002818 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002818:	4801      	ldr	r0, [pc, #4]	; (8002820 <USART1_IRQHandler+0x8>)
 800281a:	f7ff be21 	b.w	8002460 <HAL_UART_IRQHandler>
 800281e:	bf00      	nop
 8002820:	20000340 	.word	0x20000340

08002824 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002824:	b570      	push	{r4, r5, r6, lr}
 8002826:	460e      	mov	r6, r1
 8002828:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282a:	460c      	mov	r4, r1
 800282c:	1ba3      	subs	r3, r4, r6
 800282e:	429d      	cmp	r5, r3
 8002830:	dc01      	bgt.n	8002836 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002832:	4628      	mov	r0, r5
 8002834:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002836:	f3af 8000 	nop.w
 800283a:	f804 0b01 	strb.w	r0, [r4], #1
 800283e:	e7f5      	b.n	800282c <_read+0x8>

08002840 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002840:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <_sbrk+0x2c>)
{
 8002844:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002846:	6819      	ldr	r1, [r3, #0]
 8002848:	b909      	cbnz	r1, 800284e <_sbrk+0xe>
		heap_end = &end;
 800284a:	4909      	ldr	r1, [pc, #36]	; (8002870 <_sbrk+0x30>)
 800284c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800284e:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002850:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002852:	4402      	add	r2, r0
 8002854:	428a      	cmp	r2, r1
 8002856:	d906      	bls.n	8002866 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002858:	f000 f8c4 	bl	80029e4 <__errno>
 800285c:	230c      	movs	r3, #12
 800285e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002860:	f04f 30ff 	mov.w	r0, #4294967295
 8002864:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002866:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002868:	bd08      	pop	{r3, pc}
 800286a:	bf00      	nop
 800286c:	200001f8 	.word	0x200001f8
 8002870:	20000384 	.word	0x20000384

08002874 <_close>:

int _close(int file)
{
	return -1;
}
 8002874:	f04f 30ff 	mov.w	r0, #4294967295
 8002878:	4770      	bx	lr

0800287a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800287a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800287e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002880:	604b      	str	r3, [r1, #4]
}
 8002882:	4770      	bx	lr

08002884 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002884:	2001      	movs	r0, #1
 8002886:	4770      	bx	lr

08002888 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002888:	2000      	movs	r0, #0
 800288a:	4770      	bx	lr

0800288c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <SystemInit+0x40>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	f042 0201 	orr.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	4a0d      	ldr	r2, [pc, #52]	; (80028d0 <SystemInit+0x44>)
 800289a:	400a      	ands	r2, r1
 800289c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80028a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028a8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028b0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80028b8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80028ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80028be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80028c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <SystemInit+0x48>)
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	f8ff0000 	.word	0xf8ff0000
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028d8:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 80028da:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
  huart1.Instance = USART1;
 80028de:	480a      	ldr	r0, [pc, #40]	; (8002908 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 9600;
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028e2:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 9600;
 80028e4:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028e8:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028ea:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028ec:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028ee:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028f0:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028f6:	f7ff fce7 	bl	80022c8 <HAL_UART_Init>
 80028fa:	b118      	cbz	r0, 8002904 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80028fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002900:	f7ff bf5c 	b.w	80027bc <Error_Handler>
 8002904:	bd08      	pop	{r3, pc}
 8002906:	bf00      	nop
 8002908:	20000340 	.word	0x20000340
 800290c:	40013800 	.word	0x40013800

08002910 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002910:	b510      	push	{r4, lr}
 8002912:	4604      	mov	r4, r0
 8002914:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002916:	2210      	movs	r2, #16
 8002918:	2100      	movs	r1, #0
 800291a:	a802      	add	r0, sp, #8
 800291c:	f000 f88c 	bl	8002a38 <memset>
  if(uartHandle->Instance==USART1)
 8002920:	6822      	ldr	r2, [r4, #0]
 8002922:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_UART_MspInit+0x80>)
 8002924:	429a      	cmp	r2, r3
 8002926:	d130      	bne.n	800298a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002928:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800292c:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002934:	619a      	str	r2, [r3, #24]
 8002936:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002938:	4816      	ldr	r0, [pc, #88]	; (8002994 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800293a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800293e:	9200      	str	r2, [sp, #0]
 8002940:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002942:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002944:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002946:	f042 0204 	orr.w	r2, r2, #4
 800294a:	619a      	str	r2, [r3, #24]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800295a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295c:	2302      	movs	r3, #2
 800295e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002960:	2303      	movs	r3, #3
 8002962:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002964:	f7fe ff5c 	bl	8001820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002968:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296c:	a902      	add	r1, sp, #8
 800296e:	4809      	ldr	r0, [pc, #36]	; (8002994 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002970:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002972:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002976:	f7fe ff53 	bl	8001820 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800297a:	2025      	movs	r0, #37	; 0x25
 800297c:	4622      	mov	r2, r4
 800297e:	4621      	mov	r1, r4
 8002980:	f7fe fe8a 	bl	8001698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002984:	2025      	movs	r0, #37	; 0x25
 8002986:	f7fe febb 	bl	8001700 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800298a:	b006      	add	sp, #24
 800298c:	bd10      	pop	{r4, pc}
 800298e:	bf00      	nop
 8002990:	40013800 	.word	0x40013800
 8002994:	40010800 	.word	0x40010800

08002998 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002998:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800299a:	e003      	b.n	80029a4 <LoopCopyDataInit>

0800299c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800299e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80029a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80029a2:	3104      	adds	r1, #4

080029a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80029a4:	480a      	ldr	r0, [pc, #40]	; (80029d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80029a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80029aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80029ac:	d3f6      	bcc.n	800299c <CopyDataInit>
  ldr r2, =_sbss
 80029ae:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80029b0:	e002      	b.n	80029b8 <LoopFillZerobss>

080029b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80029b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80029b4:	f842 3b04 	str.w	r3, [r2], #4

080029b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80029ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80029bc:	d3f9      	bcc.n	80029b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029be:	f7ff ff65 	bl	800288c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029c2:	f000 f815 	bl	80029f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029c6:	f7ff fea1 	bl	800270c <main>
  bx lr
 80029ca:	4770      	bx	lr
  ldr r3, =_sidata
 80029cc:	08005420 	.word	0x08005420
  ldr r0, =_sdata
 80029d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80029d4:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80029d8:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80029dc:	20000384 	.word	0x20000384

080029e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029e0:	e7fe      	b.n	80029e0 <ADC1_2_IRQHandler>
	...

080029e4 <__errno>:
 80029e4:	4b01      	ldr	r3, [pc, #4]	; (80029ec <__errno+0x8>)
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	2000000c 	.word	0x2000000c

080029f0 <__libc_init_array>:
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	2500      	movs	r5, #0
 80029f4:	4e0c      	ldr	r6, [pc, #48]	; (8002a28 <__libc_init_array+0x38>)
 80029f6:	4c0d      	ldr	r4, [pc, #52]	; (8002a2c <__libc_init_array+0x3c>)
 80029f8:	1ba4      	subs	r4, r4, r6
 80029fa:	10a4      	asrs	r4, r4, #2
 80029fc:	42a5      	cmp	r5, r4
 80029fe:	d109      	bne.n	8002a14 <__libc_init_array+0x24>
 8002a00:	f002 fb72 	bl	80050e8 <_init>
 8002a04:	2500      	movs	r5, #0
 8002a06:	4e0a      	ldr	r6, [pc, #40]	; (8002a30 <__libc_init_array+0x40>)
 8002a08:	4c0a      	ldr	r4, [pc, #40]	; (8002a34 <__libc_init_array+0x44>)
 8002a0a:	1ba4      	subs	r4, r4, r6
 8002a0c:	10a4      	asrs	r4, r4, #2
 8002a0e:	42a5      	cmp	r5, r4
 8002a10:	d105      	bne.n	8002a1e <__libc_init_array+0x2e>
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
 8002a14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a18:	4798      	blx	r3
 8002a1a:	3501      	adds	r5, #1
 8002a1c:	e7ee      	b.n	80029fc <__libc_init_array+0xc>
 8002a1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a22:	4798      	blx	r3
 8002a24:	3501      	adds	r5, #1
 8002a26:	e7f2      	b.n	8002a0e <__libc_init_array+0x1e>
 8002a28:	08005418 	.word	0x08005418
 8002a2c:	08005418 	.word	0x08005418
 8002a30:	08005418 	.word	0x08005418
 8002a34:	0800541c 	.word	0x0800541c

08002a38 <memset>:
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4402      	add	r2, r0
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d100      	bne.n	8002a42 <memset+0xa>
 8002a40:	4770      	bx	lr
 8002a42:	f803 1b01 	strb.w	r1, [r3], #1
 8002a46:	e7f9      	b.n	8002a3c <memset+0x4>

08002a48 <__cvt>:
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a4e:	461e      	mov	r6, r3
 8002a50:	bfbb      	ittet	lt
 8002a52:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002a56:	461e      	movlt	r6, r3
 8002a58:	2300      	movge	r3, #0
 8002a5a:	232d      	movlt	r3, #45	; 0x2d
 8002a5c:	b088      	sub	sp, #32
 8002a5e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002a60:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002a62:	f027 0720 	bic.w	r7, r7, #32
 8002a66:	2f46      	cmp	r7, #70	; 0x46
 8002a68:	4614      	mov	r4, r2
 8002a6a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002a6c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002a70:	700b      	strb	r3, [r1, #0]
 8002a72:	d004      	beq.n	8002a7e <__cvt+0x36>
 8002a74:	2f45      	cmp	r7, #69	; 0x45
 8002a76:	d100      	bne.n	8002a7a <__cvt+0x32>
 8002a78:	3501      	adds	r5, #1
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e000      	b.n	8002a80 <__cvt+0x38>
 8002a7e:	2303      	movs	r3, #3
 8002a80:	aa07      	add	r2, sp, #28
 8002a82:	9204      	str	r2, [sp, #16]
 8002a84:	aa06      	add	r2, sp, #24
 8002a86:	9203      	str	r2, [sp, #12]
 8002a88:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8002a8c:	4622      	mov	r2, r4
 8002a8e:	4633      	mov	r3, r6
 8002a90:	f000 fce2 	bl	8003458 <_dtoa_r>
 8002a94:	2f47      	cmp	r7, #71	; 0x47
 8002a96:	4680      	mov	r8, r0
 8002a98:	d102      	bne.n	8002aa0 <__cvt+0x58>
 8002a9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a9c:	07db      	lsls	r3, r3, #31
 8002a9e:	d526      	bpl.n	8002aee <__cvt+0xa6>
 8002aa0:	2f46      	cmp	r7, #70	; 0x46
 8002aa2:	eb08 0905 	add.w	r9, r8, r5
 8002aa6:	d111      	bne.n	8002acc <__cvt+0x84>
 8002aa8:	f898 3000 	ldrb.w	r3, [r8]
 8002aac:	2b30      	cmp	r3, #48	; 0x30
 8002aae:	d10a      	bne.n	8002ac6 <__cvt+0x7e>
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	4631      	mov	r1, r6
 8002ab8:	f7fd ffde 	bl	8000a78 <__aeabi_dcmpeq>
 8002abc:	b918      	cbnz	r0, 8002ac6 <__cvt+0x7e>
 8002abe:	f1c5 0501 	rsb	r5, r5, #1
 8002ac2:	f8ca 5000 	str.w	r5, [sl]
 8002ac6:	f8da 3000 	ldr.w	r3, [sl]
 8002aca:	4499      	add	r9, r3
 8002acc:	2200      	movs	r2, #0
 8002ace:	2300      	movs	r3, #0
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	4631      	mov	r1, r6
 8002ad4:	f7fd ffd0 	bl	8000a78 <__aeabi_dcmpeq>
 8002ad8:	b938      	cbnz	r0, 8002aea <__cvt+0xa2>
 8002ada:	2230      	movs	r2, #48	; 0x30
 8002adc:	9b07      	ldr	r3, [sp, #28]
 8002ade:	4599      	cmp	r9, r3
 8002ae0:	d905      	bls.n	8002aee <__cvt+0xa6>
 8002ae2:	1c59      	adds	r1, r3, #1
 8002ae4:	9107      	str	r1, [sp, #28]
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e7f8      	b.n	8002adc <__cvt+0x94>
 8002aea:	f8cd 901c 	str.w	r9, [sp, #28]
 8002aee:	4640      	mov	r0, r8
 8002af0:	9b07      	ldr	r3, [sp, #28]
 8002af2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002af4:	eba3 0308 	sub.w	r3, r3, r8
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	b008      	add	sp, #32
 8002afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002b00 <__exponent>:
 8002b00:	4603      	mov	r3, r0
 8002b02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b04:	2900      	cmp	r1, #0
 8002b06:	f803 2b02 	strb.w	r2, [r3], #2
 8002b0a:	bfb6      	itet	lt
 8002b0c:	222d      	movlt	r2, #45	; 0x2d
 8002b0e:	222b      	movge	r2, #43	; 0x2b
 8002b10:	4249      	neglt	r1, r1
 8002b12:	2909      	cmp	r1, #9
 8002b14:	7042      	strb	r2, [r0, #1]
 8002b16:	dd21      	ble.n	8002b5c <__exponent+0x5c>
 8002b18:	f10d 0207 	add.w	r2, sp, #7
 8002b1c:	4617      	mov	r7, r2
 8002b1e:	260a      	movs	r6, #10
 8002b20:	fb91 f5f6 	sdiv	r5, r1, r6
 8002b24:	fb06 1115 	mls	r1, r6, r5, r1
 8002b28:	2d09      	cmp	r5, #9
 8002b2a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002b2e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002b32:	f102 34ff 	add.w	r4, r2, #4294967295
 8002b36:	4629      	mov	r1, r5
 8002b38:	dc09      	bgt.n	8002b4e <__exponent+0x4e>
 8002b3a:	3130      	adds	r1, #48	; 0x30
 8002b3c:	3a02      	subs	r2, #2
 8002b3e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002b42:	42ba      	cmp	r2, r7
 8002b44:	461c      	mov	r4, r3
 8002b46:	d304      	bcc.n	8002b52 <__exponent+0x52>
 8002b48:	1a20      	subs	r0, r4, r0
 8002b4a:	b003      	add	sp, #12
 8002b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b4e:	4622      	mov	r2, r4
 8002b50:	e7e6      	b.n	8002b20 <__exponent+0x20>
 8002b52:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002b56:	f803 1b01 	strb.w	r1, [r3], #1
 8002b5a:	e7f2      	b.n	8002b42 <__exponent+0x42>
 8002b5c:	2230      	movs	r2, #48	; 0x30
 8002b5e:	461c      	mov	r4, r3
 8002b60:	4411      	add	r1, r2
 8002b62:	f804 2b02 	strb.w	r2, [r4], #2
 8002b66:	7059      	strb	r1, [r3, #1]
 8002b68:	e7ee      	b.n	8002b48 <__exponent+0x48>
	...

08002b6c <_printf_float>:
 8002b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b70:	b091      	sub	sp, #68	; 0x44
 8002b72:	460c      	mov	r4, r1
 8002b74:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002b76:	4693      	mov	fp, r2
 8002b78:	461e      	mov	r6, r3
 8002b7a:	4605      	mov	r5, r0
 8002b7c:	f001 fb0a 	bl	8004194 <_localeconv_r>
 8002b80:	6803      	ldr	r3, [r0, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	9309      	str	r3, [sp, #36]	; 0x24
 8002b86:	f7fd fb4f 	bl	8000228 <strlen>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	930e      	str	r3, [sp, #56]	; 0x38
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	900a      	str	r0, [sp, #40]	; 0x28
 8002b92:	3307      	adds	r3, #7
 8002b94:	f023 0307 	bic.w	r3, r3, #7
 8002b98:	f103 0208 	add.w	r2, r3, #8
 8002b9c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002ba0:	f8d4 a000 	ldr.w	sl, [r4]
 8002ba4:	603a      	str	r2, [r7, #0]
 8002ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002baa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002bae:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 8002bb2:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8002bb4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002bb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002bba:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbe:	4ba6      	ldr	r3, [pc, #664]	; (8002e58 <_printf_float+0x2ec>)
 8002bc0:	4638      	mov	r0, r7
 8002bc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002bc4:	f7fd ff8a 	bl	8000adc <__aeabi_dcmpun>
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	f040 81f7 	bne.w	8002fbc <_printf_float+0x450>
 8002bce:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd2:	4ba1      	ldr	r3, [pc, #644]	; (8002e58 <_printf_float+0x2ec>)
 8002bd4:	4638      	mov	r0, r7
 8002bd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002bd8:	f7fd ff62 	bl	8000aa0 <__aeabi_dcmple>
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	f040 81ed 	bne.w	8002fbc <_printf_float+0x450>
 8002be2:	2200      	movs	r2, #0
 8002be4:	2300      	movs	r3, #0
 8002be6:	4638      	mov	r0, r7
 8002be8:	4649      	mov	r1, r9
 8002bea:	f7fd ff4f 	bl	8000a8c <__aeabi_dcmplt>
 8002bee:	b110      	cbz	r0, 8002bf6 <_printf_float+0x8a>
 8002bf0:	232d      	movs	r3, #45	; 0x2d
 8002bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bf6:	4b99      	ldr	r3, [pc, #612]	; (8002e5c <_printf_float+0x2f0>)
 8002bf8:	4f99      	ldr	r7, [pc, #612]	; (8002e60 <_printf_float+0x2f4>)
 8002bfa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002bfe:	bf98      	it	ls
 8002c00:	461f      	movls	r7, r3
 8002c02:	2303      	movs	r3, #3
 8002c04:	f04f 0900 	mov.w	r9, #0
 8002c08:	6123      	str	r3, [r4, #16]
 8002c0a:	f02a 0304 	bic.w	r3, sl, #4
 8002c0e:	6023      	str	r3, [r4, #0]
 8002c10:	9600      	str	r6, [sp, #0]
 8002c12:	465b      	mov	r3, fp
 8002c14:	aa0f      	add	r2, sp, #60	; 0x3c
 8002c16:	4621      	mov	r1, r4
 8002c18:	4628      	mov	r0, r5
 8002c1a:	f000 f9df 	bl	8002fdc <_printf_common>
 8002c1e:	3001      	adds	r0, #1
 8002c20:	f040 809a 	bne.w	8002d58 <_printf_float+0x1ec>
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295
 8002c28:	b011      	add	sp, #68	; 0x44
 8002c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c2e:	6862      	ldr	r2, [r4, #4]
 8002c30:	a80e      	add	r0, sp, #56	; 0x38
 8002c32:	1c53      	adds	r3, r2, #1
 8002c34:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 8002c38:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 8002c3c:	d141      	bne.n	8002cc2 <_printf_float+0x156>
 8002c3e:	2206      	movs	r2, #6
 8002c40:	6062      	str	r2, [r4, #4]
 8002c42:	2100      	movs	r1, #0
 8002c44:	6023      	str	r3, [r4, #0]
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	6863      	ldr	r3, [r4, #4]
 8002c4a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002c4e:	9005      	str	r0, [sp, #20]
 8002c50:	9202      	str	r2, [sp, #8]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	463a      	mov	r2, r7
 8002c56:	464b      	mov	r3, r9
 8002c58:	9106      	str	r1, [sp, #24]
 8002c5a:	f8cd 8010 	str.w	r8, [sp, #16]
 8002c5e:	f8cd e00c 	str.w	lr, [sp, #12]
 8002c62:	4628      	mov	r0, r5
 8002c64:	f7ff fef0 	bl	8002a48 <__cvt>
 8002c68:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002c6c:	2b47      	cmp	r3, #71	; 0x47
 8002c6e:	4607      	mov	r7, r0
 8002c70:	d109      	bne.n	8002c86 <_printf_float+0x11a>
 8002c72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c74:	1cd8      	adds	r0, r3, #3
 8002c76:	db02      	blt.n	8002c7e <_printf_float+0x112>
 8002c78:	6862      	ldr	r2, [r4, #4]
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	dd59      	ble.n	8002d32 <_printf_float+0x1c6>
 8002c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8002c82:	fa5f f888 	uxtb.w	r8, r8
 8002c86:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002c8a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002c8c:	d836      	bhi.n	8002cfc <_printf_float+0x190>
 8002c8e:	3901      	subs	r1, #1
 8002c90:	4642      	mov	r2, r8
 8002c92:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002c96:	910d      	str	r1, [sp, #52]	; 0x34
 8002c98:	f7ff ff32 	bl	8002b00 <__exponent>
 8002c9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c9e:	4681      	mov	r9, r0
 8002ca0:	1883      	adds	r3, r0, r2
 8002ca2:	2a01      	cmp	r2, #1
 8002ca4:	6123      	str	r3, [r4, #16]
 8002ca6:	dc02      	bgt.n	8002cae <_printf_float+0x142>
 8002ca8:	6822      	ldr	r2, [r4, #0]
 8002caa:	07d1      	lsls	r1, r2, #31
 8002cac:	d501      	bpl.n	8002cb2 <_printf_float+0x146>
 8002cae:	3301      	adds	r3, #1
 8002cb0:	6123      	str	r3, [r4, #16]
 8002cb2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0aa      	beq.n	8002c10 <_printf_float+0xa4>
 8002cba:	232d      	movs	r3, #45	; 0x2d
 8002cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cc0:	e7a6      	b.n	8002c10 <_printf_float+0xa4>
 8002cc2:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002cc6:	d002      	beq.n	8002cce <_printf_float+0x162>
 8002cc8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002ccc:	d1b9      	bne.n	8002c42 <_printf_float+0xd6>
 8002cce:	b19a      	cbz	r2, 8002cf8 <_printf_float+0x18c>
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	9106      	str	r1, [sp, #24]
 8002cd4:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002cd8:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002cdc:	6023      	str	r3, [r4, #0]
 8002cde:	9005      	str	r0, [sp, #20]
 8002ce0:	463a      	mov	r2, r7
 8002ce2:	f8cd 8010 	str.w	r8, [sp, #16]
 8002ce6:	f8cd e00c 	str.w	lr, [sp, #12]
 8002cea:	9102      	str	r1, [sp, #8]
 8002cec:	464b      	mov	r3, r9
 8002cee:	4628      	mov	r0, r5
 8002cf0:	f7ff feaa 	bl	8002a48 <__cvt>
 8002cf4:	4607      	mov	r7, r0
 8002cf6:	e7bc      	b.n	8002c72 <_printf_float+0x106>
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	e7a1      	b.n	8002c40 <_printf_float+0xd4>
 8002cfc:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002d00:	d119      	bne.n	8002d36 <_printf_float+0x1ca>
 8002d02:	2900      	cmp	r1, #0
 8002d04:	6863      	ldr	r3, [r4, #4]
 8002d06:	dd0c      	ble.n	8002d22 <_printf_float+0x1b6>
 8002d08:	6121      	str	r1, [r4, #16]
 8002d0a:	b913      	cbnz	r3, 8002d12 <_printf_float+0x1a6>
 8002d0c:	6822      	ldr	r2, [r4, #0]
 8002d0e:	07d2      	lsls	r2, r2, #31
 8002d10:	d502      	bpl.n	8002d18 <_printf_float+0x1ac>
 8002d12:	3301      	adds	r3, #1
 8002d14:	440b      	add	r3, r1
 8002d16:	6123      	str	r3, [r4, #16]
 8002d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d1a:	f04f 0900 	mov.w	r9, #0
 8002d1e:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d20:	e7c7      	b.n	8002cb2 <_printf_float+0x146>
 8002d22:	b913      	cbnz	r3, 8002d2a <_printf_float+0x1be>
 8002d24:	6822      	ldr	r2, [r4, #0]
 8002d26:	07d0      	lsls	r0, r2, #31
 8002d28:	d501      	bpl.n	8002d2e <_printf_float+0x1c2>
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	e7f3      	b.n	8002d16 <_printf_float+0x1aa>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e7f1      	b.n	8002d16 <_printf_float+0x1aa>
 8002d32:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	db05      	blt.n	8002d4a <_printf_float+0x1de>
 8002d3e:	6822      	ldr	r2, [r4, #0]
 8002d40:	6123      	str	r3, [r4, #16]
 8002d42:	07d1      	lsls	r1, r2, #31
 8002d44:	d5e8      	bpl.n	8002d18 <_printf_float+0x1ac>
 8002d46:	3301      	adds	r3, #1
 8002d48:	e7e5      	b.n	8002d16 <_printf_float+0x1aa>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	bfcc      	ite	gt
 8002d4e:	2301      	movgt	r3, #1
 8002d50:	f1c3 0302 	rsble	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	e7de      	b.n	8002d16 <_printf_float+0x1aa>
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	055a      	lsls	r2, r3, #21
 8002d5c:	d407      	bmi.n	8002d6e <_printf_float+0x202>
 8002d5e:	6923      	ldr	r3, [r4, #16]
 8002d60:	463a      	mov	r2, r7
 8002d62:	4659      	mov	r1, fp
 8002d64:	4628      	mov	r0, r5
 8002d66:	47b0      	blx	r6
 8002d68:	3001      	adds	r0, #1
 8002d6a:	d12a      	bne.n	8002dc2 <_printf_float+0x256>
 8002d6c:	e75a      	b.n	8002c24 <_printf_float+0xb8>
 8002d6e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002d72:	f240 80dc 	bls.w	8002f2e <_printf_float+0x3c2>
 8002d76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f7fd fe7b 	bl	8000a78 <__aeabi_dcmpeq>
 8002d82:	2800      	cmp	r0, #0
 8002d84:	d039      	beq.n	8002dfa <_printf_float+0x28e>
 8002d86:	2301      	movs	r3, #1
 8002d88:	4a36      	ldr	r2, [pc, #216]	; (8002e64 <_printf_float+0x2f8>)
 8002d8a:	4659      	mov	r1, fp
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	47b0      	blx	r6
 8002d90:	3001      	adds	r0, #1
 8002d92:	f43f af47 	beq.w	8002c24 <_printf_float+0xb8>
 8002d96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	db02      	blt.n	8002da4 <_printf_float+0x238>
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	07d8      	lsls	r0, r3, #31
 8002da2:	d50e      	bpl.n	8002dc2 <_printf_float+0x256>
 8002da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002da8:	4659      	mov	r1, fp
 8002daa:	4628      	mov	r0, r5
 8002dac:	47b0      	blx	r6
 8002dae:	3001      	adds	r0, #1
 8002db0:	f43f af38 	beq.w	8002c24 <_printf_float+0xb8>
 8002db4:	2700      	movs	r7, #0
 8002db6:	f104 081a 	add.w	r8, r4, #26
 8002dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	429f      	cmp	r7, r3
 8002dc0:	db11      	blt.n	8002de6 <_printf_float+0x27a>
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	079f      	lsls	r7, r3, #30
 8002dc6:	d508      	bpl.n	8002dda <_printf_float+0x26e>
 8002dc8:	2700      	movs	r7, #0
 8002dca:	f104 0819 	add.w	r8, r4, #25
 8002dce:	68e3      	ldr	r3, [r4, #12]
 8002dd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	429f      	cmp	r7, r3
 8002dd6:	f2c0 80e7 	blt.w	8002fa8 <_printf_float+0x43c>
 8002dda:	68e0      	ldr	r0, [r4, #12]
 8002ddc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002dde:	4298      	cmp	r0, r3
 8002de0:	bfb8      	it	lt
 8002de2:	4618      	movlt	r0, r3
 8002de4:	e720      	b.n	8002c28 <_printf_float+0xbc>
 8002de6:	2301      	movs	r3, #1
 8002de8:	4642      	mov	r2, r8
 8002dea:	4659      	mov	r1, fp
 8002dec:	4628      	mov	r0, r5
 8002dee:	47b0      	blx	r6
 8002df0:	3001      	adds	r0, #1
 8002df2:	f43f af17 	beq.w	8002c24 <_printf_float+0xb8>
 8002df6:	3701      	adds	r7, #1
 8002df8:	e7df      	b.n	8002dba <_printf_float+0x24e>
 8002dfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	dc33      	bgt.n	8002e68 <_printf_float+0x2fc>
 8002e00:	2301      	movs	r3, #1
 8002e02:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <_printf_float+0x2f8>)
 8002e04:	4659      	mov	r1, fp
 8002e06:	4628      	mov	r0, r5
 8002e08:	47b0      	blx	r6
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	f43f af0a 	beq.w	8002c24 <_printf_float+0xb8>
 8002e10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e12:	b923      	cbnz	r3, 8002e1e <_printf_float+0x2b2>
 8002e14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e16:	b913      	cbnz	r3, 8002e1e <_printf_float+0x2b2>
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	07d9      	lsls	r1, r3, #31
 8002e1c:	d5d1      	bpl.n	8002dc2 <_printf_float+0x256>
 8002e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e22:	4659      	mov	r1, fp
 8002e24:	4628      	mov	r0, r5
 8002e26:	47b0      	blx	r6
 8002e28:	3001      	adds	r0, #1
 8002e2a:	f43f aefb 	beq.w	8002c24 <_printf_float+0xb8>
 8002e2e:	f04f 0800 	mov.w	r8, #0
 8002e32:	f104 091a 	add.w	r9, r4, #26
 8002e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e38:	425b      	negs	r3, r3
 8002e3a:	4598      	cmp	r8, r3
 8002e3c:	db01      	blt.n	8002e42 <_printf_float+0x2d6>
 8002e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e40:	e78e      	b.n	8002d60 <_printf_float+0x1f4>
 8002e42:	2301      	movs	r3, #1
 8002e44:	464a      	mov	r2, r9
 8002e46:	4659      	mov	r1, fp
 8002e48:	4628      	mov	r0, r5
 8002e4a:	47b0      	blx	r6
 8002e4c:	3001      	adds	r0, #1
 8002e4e:	f43f aee9 	beq.w	8002c24 <_printf_float+0xb8>
 8002e52:	f108 0801 	add.w	r8, r8, #1
 8002e56:	e7ee      	b.n	8002e36 <_printf_float+0x2ca>
 8002e58:	7fefffff 	.word	0x7fefffff
 8002e5c:	08005158 	.word	0x08005158
 8002e60:	0800515c 	.word	0x0800515c
 8002e64:	08005168 	.word	0x08005168
 8002e68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	bfa8      	it	ge
 8002e70:	461a      	movge	r2, r3
 8002e72:	2a00      	cmp	r2, #0
 8002e74:	4690      	mov	r8, r2
 8002e76:	dc36      	bgt.n	8002ee6 <_printf_float+0x37a>
 8002e78:	f04f 0a00 	mov.w	sl, #0
 8002e7c:	f104 031a 	add.w	r3, r4, #26
 8002e80:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002e84:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e86:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002e8a:	eba9 0308 	sub.w	r3, r9, r8
 8002e8e:	459a      	cmp	sl, r3
 8002e90:	db31      	blt.n	8002ef6 <_printf_float+0x38a>
 8002e92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002e96:	429a      	cmp	r2, r3
 8002e98:	db38      	blt.n	8002f0c <_printf_float+0x3a0>
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	07da      	lsls	r2, r3, #31
 8002e9e:	d435      	bmi.n	8002f0c <_printf_float+0x3a0>
 8002ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ea2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002ea4:	eba3 0209 	sub.w	r2, r3, r9
 8002ea8:	eba3 0801 	sub.w	r8, r3, r1
 8002eac:	4590      	cmp	r8, r2
 8002eae:	bfa8      	it	ge
 8002eb0:	4690      	movge	r8, r2
 8002eb2:	f1b8 0f00 	cmp.w	r8, #0
 8002eb6:	dc31      	bgt.n	8002f1c <_printf_float+0x3b0>
 8002eb8:	2700      	movs	r7, #0
 8002eba:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002ebe:	f104 091a 	add.w	r9, r4, #26
 8002ec2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002ec4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	eba3 0308 	sub.w	r3, r3, r8
 8002ecc:	429f      	cmp	r7, r3
 8002ece:	f6bf af78 	bge.w	8002dc2 <_printf_float+0x256>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	464a      	mov	r2, r9
 8002ed6:	4659      	mov	r1, fp
 8002ed8:	4628      	mov	r0, r5
 8002eda:	47b0      	blx	r6
 8002edc:	3001      	adds	r0, #1
 8002ede:	f43f aea1 	beq.w	8002c24 <_printf_float+0xb8>
 8002ee2:	3701      	adds	r7, #1
 8002ee4:	e7ed      	b.n	8002ec2 <_printf_float+0x356>
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	4659      	mov	r1, fp
 8002eea:	463a      	mov	r2, r7
 8002eec:	4628      	mov	r0, r5
 8002eee:	47b0      	blx	r6
 8002ef0:	3001      	adds	r0, #1
 8002ef2:	d1c1      	bne.n	8002e78 <_printf_float+0x30c>
 8002ef4:	e696      	b.n	8002c24 <_printf_float+0xb8>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002efa:	4659      	mov	r1, fp
 8002efc:	4628      	mov	r0, r5
 8002efe:	47b0      	blx	r6
 8002f00:	3001      	adds	r0, #1
 8002f02:	f43f ae8f 	beq.w	8002c24 <_printf_float+0xb8>
 8002f06:	f10a 0a01 	add.w	sl, sl, #1
 8002f0a:	e7bc      	b.n	8002e86 <_printf_float+0x31a>
 8002f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f10:	4659      	mov	r1, fp
 8002f12:	4628      	mov	r0, r5
 8002f14:	47b0      	blx	r6
 8002f16:	3001      	adds	r0, #1
 8002f18:	d1c2      	bne.n	8002ea0 <_printf_float+0x334>
 8002f1a:	e683      	b.n	8002c24 <_printf_float+0xb8>
 8002f1c:	4643      	mov	r3, r8
 8002f1e:	eb07 0209 	add.w	r2, r7, r9
 8002f22:	4659      	mov	r1, fp
 8002f24:	4628      	mov	r0, r5
 8002f26:	47b0      	blx	r6
 8002f28:	3001      	adds	r0, #1
 8002f2a:	d1c5      	bne.n	8002eb8 <_printf_float+0x34c>
 8002f2c:	e67a      	b.n	8002c24 <_printf_float+0xb8>
 8002f2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f30:	2a01      	cmp	r2, #1
 8002f32:	dc01      	bgt.n	8002f38 <_printf_float+0x3cc>
 8002f34:	07db      	lsls	r3, r3, #31
 8002f36:	d534      	bpl.n	8002fa2 <_printf_float+0x436>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	463a      	mov	r2, r7
 8002f3c:	4659      	mov	r1, fp
 8002f3e:	4628      	mov	r0, r5
 8002f40:	47b0      	blx	r6
 8002f42:	3001      	adds	r0, #1
 8002f44:	f43f ae6e 	beq.w	8002c24 <_printf_float+0xb8>
 8002f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f4c:	4659      	mov	r1, fp
 8002f4e:	4628      	mov	r0, r5
 8002f50:	47b0      	blx	r6
 8002f52:	3001      	adds	r0, #1
 8002f54:	f43f ae66 	beq.w	8002c24 <_printf_float+0xb8>
 8002f58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f7fd fd8a 	bl	8000a78 <__aeabi_dcmpeq>
 8002f64:	b150      	cbz	r0, 8002f7c <_printf_float+0x410>
 8002f66:	2700      	movs	r7, #0
 8002f68:	f104 081a 	add.w	r8, r4, #26
 8002f6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	429f      	cmp	r7, r3
 8002f72:	db0c      	blt.n	8002f8e <_printf_float+0x422>
 8002f74:	464b      	mov	r3, r9
 8002f76:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002f7a:	e6f2      	b.n	8002d62 <_printf_float+0x1f6>
 8002f7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f7e:	1c7a      	adds	r2, r7, #1
 8002f80:	3b01      	subs	r3, #1
 8002f82:	4659      	mov	r1, fp
 8002f84:	4628      	mov	r0, r5
 8002f86:	47b0      	blx	r6
 8002f88:	3001      	adds	r0, #1
 8002f8a:	d1f3      	bne.n	8002f74 <_printf_float+0x408>
 8002f8c:	e64a      	b.n	8002c24 <_printf_float+0xb8>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	4642      	mov	r2, r8
 8002f92:	4659      	mov	r1, fp
 8002f94:	4628      	mov	r0, r5
 8002f96:	47b0      	blx	r6
 8002f98:	3001      	adds	r0, #1
 8002f9a:	f43f ae43 	beq.w	8002c24 <_printf_float+0xb8>
 8002f9e:	3701      	adds	r7, #1
 8002fa0:	e7e4      	b.n	8002f6c <_printf_float+0x400>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	463a      	mov	r2, r7
 8002fa6:	e7ec      	b.n	8002f82 <_printf_float+0x416>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	4642      	mov	r2, r8
 8002fac:	4659      	mov	r1, fp
 8002fae:	4628      	mov	r0, r5
 8002fb0:	47b0      	blx	r6
 8002fb2:	3001      	adds	r0, #1
 8002fb4:	f43f ae36 	beq.w	8002c24 <_printf_float+0xb8>
 8002fb8:	3701      	adds	r7, #1
 8002fba:	e708      	b.n	8002dce <_printf_float+0x262>
 8002fbc:	463a      	mov	r2, r7
 8002fbe:	464b      	mov	r3, r9
 8002fc0:	4638      	mov	r0, r7
 8002fc2:	4649      	mov	r1, r9
 8002fc4:	f7fd fd8a 	bl	8000adc <__aeabi_dcmpun>
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	f43f ae30 	beq.w	8002c2e <_printf_float+0xc2>
 8002fce:	4b01      	ldr	r3, [pc, #4]	; (8002fd4 <_printf_float+0x468>)
 8002fd0:	4f01      	ldr	r7, [pc, #4]	; (8002fd8 <_printf_float+0x46c>)
 8002fd2:	e612      	b.n	8002bfa <_printf_float+0x8e>
 8002fd4:	08005160 	.word	0x08005160
 8002fd8:	08005164 	.word	0x08005164

08002fdc <_printf_common>:
 8002fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fe0:	4691      	mov	r9, r2
 8002fe2:	461f      	mov	r7, r3
 8002fe4:	688a      	ldr	r2, [r1, #8]
 8002fe6:	690b      	ldr	r3, [r1, #16]
 8002fe8:	4606      	mov	r6, r0
 8002fea:	4293      	cmp	r3, r2
 8002fec:	bfb8      	it	lt
 8002fee:	4613      	movlt	r3, r2
 8002ff0:	f8c9 3000 	str.w	r3, [r9]
 8002ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ff8:	460c      	mov	r4, r1
 8002ffa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ffe:	b112      	cbz	r2, 8003006 <_printf_common+0x2a>
 8003000:	3301      	adds	r3, #1
 8003002:	f8c9 3000 	str.w	r3, [r9]
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	0699      	lsls	r1, r3, #26
 800300a:	bf42      	ittt	mi
 800300c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003010:	3302      	addmi	r3, #2
 8003012:	f8c9 3000 	strmi.w	r3, [r9]
 8003016:	6825      	ldr	r5, [r4, #0]
 8003018:	f015 0506 	ands.w	r5, r5, #6
 800301c:	d107      	bne.n	800302e <_printf_common+0x52>
 800301e:	f104 0a19 	add.w	sl, r4, #25
 8003022:	68e3      	ldr	r3, [r4, #12]
 8003024:	f8d9 2000 	ldr.w	r2, [r9]
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	429d      	cmp	r5, r3
 800302c:	db2a      	blt.n	8003084 <_printf_common+0xa8>
 800302e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003032:	6822      	ldr	r2, [r4, #0]
 8003034:	3300      	adds	r3, #0
 8003036:	bf18      	it	ne
 8003038:	2301      	movne	r3, #1
 800303a:	0692      	lsls	r2, r2, #26
 800303c:	d42f      	bmi.n	800309e <_printf_common+0xc2>
 800303e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003042:	4639      	mov	r1, r7
 8003044:	4630      	mov	r0, r6
 8003046:	47c0      	blx	r8
 8003048:	3001      	adds	r0, #1
 800304a:	d022      	beq.n	8003092 <_printf_common+0xb6>
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	68e5      	ldr	r5, [r4, #12]
 8003050:	f003 0306 	and.w	r3, r3, #6
 8003054:	2b04      	cmp	r3, #4
 8003056:	bf18      	it	ne
 8003058:	2500      	movne	r5, #0
 800305a:	f8d9 2000 	ldr.w	r2, [r9]
 800305e:	f04f 0900 	mov.w	r9, #0
 8003062:	bf08      	it	eq
 8003064:	1aad      	subeq	r5, r5, r2
 8003066:	68a3      	ldr	r3, [r4, #8]
 8003068:	6922      	ldr	r2, [r4, #16]
 800306a:	bf08      	it	eq
 800306c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003070:	4293      	cmp	r3, r2
 8003072:	bfc4      	itt	gt
 8003074:	1a9b      	subgt	r3, r3, r2
 8003076:	18ed      	addgt	r5, r5, r3
 8003078:	341a      	adds	r4, #26
 800307a:	454d      	cmp	r5, r9
 800307c:	d11b      	bne.n	80030b6 <_printf_common+0xda>
 800307e:	2000      	movs	r0, #0
 8003080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003084:	2301      	movs	r3, #1
 8003086:	4652      	mov	r2, sl
 8003088:	4639      	mov	r1, r7
 800308a:	4630      	mov	r0, r6
 800308c:	47c0      	blx	r8
 800308e:	3001      	adds	r0, #1
 8003090:	d103      	bne.n	800309a <_printf_common+0xbe>
 8003092:	f04f 30ff 	mov.w	r0, #4294967295
 8003096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800309a:	3501      	adds	r5, #1
 800309c:	e7c1      	b.n	8003022 <_printf_common+0x46>
 800309e:	2030      	movs	r0, #48	; 0x30
 80030a0:	18e1      	adds	r1, r4, r3
 80030a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030ac:	4422      	add	r2, r4
 80030ae:	3302      	adds	r3, #2
 80030b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030b4:	e7c3      	b.n	800303e <_printf_common+0x62>
 80030b6:	2301      	movs	r3, #1
 80030b8:	4622      	mov	r2, r4
 80030ba:	4639      	mov	r1, r7
 80030bc:	4630      	mov	r0, r6
 80030be:	47c0      	blx	r8
 80030c0:	3001      	adds	r0, #1
 80030c2:	d0e6      	beq.n	8003092 <_printf_common+0xb6>
 80030c4:	f109 0901 	add.w	r9, r9, #1
 80030c8:	e7d7      	b.n	800307a <_printf_common+0x9e>
	...

080030cc <_printf_i>:
 80030cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030d0:	4617      	mov	r7, r2
 80030d2:	7e0a      	ldrb	r2, [r1, #24]
 80030d4:	b085      	sub	sp, #20
 80030d6:	2a6e      	cmp	r2, #110	; 0x6e
 80030d8:	4698      	mov	r8, r3
 80030da:	4606      	mov	r6, r0
 80030dc:	460c      	mov	r4, r1
 80030de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030e0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80030e4:	f000 80bc 	beq.w	8003260 <_printf_i+0x194>
 80030e8:	d81a      	bhi.n	8003120 <_printf_i+0x54>
 80030ea:	2a63      	cmp	r2, #99	; 0x63
 80030ec:	d02e      	beq.n	800314c <_printf_i+0x80>
 80030ee:	d80a      	bhi.n	8003106 <_printf_i+0x3a>
 80030f0:	2a00      	cmp	r2, #0
 80030f2:	f000 80c8 	beq.w	8003286 <_printf_i+0x1ba>
 80030f6:	2a58      	cmp	r2, #88	; 0x58
 80030f8:	f000 808a 	beq.w	8003210 <_printf_i+0x144>
 80030fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003100:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003104:	e02a      	b.n	800315c <_printf_i+0x90>
 8003106:	2a64      	cmp	r2, #100	; 0x64
 8003108:	d001      	beq.n	800310e <_printf_i+0x42>
 800310a:	2a69      	cmp	r2, #105	; 0x69
 800310c:	d1f6      	bne.n	80030fc <_printf_i+0x30>
 800310e:	6821      	ldr	r1, [r4, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003116:	d023      	beq.n	8003160 <_printf_i+0x94>
 8003118:	1d11      	adds	r1, r2, #4
 800311a:	6019      	str	r1, [r3, #0]
 800311c:	6813      	ldr	r3, [r2, #0]
 800311e:	e027      	b.n	8003170 <_printf_i+0xa4>
 8003120:	2a73      	cmp	r2, #115	; 0x73
 8003122:	f000 80b4 	beq.w	800328e <_printf_i+0x1c2>
 8003126:	d808      	bhi.n	800313a <_printf_i+0x6e>
 8003128:	2a6f      	cmp	r2, #111	; 0x6f
 800312a:	d02a      	beq.n	8003182 <_printf_i+0xb6>
 800312c:	2a70      	cmp	r2, #112	; 0x70
 800312e:	d1e5      	bne.n	80030fc <_printf_i+0x30>
 8003130:	680a      	ldr	r2, [r1, #0]
 8003132:	f042 0220 	orr.w	r2, r2, #32
 8003136:	600a      	str	r2, [r1, #0]
 8003138:	e003      	b.n	8003142 <_printf_i+0x76>
 800313a:	2a75      	cmp	r2, #117	; 0x75
 800313c:	d021      	beq.n	8003182 <_printf_i+0xb6>
 800313e:	2a78      	cmp	r2, #120	; 0x78
 8003140:	d1dc      	bne.n	80030fc <_printf_i+0x30>
 8003142:	2278      	movs	r2, #120	; 0x78
 8003144:	496f      	ldr	r1, [pc, #444]	; (8003304 <_printf_i+0x238>)
 8003146:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800314a:	e064      	b.n	8003216 <_printf_i+0x14a>
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003152:	1d11      	adds	r1, r2, #4
 8003154:	6019      	str	r1, [r3, #0]
 8003156:	6813      	ldr	r3, [r2, #0]
 8003158:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800315c:	2301      	movs	r3, #1
 800315e:	e0a3      	b.n	80032a8 <_printf_i+0x1dc>
 8003160:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003164:	f102 0104 	add.w	r1, r2, #4
 8003168:	6019      	str	r1, [r3, #0]
 800316a:	d0d7      	beq.n	800311c <_printf_i+0x50>
 800316c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003170:	2b00      	cmp	r3, #0
 8003172:	da03      	bge.n	800317c <_printf_i+0xb0>
 8003174:	222d      	movs	r2, #45	; 0x2d
 8003176:	425b      	negs	r3, r3
 8003178:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800317c:	4962      	ldr	r1, [pc, #392]	; (8003308 <_printf_i+0x23c>)
 800317e:	220a      	movs	r2, #10
 8003180:	e017      	b.n	80031b2 <_printf_i+0xe6>
 8003182:	6820      	ldr	r0, [r4, #0]
 8003184:	6819      	ldr	r1, [r3, #0]
 8003186:	f010 0f80 	tst.w	r0, #128	; 0x80
 800318a:	d003      	beq.n	8003194 <_printf_i+0xc8>
 800318c:	1d08      	adds	r0, r1, #4
 800318e:	6018      	str	r0, [r3, #0]
 8003190:	680b      	ldr	r3, [r1, #0]
 8003192:	e006      	b.n	80031a2 <_printf_i+0xd6>
 8003194:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003198:	f101 0004 	add.w	r0, r1, #4
 800319c:	6018      	str	r0, [r3, #0]
 800319e:	d0f7      	beq.n	8003190 <_printf_i+0xc4>
 80031a0:	880b      	ldrh	r3, [r1, #0]
 80031a2:	2a6f      	cmp	r2, #111	; 0x6f
 80031a4:	bf14      	ite	ne
 80031a6:	220a      	movne	r2, #10
 80031a8:	2208      	moveq	r2, #8
 80031aa:	4957      	ldr	r1, [pc, #348]	; (8003308 <_printf_i+0x23c>)
 80031ac:	2000      	movs	r0, #0
 80031ae:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80031b2:	6865      	ldr	r5, [r4, #4]
 80031b4:	2d00      	cmp	r5, #0
 80031b6:	60a5      	str	r5, [r4, #8]
 80031b8:	f2c0 809c 	blt.w	80032f4 <_printf_i+0x228>
 80031bc:	6820      	ldr	r0, [r4, #0]
 80031be:	f020 0004 	bic.w	r0, r0, #4
 80031c2:	6020      	str	r0, [r4, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d13f      	bne.n	8003248 <_printf_i+0x17c>
 80031c8:	2d00      	cmp	r5, #0
 80031ca:	f040 8095 	bne.w	80032f8 <_printf_i+0x22c>
 80031ce:	4675      	mov	r5, lr
 80031d0:	2a08      	cmp	r2, #8
 80031d2:	d10b      	bne.n	80031ec <_printf_i+0x120>
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	07da      	lsls	r2, r3, #31
 80031d8:	d508      	bpl.n	80031ec <_printf_i+0x120>
 80031da:	6923      	ldr	r3, [r4, #16]
 80031dc:	6862      	ldr	r2, [r4, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	bfde      	ittt	le
 80031e2:	2330      	movle	r3, #48	; 0x30
 80031e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031ec:	ebae 0305 	sub.w	r3, lr, r5
 80031f0:	6123      	str	r3, [r4, #16]
 80031f2:	f8cd 8000 	str.w	r8, [sp]
 80031f6:	463b      	mov	r3, r7
 80031f8:	aa03      	add	r2, sp, #12
 80031fa:	4621      	mov	r1, r4
 80031fc:	4630      	mov	r0, r6
 80031fe:	f7ff feed 	bl	8002fdc <_printf_common>
 8003202:	3001      	adds	r0, #1
 8003204:	d155      	bne.n	80032b2 <_printf_i+0x1e6>
 8003206:	f04f 30ff 	mov.w	r0, #4294967295
 800320a:	b005      	add	sp, #20
 800320c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003210:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003214:	493c      	ldr	r1, [pc, #240]	; (8003308 <_printf_i+0x23c>)
 8003216:	6822      	ldr	r2, [r4, #0]
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800321e:	f100 0504 	add.w	r5, r0, #4
 8003222:	601d      	str	r5, [r3, #0]
 8003224:	d001      	beq.n	800322a <_printf_i+0x15e>
 8003226:	6803      	ldr	r3, [r0, #0]
 8003228:	e002      	b.n	8003230 <_printf_i+0x164>
 800322a:	0655      	lsls	r5, r2, #25
 800322c:	d5fb      	bpl.n	8003226 <_printf_i+0x15a>
 800322e:	8803      	ldrh	r3, [r0, #0]
 8003230:	07d0      	lsls	r0, r2, #31
 8003232:	bf44      	itt	mi
 8003234:	f042 0220 	orrmi.w	r2, r2, #32
 8003238:	6022      	strmi	r2, [r4, #0]
 800323a:	b91b      	cbnz	r3, 8003244 <_printf_i+0x178>
 800323c:	6822      	ldr	r2, [r4, #0]
 800323e:	f022 0220 	bic.w	r2, r2, #32
 8003242:	6022      	str	r2, [r4, #0]
 8003244:	2210      	movs	r2, #16
 8003246:	e7b1      	b.n	80031ac <_printf_i+0xe0>
 8003248:	4675      	mov	r5, lr
 800324a:	fbb3 f0f2 	udiv	r0, r3, r2
 800324e:	fb02 3310 	mls	r3, r2, r0, r3
 8003252:	5ccb      	ldrb	r3, [r1, r3]
 8003254:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003258:	4603      	mov	r3, r0
 800325a:	2800      	cmp	r0, #0
 800325c:	d1f5      	bne.n	800324a <_printf_i+0x17e>
 800325e:	e7b7      	b.n	80031d0 <_printf_i+0x104>
 8003260:	6808      	ldr	r0, [r1, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003268:	6949      	ldr	r1, [r1, #20]
 800326a:	d004      	beq.n	8003276 <_printf_i+0x1aa>
 800326c:	1d10      	adds	r0, r2, #4
 800326e:	6018      	str	r0, [r3, #0]
 8003270:	6813      	ldr	r3, [r2, #0]
 8003272:	6019      	str	r1, [r3, #0]
 8003274:	e007      	b.n	8003286 <_printf_i+0x1ba>
 8003276:	f010 0f40 	tst.w	r0, #64	; 0x40
 800327a:	f102 0004 	add.w	r0, r2, #4
 800327e:	6018      	str	r0, [r3, #0]
 8003280:	6813      	ldr	r3, [r2, #0]
 8003282:	d0f6      	beq.n	8003272 <_printf_i+0x1a6>
 8003284:	8019      	strh	r1, [r3, #0]
 8003286:	2300      	movs	r3, #0
 8003288:	4675      	mov	r5, lr
 800328a:	6123      	str	r3, [r4, #16]
 800328c:	e7b1      	b.n	80031f2 <_printf_i+0x126>
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	1d11      	adds	r1, r2, #4
 8003292:	6019      	str	r1, [r3, #0]
 8003294:	6815      	ldr	r5, [r2, #0]
 8003296:	2100      	movs	r1, #0
 8003298:	6862      	ldr	r2, [r4, #4]
 800329a:	4628      	mov	r0, r5
 800329c:	f000 ff90 	bl	80041c0 <memchr>
 80032a0:	b108      	cbz	r0, 80032a6 <_printf_i+0x1da>
 80032a2:	1b40      	subs	r0, r0, r5
 80032a4:	6060      	str	r0, [r4, #4]
 80032a6:	6863      	ldr	r3, [r4, #4]
 80032a8:	6123      	str	r3, [r4, #16]
 80032aa:	2300      	movs	r3, #0
 80032ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032b0:	e79f      	b.n	80031f2 <_printf_i+0x126>
 80032b2:	6923      	ldr	r3, [r4, #16]
 80032b4:	462a      	mov	r2, r5
 80032b6:	4639      	mov	r1, r7
 80032b8:	4630      	mov	r0, r6
 80032ba:	47c0      	blx	r8
 80032bc:	3001      	adds	r0, #1
 80032be:	d0a2      	beq.n	8003206 <_printf_i+0x13a>
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	079b      	lsls	r3, r3, #30
 80032c4:	d507      	bpl.n	80032d6 <_printf_i+0x20a>
 80032c6:	2500      	movs	r5, #0
 80032c8:	f104 0919 	add.w	r9, r4, #25
 80032cc:	68e3      	ldr	r3, [r4, #12]
 80032ce:	9a03      	ldr	r2, [sp, #12]
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	429d      	cmp	r5, r3
 80032d4:	db05      	blt.n	80032e2 <_printf_i+0x216>
 80032d6:	68e0      	ldr	r0, [r4, #12]
 80032d8:	9b03      	ldr	r3, [sp, #12]
 80032da:	4298      	cmp	r0, r3
 80032dc:	bfb8      	it	lt
 80032de:	4618      	movlt	r0, r3
 80032e0:	e793      	b.n	800320a <_printf_i+0x13e>
 80032e2:	2301      	movs	r3, #1
 80032e4:	464a      	mov	r2, r9
 80032e6:	4639      	mov	r1, r7
 80032e8:	4630      	mov	r0, r6
 80032ea:	47c0      	blx	r8
 80032ec:	3001      	adds	r0, #1
 80032ee:	d08a      	beq.n	8003206 <_printf_i+0x13a>
 80032f0:	3501      	adds	r5, #1
 80032f2:	e7eb      	b.n	80032cc <_printf_i+0x200>
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1a7      	bne.n	8003248 <_printf_i+0x17c>
 80032f8:	780b      	ldrb	r3, [r1, #0]
 80032fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003302:	e765      	b.n	80031d0 <_printf_i+0x104>
 8003304:	0800517b 	.word	0x0800517b
 8003308:	0800516a 	.word	0x0800516a

0800330c <iprintf>:
 800330c:	b40f      	push	{r0, r1, r2, r3}
 800330e:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <iprintf+0x2c>)
 8003310:	b513      	push	{r0, r1, r4, lr}
 8003312:	681c      	ldr	r4, [r3, #0]
 8003314:	b124      	cbz	r4, 8003320 <iprintf+0x14>
 8003316:	69a3      	ldr	r3, [r4, #24]
 8003318:	b913      	cbnz	r3, 8003320 <iprintf+0x14>
 800331a:	4620      	mov	r0, r4
 800331c:	f000 feb0 	bl	8004080 <__sinit>
 8003320:	ab05      	add	r3, sp, #20
 8003322:	9a04      	ldr	r2, [sp, #16]
 8003324:	68a1      	ldr	r1, [r4, #8]
 8003326:	4620      	mov	r0, r4
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	f001 fb13 	bl	8004954 <_vfiprintf_r>
 800332e:	b002      	add	sp, #8
 8003330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003334:	b004      	add	sp, #16
 8003336:	4770      	bx	lr
 8003338:	2000000c 	.word	0x2000000c

0800333c <quorem>:
 800333c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003340:	6903      	ldr	r3, [r0, #16]
 8003342:	690c      	ldr	r4, [r1, #16]
 8003344:	4680      	mov	r8, r0
 8003346:	429c      	cmp	r4, r3
 8003348:	f300 8082 	bgt.w	8003450 <quorem+0x114>
 800334c:	3c01      	subs	r4, #1
 800334e:	f101 0714 	add.w	r7, r1, #20
 8003352:	f100 0614 	add.w	r6, r0, #20
 8003356:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800335a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800335e:	3501      	adds	r5, #1
 8003360:	fbb0 f5f5 	udiv	r5, r0, r5
 8003364:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003368:	eb06 030e 	add.w	r3, r6, lr
 800336c:	eb07 090e 	add.w	r9, r7, lr
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	b38d      	cbz	r5, 80033d8 <quorem+0x9c>
 8003374:	f04f 0a00 	mov.w	sl, #0
 8003378:	4638      	mov	r0, r7
 800337a:	46b4      	mov	ip, r6
 800337c:	46d3      	mov	fp, sl
 800337e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003382:	b293      	uxth	r3, r2
 8003384:	fb05 a303 	mla	r3, r5, r3, sl
 8003388:	0c12      	lsrs	r2, r2, #16
 800338a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800338e:	fb05 a202 	mla	r2, r5, r2, sl
 8003392:	b29b      	uxth	r3, r3
 8003394:	ebab 0303 	sub.w	r3, fp, r3
 8003398:	f8bc b000 	ldrh.w	fp, [ip]
 800339c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80033a0:	445b      	add	r3, fp
 80033a2:	fa1f fb82 	uxth.w	fp, r2
 80033a6:	f8dc 2000 	ldr.w	r2, [ip]
 80033aa:	4581      	cmp	r9, r0
 80033ac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80033b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033ba:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80033be:	f84c 3b04 	str.w	r3, [ip], #4
 80033c2:	d2dc      	bcs.n	800337e <quorem+0x42>
 80033c4:	f856 300e 	ldr.w	r3, [r6, lr]
 80033c8:	b933      	cbnz	r3, 80033d8 <quorem+0x9c>
 80033ca:	9b01      	ldr	r3, [sp, #4]
 80033cc:	3b04      	subs	r3, #4
 80033ce:	429e      	cmp	r6, r3
 80033d0:	461a      	mov	r2, r3
 80033d2:	d331      	bcc.n	8003438 <quorem+0xfc>
 80033d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80033d8:	4640      	mov	r0, r8
 80033da:	f001 f912 	bl	8004602 <__mcmp>
 80033de:	2800      	cmp	r0, #0
 80033e0:	db26      	blt.n	8003430 <quorem+0xf4>
 80033e2:	4630      	mov	r0, r6
 80033e4:	f04f 0e00 	mov.w	lr, #0
 80033e8:	3501      	adds	r5, #1
 80033ea:	f857 1b04 	ldr.w	r1, [r7], #4
 80033ee:	f8d0 c000 	ldr.w	ip, [r0]
 80033f2:	b28b      	uxth	r3, r1
 80033f4:	ebae 0303 	sub.w	r3, lr, r3
 80033f8:	fa1f f28c 	uxth.w	r2, ip
 80033fc:	4413      	add	r3, r2
 80033fe:	0c0a      	lsrs	r2, r1, #16
 8003400:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003404:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003408:	b29b      	uxth	r3, r3
 800340a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800340e:	45b9      	cmp	r9, r7
 8003410:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003414:	f840 3b04 	str.w	r3, [r0], #4
 8003418:	d2e7      	bcs.n	80033ea <quorem+0xae>
 800341a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800341e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003422:	b92a      	cbnz	r2, 8003430 <quorem+0xf4>
 8003424:	3b04      	subs	r3, #4
 8003426:	429e      	cmp	r6, r3
 8003428:	461a      	mov	r2, r3
 800342a:	d30b      	bcc.n	8003444 <quorem+0x108>
 800342c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003430:	4628      	mov	r0, r5
 8003432:	b003      	add	sp, #12
 8003434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	3b04      	subs	r3, #4
 800343c:	2a00      	cmp	r2, #0
 800343e:	d1c9      	bne.n	80033d4 <quorem+0x98>
 8003440:	3c01      	subs	r4, #1
 8003442:	e7c4      	b.n	80033ce <quorem+0x92>
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	3b04      	subs	r3, #4
 8003448:	2a00      	cmp	r2, #0
 800344a:	d1ef      	bne.n	800342c <quorem+0xf0>
 800344c:	3c01      	subs	r4, #1
 800344e:	e7ea      	b.n	8003426 <quorem+0xea>
 8003450:	2000      	movs	r0, #0
 8003452:	e7ee      	b.n	8003432 <quorem+0xf6>
 8003454:	0000      	movs	r0, r0
	...

08003458 <_dtoa_r>:
 8003458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800345c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800345e:	b095      	sub	sp, #84	; 0x54
 8003460:	4604      	mov	r4, r0
 8003462:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003464:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003468:	b93e      	cbnz	r6, 800347a <_dtoa_r+0x22>
 800346a:	2010      	movs	r0, #16
 800346c:	f000 fea0 	bl	80041b0 <malloc>
 8003470:	6260      	str	r0, [r4, #36]	; 0x24
 8003472:	6046      	str	r6, [r0, #4]
 8003474:	6086      	str	r6, [r0, #8]
 8003476:	6006      	str	r6, [r0, #0]
 8003478:	60c6      	str	r6, [r0, #12]
 800347a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800347c:	6819      	ldr	r1, [r3, #0]
 800347e:	b151      	cbz	r1, 8003496 <_dtoa_r+0x3e>
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	2301      	movs	r3, #1
 8003484:	4093      	lsls	r3, r2
 8003486:	604a      	str	r2, [r1, #4]
 8003488:	608b      	str	r3, [r1, #8]
 800348a:	4620      	mov	r0, r4
 800348c:	f000 fee5 	bl	800425a <_Bfree>
 8003490:	2200      	movs	r2, #0
 8003492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	9b03      	ldr	r3, [sp, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	bfb7      	itett	lt
 800349c:	2301      	movlt	r3, #1
 800349e:	2300      	movge	r3, #0
 80034a0:	602b      	strlt	r3, [r5, #0]
 80034a2:	9b03      	ldrlt	r3, [sp, #12]
 80034a4:	bfae      	itee	ge
 80034a6:	602b      	strge	r3, [r5, #0]
 80034a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80034ac:	9303      	strlt	r3, [sp, #12]
 80034ae:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80034b2:	4bab      	ldr	r3, [pc, #684]	; (8003760 <_dtoa_r+0x308>)
 80034b4:	ea33 0309 	bics.w	r3, r3, r9
 80034b8:	d11b      	bne.n	80034f2 <_dtoa_r+0x9a>
 80034ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80034be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	9b02      	ldr	r3, [sp, #8]
 80034c4:	b923      	cbnz	r3, 80034d0 <_dtoa_r+0x78>
 80034c6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80034ca:	2800      	cmp	r0, #0
 80034cc:	f000 8583 	beq.w	8003fd6 <_dtoa_r+0xb7e>
 80034d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034d2:	b953      	cbnz	r3, 80034ea <_dtoa_r+0x92>
 80034d4:	4ba3      	ldr	r3, [pc, #652]	; (8003764 <_dtoa_r+0x30c>)
 80034d6:	e021      	b.n	800351c <_dtoa_r+0xc4>
 80034d8:	4ba3      	ldr	r3, [pc, #652]	; (8003768 <_dtoa_r+0x310>)
 80034da:	9306      	str	r3, [sp, #24]
 80034dc:	3308      	adds	r3, #8
 80034de:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	9806      	ldr	r0, [sp, #24]
 80034e4:	b015      	add	sp, #84	; 0x54
 80034e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ea:	4b9e      	ldr	r3, [pc, #632]	; (8003764 <_dtoa_r+0x30c>)
 80034ec:	9306      	str	r3, [sp, #24]
 80034ee:	3303      	adds	r3, #3
 80034f0:	e7f5      	b.n	80034de <_dtoa_r+0x86>
 80034f2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80034f6:	2200      	movs	r2, #0
 80034f8:	2300      	movs	r3, #0
 80034fa:	4630      	mov	r0, r6
 80034fc:	4639      	mov	r1, r7
 80034fe:	f7fd fabb 	bl	8000a78 <__aeabi_dcmpeq>
 8003502:	4680      	mov	r8, r0
 8003504:	b160      	cbz	r0, 8003520 <_dtoa_r+0xc8>
 8003506:	2301      	movs	r3, #1
 8003508:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 855e 	beq.w	8003fd0 <_dtoa_r+0xb78>
 8003514:	4b95      	ldr	r3, [pc, #596]	; (800376c <_dtoa_r+0x314>)
 8003516:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	3b01      	subs	r3, #1
 800351c:	9306      	str	r3, [sp, #24]
 800351e:	e7e0      	b.n	80034e2 <_dtoa_r+0x8a>
 8003520:	ab12      	add	r3, sp, #72	; 0x48
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	ab13      	add	r3, sp, #76	; 0x4c
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	4632      	mov	r2, r6
 800352a:	463b      	mov	r3, r7
 800352c:	4620      	mov	r0, r4
 800352e:	f001 f8e1 	bl	80046f4 <__d2b>
 8003532:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003536:	4682      	mov	sl, r0
 8003538:	2d00      	cmp	r5, #0
 800353a:	d07d      	beq.n	8003638 <_dtoa_r+0x1e0>
 800353c:	4630      	mov	r0, r6
 800353e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003542:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003546:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800354a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800354e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003552:	2200      	movs	r2, #0
 8003554:	4b86      	ldr	r3, [pc, #536]	; (8003770 <_dtoa_r+0x318>)
 8003556:	f7fc fe73 	bl	8000240 <__aeabi_dsub>
 800355a:	a37b      	add	r3, pc, #492	; (adr r3, 8003748 <_dtoa_r+0x2f0>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	f7fd f822 	bl	80005a8 <__aeabi_dmul>
 8003564:	a37a      	add	r3, pc, #488	; (adr r3, 8003750 <_dtoa_r+0x2f8>)
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f7fc fe6b 	bl	8000244 <__adddf3>
 800356e:	4606      	mov	r6, r0
 8003570:	4628      	mov	r0, r5
 8003572:	460f      	mov	r7, r1
 8003574:	f7fc ffb2 	bl	80004dc <__aeabi_i2d>
 8003578:	a377      	add	r3, pc, #476	; (adr r3, 8003758 <_dtoa_r+0x300>)
 800357a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357e:	f7fd f813 	bl	80005a8 <__aeabi_dmul>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4630      	mov	r0, r6
 8003588:	4639      	mov	r1, r7
 800358a:	f7fc fe5b 	bl	8000244 <__adddf3>
 800358e:	4606      	mov	r6, r0
 8003590:	460f      	mov	r7, r1
 8003592:	f7fd fab9 	bl	8000b08 <__aeabi_d2iz>
 8003596:	2200      	movs	r2, #0
 8003598:	4683      	mov	fp, r0
 800359a:	2300      	movs	r3, #0
 800359c:	4630      	mov	r0, r6
 800359e:	4639      	mov	r1, r7
 80035a0:	f7fd fa74 	bl	8000a8c <__aeabi_dcmplt>
 80035a4:	b158      	cbz	r0, 80035be <_dtoa_r+0x166>
 80035a6:	4658      	mov	r0, fp
 80035a8:	f7fc ff98 	bl	80004dc <__aeabi_i2d>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4630      	mov	r0, r6
 80035b2:	4639      	mov	r1, r7
 80035b4:	f7fd fa60 	bl	8000a78 <__aeabi_dcmpeq>
 80035b8:	b908      	cbnz	r0, 80035be <_dtoa_r+0x166>
 80035ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80035be:	f1bb 0f16 	cmp.w	fp, #22
 80035c2:	d858      	bhi.n	8003676 <_dtoa_r+0x21e>
 80035c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80035c8:	496a      	ldr	r1, [pc, #424]	; (8003774 <_dtoa_r+0x31c>)
 80035ca:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80035ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035d2:	f7fd fa79 	bl	8000ac8 <__aeabi_dcmpgt>
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d04f      	beq.n	800367a <_dtoa_r+0x222>
 80035da:	2300      	movs	r3, #0
 80035dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80035e0:	930d      	str	r3, [sp, #52]	; 0x34
 80035e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80035e4:	1b5d      	subs	r5, r3, r5
 80035e6:	1e6b      	subs	r3, r5, #1
 80035e8:	9307      	str	r3, [sp, #28]
 80035ea:	bf43      	ittte	mi
 80035ec:	2300      	movmi	r3, #0
 80035ee:	f1c5 0801 	rsbmi	r8, r5, #1
 80035f2:	9307      	strmi	r3, [sp, #28]
 80035f4:	f04f 0800 	movpl.w	r8, #0
 80035f8:	f1bb 0f00 	cmp.w	fp, #0
 80035fc:	db3f      	blt.n	800367e <_dtoa_r+0x226>
 80035fe:	9b07      	ldr	r3, [sp, #28]
 8003600:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003604:	445b      	add	r3, fp
 8003606:	9307      	str	r3, [sp, #28]
 8003608:	2300      	movs	r3, #0
 800360a:	9308      	str	r3, [sp, #32]
 800360c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800360e:	2b09      	cmp	r3, #9
 8003610:	f200 80b4 	bhi.w	800377c <_dtoa_r+0x324>
 8003614:	2b05      	cmp	r3, #5
 8003616:	bfc4      	itt	gt
 8003618:	3b04      	subgt	r3, #4
 800361a:	931e      	strgt	r3, [sp, #120]	; 0x78
 800361c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800361e:	bfc8      	it	gt
 8003620:	2600      	movgt	r6, #0
 8003622:	f1a3 0302 	sub.w	r3, r3, #2
 8003626:	bfd8      	it	le
 8003628:	2601      	movle	r6, #1
 800362a:	2b03      	cmp	r3, #3
 800362c:	f200 80b2 	bhi.w	8003794 <_dtoa_r+0x33c>
 8003630:	e8df f003 	tbb	[pc, r3]
 8003634:	782d8684 	.word	0x782d8684
 8003638:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800363a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800363c:	441d      	add	r5, r3
 800363e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003642:	2b20      	cmp	r3, #32
 8003644:	dd11      	ble.n	800366a <_dtoa_r+0x212>
 8003646:	9a02      	ldr	r2, [sp, #8]
 8003648:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800364c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003650:	fa22 f000 	lsr.w	r0, r2, r0
 8003654:	fa09 f303 	lsl.w	r3, r9, r3
 8003658:	4318      	orrs	r0, r3
 800365a:	f7fc ff2f 	bl	80004bc <__aeabi_ui2d>
 800365e:	2301      	movs	r3, #1
 8003660:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003664:	3d01      	subs	r5, #1
 8003666:	9310      	str	r3, [sp, #64]	; 0x40
 8003668:	e773      	b.n	8003552 <_dtoa_r+0xfa>
 800366a:	f1c3 0020 	rsb	r0, r3, #32
 800366e:	9b02      	ldr	r3, [sp, #8]
 8003670:	fa03 f000 	lsl.w	r0, r3, r0
 8003674:	e7f1      	b.n	800365a <_dtoa_r+0x202>
 8003676:	2301      	movs	r3, #1
 8003678:	e7b2      	b.n	80035e0 <_dtoa_r+0x188>
 800367a:	900d      	str	r0, [sp, #52]	; 0x34
 800367c:	e7b1      	b.n	80035e2 <_dtoa_r+0x18a>
 800367e:	f1cb 0300 	rsb	r3, fp, #0
 8003682:	9308      	str	r3, [sp, #32]
 8003684:	2300      	movs	r3, #0
 8003686:	eba8 080b 	sub.w	r8, r8, fp
 800368a:	930c      	str	r3, [sp, #48]	; 0x30
 800368c:	e7be      	b.n	800360c <_dtoa_r+0x1b4>
 800368e:	2301      	movs	r3, #1
 8003690:	9309      	str	r3, [sp, #36]	; 0x24
 8003692:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003694:	2b00      	cmp	r3, #0
 8003696:	f340 8080 	ble.w	800379a <_dtoa_r+0x342>
 800369a:	4699      	mov	r9, r3
 800369c:	9304      	str	r3, [sp, #16]
 800369e:	2200      	movs	r2, #0
 80036a0:	2104      	movs	r1, #4
 80036a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80036a4:	606a      	str	r2, [r5, #4]
 80036a6:	f101 0214 	add.w	r2, r1, #20
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d97a      	bls.n	80037a4 <_dtoa_r+0x34c>
 80036ae:	6869      	ldr	r1, [r5, #4]
 80036b0:	4620      	mov	r0, r4
 80036b2:	f000 fd9e 	bl	80041f2 <_Balloc>
 80036b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036b8:	6028      	str	r0, [r5, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b9 0f0e 	cmp.w	r9, #14
 80036c0:	9306      	str	r3, [sp, #24]
 80036c2:	f200 80f0 	bhi.w	80038a6 <_dtoa_r+0x44e>
 80036c6:	2e00      	cmp	r6, #0
 80036c8:	f000 80ed 	beq.w	80038a6 <_dtoa_r+0x44e>
 80036cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80036d0:	f1bb 0f00 	cmp.w	fp, #0
 80036d4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80036d8:	dd79      	ble.n	80037ce <_dtoa_r+0x376>
 80036da:	4a26      	ldr	r2, [pc, #152]	; (8003774 <_dtoa_r+0x31c>)
 80036dc:	f00b 030f 	and.w	r3, fp, #15
 80036e0:	ea4f 162b 	mov.w	r6, fp, asr #4
 80036e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80036e8:	06f0      	lsls	r0, r6, #27
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80036f2:	d55c      	bpl.n	80037ae <_dtoa_r+0x356>
 80036f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80036f8:	4b1f      	ldr	r3, [pc, #124]	; (8003778 <_dtoa_r+0x320>)
 80036fa:	2503      	movs	r5, #3
 80036fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003700:	f7fd f87c 	bl	80007fc <__aeabi_ddiv>
 8003704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003708:	f006 060f 	and.w	r6, r6, #15
 800370c:	4f1a      	ldr	r7, [pc, #104]	; (8003778 <_dtoa_r+0x320>)
 800370e:	2e00      	cmp	r6, #0
 8003710:	d14f      	bne.n	80037b2 <_dtoa_r+0x35a>
 8003712:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800371a:	f7fd f86f 	bl	80007fc <__aeabi_ddiv>
 800371e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003722:	e06e      	b.n	8003802 <_dtoa_r+0x3aa>
 8003724:	2301      	movs	r3, #1
 8003726:	9309      	str	r3, [sp, #36]	; 0x24
 8003728:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800372a:	445b      	add	r3, fp
 800372c:	f103 0901 	add.w	r9, r3, #1
 8003730:	9304      	str	r3, [sp, #16]
 8003732:	464b      	mov	r3, r9
 8003734:	2b01      	cmp	r3, #1
 8003736:	bfb8      	it	lt
 8003738:	2301      	movlt	r3, #1
 800373a:	e7b0      	b.n	800369e <_dtoa_r+0x246>
 800373c:	2300      	movs	r3, #0
 800373e:	e7a7      	b.n	8003690 <_dtoa_r+0x238>
 8003740:	2300      	movs	r3, #0
 8003742:	e7f0      	b.n	8003726 <_dtoa_r+0x2ce>
 8003744:	f3af 8000 	nop.w
 8003748:	636f4361 	.word	0x636f4361
 800374c:	3fd287a7 	.word	0x3fd287a7
 8003750:	8b60c8b3 	.word	0x8b60c8b3
 8003754:	3fc68a28 	.word	0x3fc68a28
 8003758:	509f79fb 	.word	0x509f79fb
 800375c:	3fd34413 	.word	0x3fd34413
 8003760:	7ff00000 	.word	0x7ff00000
 8003764:	08005195 	.word	0x08005195
 8003768:	0800518c 	.word	0x0800518c
 800376c:	08005169 	.word	0x08005169
 8003770:	3ff80000 	.word	0x3ff80000
 8003774:	08005228 	.word	0x08005228
 8003778:	08005200 	.word	0x08005200
 800377c:	2601      	movs	r6, #1
 800377e:	2300      	movs	r3, #0
 8003780:	9609      	str	r6, [sp, #36]	; 0x24
 8003782:	931e      	str	r3, [sp, #120]	; 0x78
 8003784:	f04f 33ff 	mov.w	r3, #4294967295
 8003788:	2200      	movs	r2, #0
 800378a:	9304      	str	r3, [sp, #16]
 800378c:	4699      	mov	r9, r3
 800378e:	2312      	movs	r3, #18
 8003790:	921f      	str	r2, [sp, #124]	; 0x7c
 8003792:	e784      	b.n	800369e <_dtoa_r+0x246>
 8003794:	2301      	movs	r3, #1
 8003796:	9309      	str	r3, [sp, #36]	; 0x24
 8003798:	e7f4      	b.n	8003784 <_dtoa_r+0x32c>
 800379a:	2301      	movs	r3, #1
 800379c:	9304      	str	r3, [sp, #16]
 800379e:	4699      	mov	r9, r3
 80037a0:	461a      	mov	r2, r3
 80037a2:	e7f5      	b.n	8003790 <_dtoa_r+0x338>
 80037a4:	686a      	ldr	r2, [r5, #4]
 80037a6:	0049      	lsls	r1, r1, #1
 80037a8:	3201      	adds	r2, #1
 80037aa:	606a      	str	r2, [r5, #4]
 80037ac:	e77b      	b.n	80036a6 <_dtoa_r+0x24e>
 80037ae:	2502      	movs	r5, #2
 80037b0:	e7ac      	b.n	800370c <_dtoa_r+0x2b4>
 80037b2:	07f1      	lsls	r1, r6, #31
 80037b4:	d508      	bpl.n	80037c8 <_dtoa_r+0x370>
 80037b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80037ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037be:	f7fc fef3 	bl	80005a8 <__aeabi_dmul>
 80037c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80037c6:	3501      	adds	r5, #1
 80037c8:	1076      	asrs	r6, r6, #1
 80037ca:	3708      	adds	r7, #8
 80037cc:	e79f      	b.n	800370e <_dtoa_r+0x2b6>
 80037ce:	f000 80a5 	beq.w	800391c <_dtoa_r+0x4c4>
 80037d2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80037d6:	f1cb 0600 	rsb	r6, fp, #0
 80037da:	4ba2      	ldr	r3, [pc, #648]	; (8003a64 <_dtoa_r+0x60c>)
 80037dc:	f006 020f 	and.w	r2, r6, #15
 80037e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	f7fc fede 	bl	80005a8 <__aeabi_dmul>
 80037ec:	2502      	movs	r5, #2
 80037ee:	2300      	movs	r3, #0
 80037f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037f4:	4f9c      	ldr	r7, [pc, #624]	; (8003a68 <_dtoa_r+0x610>)
 80037f6:	1136      	asrs	r6, r6, #4
 80037f8:	2e00      	cmp	r6, #0
 80037fa:	f040 8084 	bne.w	8003906 <_dtoa_r+0x4ae>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d18d      	bne.n	800371e <_dtoa_r+0x2c6>
 8003802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 808b 	beq.w	8003920 <_dtoa_r+0x4c8>
 800380a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800380e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003812:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003816:	2200      	movs	r2, #0
 8003818:	4b94      	ldr	r3, [pc, #592]	; (8003a6c <_dtoa_r+0x614>)
 800381a:	f7fd f937 	bl	8000a8c <__aeabi_dcmplt>
 800381e:	2800      	cmp	r0, #0
 8003820:	d07e      	beq.n	8003920 <_dtoa_r+0x4c8>
 8003822:	f1b9 0f00 	cmp.w	r9, #0
 8003826:	d07b      	beq.n	8003920 <_dtoa_r+0x4c8>
 8003828:	9b04      	ldr	r3, [sp, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	dd37      	ble.n	800389e <_dtoa_r+0x446>
 800382e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003832:	2200      	movs	r2, #0
 8003834:	4b8e      	ldr	r3, [pc, #568]	; (8003a70 <_dtoa_r+0x618>)
 8003836:	f7fc feb7 	bl	80005a8 <__aeabi_dmul>
 800383a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800383e:	9e04      	ldr	r6, [sp, #16]
 8003840:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003844:	3501      	adds	r5, #1
 8003846:	4628      	mov	r0, r5
 8003848:	f7fc fe48 	bl	80004dc <__aeabi_i2d>
 800384c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003850:	f7fc feaa 	bl	80005a8 <__aeabi_dmul>
 8003854:	4b87      	ldr	r3, [pc, #540]	; (8003a74 <_dtoa_r+0x61c>)
 8003856:	2200      	movs	r2, #0
 8003858:	f7fc fcf4 	bl	8000244 <__adddf3>
 800385c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003862:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8003866:	950b      	str	r5, [sp, #44]	; 0x2c
 8003868:	2e00      	cmp	r6, #0
 800386a:	d15c      	bne.n	8003926 <_dtoa_r+0x4ce>
 800386c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003870:	2200      	movs	r2, #0
 8003872:	4b81      	ldr	r3, [pc, #516]	; (8003a78 <_dtoa_r+0x620>)
 8003874:	f7fc fce4 	bl	8000240 <__aeabi_dsub>
 8003878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800387a:	462b      	mov	r3, r5
 800387c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003880:	f7fd f922 	bl	8000ac8 <__aeabi_dcmpgt>
 8003884:	2800      	cmp	r0, #0
 8003886:	f040 82f7 	bne.w	8003e78 <_dtoa_r+0xa20>
 800388a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800388e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003890:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003894:	f7fd f8fa 	bl	8000a8c <__aeabi_dcmplt>
 8003898:	2800      	cmp	r0, #0
 800389a:	f040 82eb 	bne.w	8003e74 <_dtoa_r+0xa1c>
 800389e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80038a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f2c0 8150 	blt.w	8003b4e <_dtoa_r+0x6f6>
 80038ae:	f1bb 0f0e 	cmp.w	fp, #14
 80038b2:	f300 814c 	bgt.w	8003b4e <_dtoa_r+0x6f6>
 80038b6:	4b6b      	ldr	r3, [pc, #428]	; (8003a64 <_dtoa_r+0x60c>)
 80038b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80038c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f280 80da 	bge.w	8003a80 <_dtoa_r+0x628>
 80038cc:	f1b9 0f00 	cmp.w	r9, #0
 80038d0:	f300 80d6 	bgt.w	8003a80 <_dtoa_r+0x628>
 80038d4:	f040 82cd 	bne.w	8003e72 <_dtoa_r+0xa1a>
 80038d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80038dc:	2200      	movs	r2, #0
 80038de:	4b66      	ldr	r3, [pc, #408]	; (8003a78 <_dtoa_r+0x620>)
 80038e0:	f7fc fe62 	bl	80005a8 <__aeabi_dmul>
 80038e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80038e8:	f7fd f8e4 	bl	8000ab4 <__aeabi_dcmpge>
 80038ec:	464e      	mov	r6, r9
 80038ee:	464f      	mov	r7, r9
 80038f0:	2800      	cmp	r0, #0
 80038f2:	f040 82a4 	bne.w	8003e3e <_dtoa_r+0x9e6>
 80038f6:	9b06      	ldr	r3, [sp, #24]
 80038f8:	9a06      	ldr	r2, [sp, #24]
 80038fa:	1c5d      	adds	r5, r3, #1
 80038fc:	2331      	movs	r3, #49	; 0x31
 80038fe:	f10b 0b01 	add.w	fp, fp, #1
 8003902:	7013      	strb	r3, [r2, #0]
 8003904:	e29f      	b.n	8003e46 <_dtoa_r+0x9ee>
 8003906:	07f2      	lsls	r2, r6, #31
 8003908:	d505      	bpl.n	8003916 <_dtoa_r+0x4be>
 800390a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800390e:	f7fc fe4b 	bl	80005a8 <__aeabi_dmul>
 8003912:	2301      	movs	r3, #1
 8003914:	3501      	adds	r5, #1
 8003916:	1076      	asrs	r6, r6, #1
 8003918:	3708      	adds	r7, #8
 800391a:	e76d      	b.n	80037f8 <_dtoa_r+0x3a0>
 800391c:	2502      	movs	r5, #2
 800391e:	e770      	b.n	8003802 <_dtoa_r+0x3aa>
 8003920:	465f      	mov	r7, fp
 8003922:	464e      	mov	r6, r9
 8003924:	e78f      	b.n	8003846 <_dtoa_r+0x3ee>
 8003926:	9a06      	ldr	r2, [sp, #24]
 8003928:	4b4e      	ldr	r3, [pc, #312]	; (8003a64 <_dtoa_r+0x60c>)
 800392a:	4432      	add	r2, r6
 800392c:	9211      	str	r2, [sp, #68]	; 0x44
 800392e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003930:	1e71      	subs	r1, r6, #1
 8003932:	2a00      	cmp	r2, #0
 8003934:	d048      	beq.n	80039c8 <_dtoa_r+0x570>
 8003936:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393e:	2000      	movs	r0, #0
 8003940:	494e      	ldr	r1, [pc, #312]	; (8003a7c <_dtoa_r+0x624>)
 8003942:	f7fc ff5b 	bl	80007fc <__aeabi_ddiv>
 8003946:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800394a:	f7fc fc79 	bl	8000240 <__aeabi_dsub>
 800394e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003952:	9d06      	ldr	r5, [sp, #24]
 8003954:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003958:	f7fd f8d6 	bl	8000b08 <__aeabi_d2iz>
 800395c:	4606      	mov	r6, r0
 800395e:	f7fc fdbd 	bl	80004dc <__aeabi_i2d>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800396a:	f7fc fc69 	bl	8000240 <__aeabi_dsub>
 800396e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003972:	3630      	adds	r6, #48	; 0x30
 8003974:	f805 6b01 	strb.w	r6, [r5], #1
 8003978:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800397c:	f7fd f886 	bl	8000a8c <__aeabi_dcmplt>
 8003980:	2800      	cmp	r0, #0
 8003982:	d164      	bne.n	8003a4e <_dtoa_r+0x5f6>
 8003984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003988:	2000      	movs	r0, #0
 800398a:	4938      	ldr	r1, [pc, #224]	; (8003a6c <_dtoa_r+0x614>)
 800398c:	f7fc fc58 	bl	8000240 <__aeabi_dsub>
 8003990:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003994:	f7fd f87a 	bl	8000a8c <__aeabi_dcmplt>
 8003998:	2800      	cmp	r0, #0
 800399a:	f040 80b9 	bne.w	8003b10 <_dtoa_r+0x6b8>
 800399e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80039a0:	429d      	cmp	r5, r3
 80039a2:	f43f af7c 	beq.w	800389e <_dtoa_r+0x446>
 80039a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80039aa:	2200      	movs	r2, #0
 80039ac:	4b30      	ldr	r3, [pc, #192]	; (8003a70 <_dtoa_r+0x618>)
 80039ae:	f7fc fdfb 	bl	80005a8 <__aeabi_dmul>
 80039b2:	2200      	movs	r2, #0
 80039b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80039b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039bc:	4b2c      	ldr	r3, [pc, #176]	; (8003a70 <_dtoa_r+0x618>)
 80039be:	f7fc fdf3 	bl	80005a8 <__aeabi_dmul>
 80039c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039c6:	e7c5      	b.n	8003954 <_dtoa_r+0x4fc>
 80039c8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80039cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80039d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80039d4:	f7fc fde8 	bl	80005a8 <__aeabi_dmul>
 80039d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80039dc:	9d06      	ldr	r5, [sp, #24]
 80039de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039e2:	f7fd f891 	bl	8000b08 <__aeabi_d2iz>
 80039e6:	4606      	mov	r6, r0
 80039e8:	f7fc fd78 	bl	80004dc <__aeabi_i2d>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039f4:	f7fc fc24 	bl	8000240 <__aeabi_dsub>
 80039f8:	3630      	adds	r6, #48	; 0x30
 80039fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80039fc:	f805 6b01 	strb.w	r6, [r5], #1
 8003a00:	42ab      	cmp	r3, r5
 8003a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	d124      	bne.n	8003a56 <_dtoa_r+0x5fe>
 8003a0c:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <_dtoa_r+0x624>)
 8003a0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003a12:	f7fc fc17 	bl	8000244 <__adddf3>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a1e:	f7fd f853 	bl	8000ac8 <__aeabi_dcmpgt>
 8003a22:	2800      	cmp	r0, #0
 8003a24:	d174      	bne.n	8003b10 <_dtoa_r+0x6b8>
 8003a26:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	4913      	ldr	r1, [pc, #76]	; (8003a7c <_dtoa_r+0x624>)
 8003a2e:	f7fc fc07 	bl	8000240 <__aeabi_dsub>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a3a:	f7fd f827 	bl	8000a8c <__aeabi_dcmplt>
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	f43f af2d 	beq.w	800389e <_dtoa_r+0x446>
 8003a44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003a48:	1e6a      	subs	r2, r5, #1
 8003a4a:	2b30      	cmp	r3, #48	; 0x30
 8003a4c:	d001      	beq.n	8003a52 <_dtoa_r+0x5fa>
 8003a4e:	46bb      	mov	fp, r7
 8003a50:	e04d      	b.n	8003aee <_dtoa_r+0x696>
 8003a52:	4615      	mov	r5, r2
 8003a54:	e7f6      	b.n	8003a44 <_dtoa_r+0x5ec>
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <_dtoa_r+0x618>)
 8003a58:	f7fc fda6 	bl	80005a8 <__aeabi_dmul>
 8003a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a60:	e7bd      	b.n	80039de <_dtoa_r+0x586>
 8003a62:	bf00      	nop
 8003a64:	08005228 	.word	0x08005228
 8003a68:	08005200 	.word	0x08005200
 8003a6c:	3ff00000 	.word	0x3ff00000
 8003a70:	40240000 	.word	0x40240000
 8003a74:	401c0000 	.word	0x401c0000
 8003a78:	40140000 	.word	0x40140000
 8003a7c:	3fe00000 	.word	0x3fe00000
 8003a80:	9d06      	ldr	r5, [sp, #24]
 8003a82:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003a86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a8a:	4630      	mov	r0, r6
 8003a8c:	4639      	mov	r1, r7
 8003a8e:	f7fc feb5 	bl	80007fc <__aeabi_ddiv>
 8003a92:	f7fd f839 	bl	8000b08 <__aeabi_d2iz>
 8003a96:	4680      	mov	r8, r0
 8003a98:	f7fc fd20 	bl	80004dc <__aeabi_i2d>
 8003a9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003aa0:	f7fc fd82 	bl	80005a8 <__aeabi_dmul>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	4639      	mov	r1, r7
 8003aac:	f7fc fbc8 	bl	8000240 <__aeabi_dsub>
 8003ab0:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003ab4:	f805 6b01 	strb.w	r6, [r5], #1
 8003ab8:	9e06      	ldr	r6, [sp, #24]
 8003aba:	4602      	mov	r2, r0
 8003abc:	1bae      	subs	r6, r5, r6
 8003abe:	45b1      	cmp	r9, r6
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	d137      	bne.n	8003b34 <_dtoa_r+0x6dc>
 8003ac4:	f7fc fbbe 	bl	8000244 <__adddf3>
 8003ac8:	4606      	mov	r6, r0
 8003aca:	460f      	mov	r7, r1
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ad4:	f7fc ffda 	bl	8000a8c <__aeabi_dcmplt>
 8003ad8:	b9c8      	cbnz	r0, 8003b0e <_dtoa_r+0x6b6>
 8003ada:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ade:	4632      	mov	r2, r6
 8003ae0:	463b      	mov	r3, r7
 8003ae2:	f7fc ffc9 	bl	8000a78 <__aeabi_dcmpeq>
 8003ae6:	b110      	cbz	r0, 8003aee <_dtoa_r+0x696>
 8003ae8:	f018 0f01 	tst.w	r8, #1
 8003aec:	d10f      	bne.n	8003b0e <_dtoa_r+0x6b6>
 8003aee:	4651      	mov	r1, sl
 8003af0:	4620      	mov	r0, r4
 8003af2:	f000 fbb2 	bl	800425a <_Bfree>
 8003af6:	2300      	movs	r3, #0
 8003af8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003afa:	702b      	strb	r3, [r5, #0]
 8003afc:	f10b 0301 	add.w	r3, fp, #1
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f43f acec 	beq.w	80034e2 <_dtoa_r+0x8a>
 8003b0a:	601d      	str	r5, [r3, #0]
 8003b0c:	e4e9      	b.n	80034e2 <_dtoa_r+0x8a>
 8003b0e:	465f      	mov	r7, fp
 8003b10:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003b14:	1e6b      	subs	r3, r5, #1
 8003b16:	2a39      	cmp	r2, #57	; 0x39
 8003b18:	d106      	bne.n	8003b28 <_dtoa_r+0x6d0>
 8003b1a:	9a06      	ldr	r2, [sp, #24]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d107      	bne.n	8003b30 <_dtoa_r+0x6d8>
 8003b20:	2330      	movs	r3, #48	; 0x30
 8003b22:	7013      	strb	r3, [r2, #0]
 8003b24:	4613      	mov	r3, r2
 8003b26:	3701      	adds	r7, #1
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	3201      	adds	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	e78e      	b.n	8003a4e <_dtoa_r+0x5f6>
 8003b30:	461d      	mov	r5, r3
 8003b32:	e7ed      	b.n	8003b10 <_dtoa_r+0x6b8>
 8003b34:	2200      	movs	r2, #0
 8003b36:	4bb5      	ldr	r3, [pc, #724]	; (8003e0c <_dtoa_r+0x9b4>)
 8003b38:	f7fc fd36 	bl	80005a8 <__aeabi_dmul>
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2300      	movs	r3, #0
 8003b40:	4606      	mov	r6, r0
 8003b42:	460f      	mov	r7, r1
 8003b44:	f7fc ff98 	bl	8000a78 <__aeabi_dcmpeq>
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d09c      	beq.n	8003a86 <_dtoa_r+0x62e>
 8003b4c:	e7cf      	b.n	8003aee <_dtoa_r+0x696>
 8003b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b50:	2a00      	cmp	r2, #0
 8003b52:	f000 8129 	beq.w	8003da8 <_dtoa_r+0x950>
 8003b56:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003b58:	2a01      	cmp	r2, #1
 8003b5a:	f300 810e 	bgt.w	8003d7a <_dtoa_r+0x922>
 8003b5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b60:	2a00      	cmp	r2, #0
 8003b62:	f000 8106 	beq.w	8003d72 <_dtoa_r+0x91a>
 8003b66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003b6a:	4645      	mov	r5, r8
 8003b6c:	9e08      	ldr	r6, [sp, #32]
 8003b6e:	9a07      	ldr	r2, [sp, #28]
 8003b70:	2101      	movs	r1, #1
 8003b72:	441a      	add	r2, r3
 8003b74:	4620      	mov	r0, r4
 8003b76:	4498      	add	r8, r3
 8003b78:	9207      	str	r2, [sp, #28]
 8003b7a:	f000 fc0e 	bl	800439a <__i2b>
 8003b7e:	4607      	mov	r7, r0
 8003b80:	2d00      	cmp	r5, #0
 8003b82:	dd0b      	ble.n	8003b9c <_dtoa_r+0x744>
 8003b84:	9b07      	ldr	r3, [sp, #28]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	dd08      	ble.n	8003b9c <_dtoa_r+0x744>
 8003b8a:	42ab      	cmp	r3, r5
 8003b8c:	bfa8      	it	ge
 8003b8e:	462b      	movge	r3, r5
 8003b90:	9a07      	ldr	r2, [sp, #28]
 8003b92:	eba8 0803 	sub.w	r8, r8, r3
 8003b96:	1aed      	subs	r5, r5, r3
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	9307      	str	r3, [sp, #28]
 8003b9c:	9b08      	ldr	r3, [sp, #32]
 8003b9e:	b1fb      	cbz	r3, 8003be0 <_dtoa_r+0x788>
 8003ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8104 	beq.w	8003db0 <_dtoa_r+0x958>
 8003ba8:	2e00      	cmp	r6, #0
 8003baa:	dd11      	ble.n	8003bd0 <_dtoa_r+0x778>
 8003bac:	4639      	mov	r1, r7
 8003bae:	4632      	mov	r2, r6
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f000 fc87 	bl	80044c4 <__pow5mult>
 8003bb6:	4652      	mov	r2, sl
 8003bb8:	4601      	mov	r1, r0
 8003bba:	4607      	mov	r7, r0
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f000 fbf5 	bl	80043ac <__multiply>
 8003bc2:	4651      	mov	r1, sl
 8003bc4:	900a      	str	r0, [sp, #40]	; 0x28
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	f000 fb47 	bl	800425a <_Bfree>
 8003bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bce:	469a      	mov	sl, r3
 8003bd0:	9b08      	ldr	r3, [sp, #32]
 8003bd2:	1b9a      	subs	r2, r3, r6
 8003bd4:	d004      	beq.n	8003be0 <_dtoa_r+0x788>
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	4620      	mov	r0, r4
 8003bda:	f000 fc73 	bl	80044c4 <__pow5mult>
 8003bde:	4682      	mov	sl, r0
 8003be0:	2101      	movs	r1, #1
 8003be2:	4620      	mov	r0, r4
 8003be4:	f000 fbd9 	bl	800439a <__i2b>
 8003be8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bea:	4606      	mov	r6, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f340 80e1 	ble.w	8003db4 <_dtoa_r+0x95c>
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4601      	mov	r1, r0
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f000 fc64 	bl	80044c4 <__pow5mult>
 8003bfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003bfe:	4606      	mov	r6, r0
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	f340 80da 	ble.w	8003dba <_dtoa_r+0x962>
 8003c06:	2300      	movs	r3, #0
 8003c08:	9308      	str	r3, [sp, #32]
 8003c0a:	6933      	ldr	r3, [r6, #16]
 8003c0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003c10:	6918      	ldr	r0, [r3, #16]
 8003c12:	f000 fb74 	bl	80042fe <__hi0bits>
 8003c16:	f1c0 0020 	rsb	r0, r0, #32
 8003c1a:	9b07      	ldr	r3, [sp, #28]
 8003c1c:	4418      	add	r0, r3
 8003c1e:	f010 001f 	ands.w	r0, r0, #31
 8003c22:	f000 80f0 	beq.w	8003e06 <_dtoa_r+0x9ae>
 8003c26:	f1c0 0320 	rsb	r3, r0, #32
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	f340 80e2 	ble.w	8003df4 <_dtoa_r+0x99c>
 8003c30:	9b07      	ldr	r3, [sp, #28]
 8003c32:	f1c0 001c 	rsb	r0, r0, #28
 8003c36:	4480      	add	r8, r0
 8003c38:	4405      	add	r5, r0
 8003c3a:	4403      	add	r3, r0
 8003c3c:	9307      	str	r3, [sp, #28]
 8003c3e:	f1b8 0f00 	cmp.w	r8, #0
 8003c42:	dd05      	ble.n	8003c50 <_dtoa_r+0x7f8>
 8003c44:	4651      	mov	r1, sl
 8003c46:	4642      	mov	r2, r8
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f000 fc89 	bl	8004560 <__lshift>
 8003c4e:	4682      	mov	sl, r0
 8003c50:	9b07      	ldr	r3, [sp, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	dd05      	ble.n	8003c62 <_dtoa_r+0x80a>
 8003c56:	4631      	mov	r1, r6
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f000 fc80 	bl	8004560 <__lshift>
 8003c60:	4606      	mov	r6, r0
 8003c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80d3 	beq.w	8003e10 <_dtoa_r+0x9b8>
 8003c6a:	4631      	mov	r1, r6
 8003c6c:	4650      	mov	r0, sl
 8003c6e:	f000 fcc8 	bl	8004602 <__mcmp>
 8003c72:	2800      	cmp	r0, #0
 8003c74:	f280 80cc 	bge.w	8003e10 <_dtoa_r+0x9b8>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	4651      	mov	r1, sl
 8003c7c:	220a      	movs	r2, #10
 8003c7e:	4620      	mov	r0, r4
 8003c80:	f000 fb02 	bl	8004288 <__multadd>
 8003c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c86:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003c8a:	4682      	mov	sl, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 81a9 	beq.w	8003fe4 <_dtoa_r+0xb8c>
 8003c92:	2300      	movs	r3, #0
 8003c94:	4639      	mov	r1, r7
 8003c96:	220a      	movs	r2, #10
 8003c98:	4620      	mov	r0, r4
 8003c9a:	f000 faf5 	bl	8004288 <__multadd>
 8003c9e:	9b04      	ldr	r3, [sp, #16]
 8003ca0:	4607      	mov	r7, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	dc03      	bgt.n	8003cae <_dtoa_r+0x856>
 8003ca6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	f300 80b9 	bgt.w	8003e20 <_dtoa_r+0x9c8>
 8003cae:	2d00      	cmp	r5, #0
 8003cb0:	dd05      	ble.n	8003cbe <_dtoa_r+0x866>
 8003cb2:	4639      	mov	r1, r7
 8003cb4:	462a      	mov	r2, r5
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f000 fc52 	bl	8004560 <__lshift>
 8003cbc:	4607      	mov	r7, r0
 8003cbe:	9b08      	ldr	r3, [sp, #32]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8110 	beq.w	8003ee6 <_dtoa_r+0xa8e>
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f000 fa92 	bl	80041f2 <_Balloc>
 8003cce:	4605      	mov	r5, r0
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	f107 010c 	add.w	r1, r7, #12
 8003cd6:	3202      	adds	r2, #2
 8003cd8:	0092      	lsls	r2, r2, #2
 8003cda:	300c      	adds	r0, #12
 8003cdc:	f000 fa7e 	bl	80041dc <memcpy>
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f000 fc3b 	bl	8004560 <__lshift>
 8003cea:	9707      	str	r7, [sp, #28]
 8003cec:	4607      	mov	r7, r0
 8003cee:	9b02      	ldr	r3, [sp, #8]
 8003cf0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	9308      	str	r3, [sp, #32]
 8003cfa:	4631      	mov	r1, r6
 8003cfc:	4650      	mov	r0, sl
 8003cfe:	f7ff fb1d 	bl	800333c <quorem>
 8003d02:	9907      	ldr	r1, [sp, #28]
 8003d04:	4605      	mov	r5, r0
 8003d06:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003d0a:	4650      	mov	r0, sl
 8003d0c:	f000 fc79 	bl	8004602 <__mcmp>
 8003d10:	463a      	mov	r2, r7
 8003d12:	9002      	str	r0, [sp, #8]
 8003d14:	4631      	mov	r1, r6
 8003d16:	4620      	mov	r0, r4
 8003d18:	f000 fc8d 	bl	8004636 <__mdiff>
 8003d1c:	68c3      	ldr	r3, [r0, #12]
 8003d1e:	4602      	mov	r2, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f040 80e2 	bne.w	8003eea <_dtoa_r+0xa92>
 8003d26:	4601      	mov	r1, r0
 8003d28:	9009      	str	r0, [sp, #36]	; 0x24
 8003d2a:	4650      	mov	r0, sl
 8003d2c:	f000 fc69 	bl	8004602 <__mcmp>
 8003d30:	4603      	mov	r3, r0
 8003d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d34:	4611      	mov	r1, r2
 8003d36:	4620      	mov	r0, r4
 8003d38:	9309      	str	r3, [sp, #36]	; 0x24
 8003d3a:	f000 fa8e 	bl	800425a <_Bfree>
 8003d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f040 80d4 	bne.w	8003eee <_dtoa_r+0xa96>
 8003d46:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003d48:	2a00      	cmp	r2, #0
 8003d4a:	f040 80d0 	bne.w	8003eee <_dtoa_r+0xa96>
 8003d4e:	9a08      	ldr	r2, [sp, #32]
 8003d50:	2a00      	cmp	r2, #0
 8003d52:	f040 80cc 	bne.w	8003eee <_dtoa_r+0xa96>
 8003d56:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003d5a:	f000 80e8 	beq.w	8003f2e <_dtoa_r+0xad6>
 8003d5e:	9b02      	ldr	r3, [sp, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	dd01      	ble.n	8003d68 <_dtoa_r+0x910>
 8003d64:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003d68:	f108 0501 	add.w	r5, r8, #1
 8003d6c:	f888 9000 	strb.w	r9, [r8]
 8003d70:	e06b      	b.n	8003e4a <_dtoa_r+0x9f2>
 8003d72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d74:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003d78:	e6f7      	b.n	8003b6a <_dtoa_r+0x712>
 8003d7a:	9b08      	ldr	r3, [sp, #32]
 8003d7c:	f109 36ff 	add.w	r6, r9, #4294967295
 8003d80:	42b3      	cmp	r3, r6
 8003d82:	bfb7      	itett	lt
 8003d84:	9b08      	ldrlt	r3, [sp, #32]
 8003d86:	1b9e      	subge	r6, r3, r6
 8003d88:	1af2      	sublt	r2, r6, r3
 8003d8a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003d8c:	bfbf      	itttt	lt
 8003d8e:	9608      	strlt	r6, [sp, #32]
 8003d90:	189b      	addlt	r3, r3, r2
 8003d92:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003d94:	2600      	movlt	r6, #0
 8003d96:	f1b9 0f00 	cmp.w	r9, #0
 8003d9a:	bfb9      	ittee	lt
 8003d9c:	eba8 0509 	sublt.w	r5, r8, r9
 8003da0:	2300      	movlt	r3, #0
 8003da2:	4645      	movge	r5, r8
 8003da4:	464b      	movge	r3, r9
 8003da6:	e6e2      	b.n	8003b6e <_dtoa_r+0x716>
 8003da8:	9e08      	ldr	r6, [sp, #32]
 8003daa:	4645      	mov	r5, r8
 8003dac:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003dae:	e6e7      	b.n	8003b80 <_dtoa_r+0x728>
 8003db0:	9a08      	ldr	r2, [sp, #32]
 8003db2:	e710      	b.n	8003bd6 <_dtoa_r+0x77e>
 8003db4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	dc18      	bgt.n	8003dec <_dtoa_r+0x994>
 8003dba:	9b02      	ldr	r3, [sp, #8]
 8003dbc:	b9b3      	cbnz	r3, 8003dec <_dtoa_r+0x994>
 8003dbe:	9b03      	ldr	r3, [sp, #12]
 8003dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dc4:	b9a3      	cbnz	r3, 8003df0 <_dtoa_r+0x998>
 8003dc6:	9b03      	ldr	r3, [sp, #12]
 8003dc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dcc:	0d1b      	lsrs	r3, r3, #20
 8003dce:	051b      	lsls	r3, r3, #20
 8003dd0:	b12b      	cbz	r3, 8003dde <_dtoa_r+0x986>
 8003dd2:	9b07      	ldr	r3, [sp, #28]
 8003dd4:	f108 0801 	add.w	r8, r8, #1
 8003dd8:	3301      	adds	r3, #1
 8003dda:	9307      	str	r3, [sp, #28]
 8003ddc:	2301      	movs	r3, #1
 8003dde:	9308      	str	r3, [sp, #32]
 8003de0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f47f af11 	bne.w	8003c0a <_dtoa_r+0x7b2>
 8003de8:	2001      	movs	r0, #1
 8003dea:	e716      	b.n	8003c1a <_dtoa_r+0x7c2>
 8003dec:	2300      	movs	r3, #0
 8003dee:	e7f6      	b.n	8003dde <_dtoa_r+0x986>
 8003df0:	9b02      	ldr	r3, [sp, #8]
 8003df2:	e7f4      	b.n	8003dde <_dtoa_r+0x986>
 8003df4:	f43f af23 	beq.w	8003c3e <_dtoa_r+0x7e6>
 8003df8:	9a07      	ldr	r2, [sp, #28]
 8003dfa:	331c      	adds	r3, #28
 8003dfc:	441a      	add	r2, r3
 8003dfe:	4498      	add	r8, r3
 8003e00:	441d      	add	r5, r3
 8003e02:	4613      	mov	r3, r2
 8003e04:	e71a      	b.n	8003c3c <_dtoa_r+0x7e4>
 8003e06:	4603      	mov	r3, r0
 8003e08:	e7f6      	b.n	8003df8 <_dtoa_r+0x9a0>
 8003e0a:	bf00      	nop
 8003e0c:	40240000 	.word	0x40240000
 8003e10:	f1b9 0f00 	cmp.w	r9, #0
 8003e14:	dc33      	bgt.n	8003e7e <_dtoa_r+0xa26>
 8003e16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	dd30      	ble.n	8003e7e <_dtoa_r+0xa26>
 8003e1c:	f8cd 9010 	str.w	r9, [sp, #16]
 8003e20:	9b04      	ldr	r3, [sp, #16]
 8003e22:	b963      	cbnz	r3, 8003e3e <_dtoa_r+0x9e6>
 8003e24:	4631      	mov	r1, r6
 8003e26:	2205      	movs	r2, #5
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f000 fa2d 	bl	8004288 <__multadd>
 8003e2e:	4601      	mov	r1, r0
 8003e30:	4606      	mov	r6, r0
 8003e32:	4650      	mov	r0, sl
 8003e34:	f000 fbe5 	bl	8004602 <__mcmp>
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	f73f ad5c 	bgt.w	80038f6 <_dtoa_r+0x49e>
 8003e3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003e40:	9d06      	ldr	r5, [sp, #24]
 8003e42:	ea6f 0b03 	mvn.w	fp, r3
 8003e46:	2300      	movs	r3, #0
 8003e48:	9307      	str	r3, [sp, #28]
 8003e4a:	4631      	mov	r1, r6
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f000 fa04 	bl	800425a <_Bfree>
 8003e52:	2f00      	cmp	r7, #0
 8003e54:	f43f ae4b 	beq.w	8003aee <_dtoa_r+0x696>
 8003e58:	9b07      	ldr	r3, [sp, #28]
 8003e5a:	b12b      	cbz	r3, 8003e68 <_dtoa_r+0xa10>
 8003e5c:	42bb      	cmp	r3, r7
 8003e5e:	d003      	beq.n	8003e68 <_dtoa_r+0xa10>
 8003e60:	4619      	mov	r1, r3
 8003e62:	4620      	mov	r0, r4
 8003e64:	f000 f9f9 	bl	800425a <_Bfree>
 8003e68:	4639      	mov	r1, r7
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f000 f9f5 	bl	800425a <_Bfree>
 8003e70:	e63d      	b.n	8003aee <_dtoa_r+0x696>
 8003e72:	2600      	movs	r6, #0
 8003e74:	4637      	mov	r7, r6
 8003e76:	e7e2      	b.n	8003e3e <_dtoa_r+0x9e6>
 8003e78:	46bb      	mov	fp, r7
 8003e7a:	4637      	mov	r7, r6
 8003e7c:	e53b      	b.n	80038f6 <_dtoa_r+0x49e>
 8003e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e80:	f8cd 9010 	str.w	r9, [sp, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f47f af12 	bne.w	8003cae <_dtoa_r+0x856>
 8003e8a:	9d06      	ldr	r5, [sp, #24]
 8003e8c:	4631      	mov	r1, r6
 8003e8e:	4650      	mov	r0, sl
 8003e90:	f7ff fa54 	bl	800333c <quorem>
 8003e94:	9b06      	ldr	r3, [sp, #24]
 8003e96:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003e9a:	f805 9b01 	strb.w	r9, [r5], #1
 8003e9e:	9a04      	ldr	r2, [sp, #16]
 8003ea0:	1aeb      	subs	r3, r5, r3
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	f300 8081 	bgt.w	8003faa <_dtoa_r+0xb52>
 8003ea8:	9b06      	ldr	r3, [sp, #24]
 8003eaa:	2a01      	cmp	r2, #1
 8003eac:	bfac      	ite	ge
 8003eae:	189b      	addge	r3, r3, r2
 8003eb0:	3301      	addlt	r3, #1
 8003eb2:	4698      	mov	r8, r3
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9307      	str	r3, [sp, #28]
 8003eb8:	4651      	mov	r1, sl
 8003eba:	2201      	movs	r2, #1
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	f000 fb4f 	bl	8004560 <__lshift>
 8003ec2:	4631      	mov	r1, r6
 8003ec4:	4682      	mov	sl, r0
 8003ec6:	f000 fb9c 	bl	8004602 <__mcmp>
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	dc34      	bgt.n	8003f38 <_dtoa_r+0xae0>
 8003ece:	d102      	bne.n	8003ed6 <_dtoa_r+0xa7e>
 8003ed0:	f019 0f01 	tst.w	r9, #1
 8003ed4:	d130      	bne.n	8003f38 <_dtoa_r+0xae0>
 8003ed6:	4645      	mov	r5, r8
 8003ed8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003edc:	1e6a      	subs	r2, r5, #1
 8003ede:	2b30      	cmp	r3, #48	; 0x30
 8003ee0:	d1b3      	bne.n	8003e4a <_dtoa_r+0x9f2>
 8003ee2:	4615      	mov	r5, r2
 8003ee4:	e7f8      	b.n	8003ed8 <_dtoa_r+0xa80>
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	e6ff      	b.n	8003cea <_dtoa_r+0x892>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e722      	b.n	8003d34 <_dtoa_r+0x8dc>
 8003eee:	9a02      	ldr	r2, [sp, #8]
 8003ef0:	2a00      	cmp	r2, #0
 8003ef2:	db04      	blt.n	8003efe <_dtoa_r+0xaa6>
 8003ef4:	d128      	bne.n	8003f48 <_dtoa_r+0xaf0>
 8003ef6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003ef8:	bb32      	cbnz	r2, 8003f48 <_dtoa_r+0xaf0>
 8003efa:	9a08      	ldr	r2, [sp, #32]
 8003efc:	bb22      	cbnz	r2, 8003f48 <_dtoa_r+0xaf0>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f77f af32 	ble.w	8003d68 <_dtoa_r+0x910>
 8003f04:	4651      	mov	r1, sl
 8003f06:	2201      	movs	r2, #1
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f000 fb29 	bl	8004560 <__lshift>
 8003f0e:	4631      	mov	r1, r6
 8003f10:	4682      	mov	sl, r0
 8003f12:	f000 fb76 	bl	8004602 <__mcmp>
 8003f16:	2800      	cmp	r0, #0
 8003f18:	dc05      	bgt.n	8003f26 <_dtoa_r+0xace>
 8003f1a:	f47f af25 	bne.w	8003d68 <_dtoa_r+0x910>
 8003f1e:	f019 0f01 	tst.w	r9, #1
 8003f22:	f43f af21 	beq.w	8003d68 <_dtoa_r+0x910>
 8003f26:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003f2a:	f47f af1b 	bne.w	8003d64 <_dtoa_r+0x90c>
 8003f2e:	2339      	movs	r3, #57	; 0x39
 8003f30:	f108 0801 	add.w	r8, r8, #1
 8003f34:	f808 3c01 	strb.w	r3, [r8, #-1]
 8003f38:	4645      	mov	r5, r8
 8003f3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f3e:	1e6a      	subs	r2, r5, #1
 8003f40:	2b39      	cmp	r3, #57	; 0x39
 8003f42:	d03a      	beq.n	8003fba <_dtoa_r+0xb62>
 8003f44:	3301      	adds	r3, #1
 8003f46:	e03f      	b.n	8003fc8 <_dtoa_r+0xb70>
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f108 0501 	add.w	r5, r8, #1
 8003f4e:	dd05      	ble.n	8003f5c <_dtoa_r+0xb04>
 8003f50:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003f54:	d0eb      	beq.n	8003f2e <_dtoa_r+0xad6>
 8003f56:	f109 0901 	add.w	r9, r9, #1
 8003f5a:	e707      	b.n	8003d6c <_dtoa_r+0x914>
 8003f5c:	9b06      	ldr	r3, [sp, #24]
 8003f5e:	9a04      	ldr	r2, [sp, #16]
 8003f60:	1aeb      	subs	r3, r5, r3
 8003f62:	4293      	cmp	r3, r2
 8003f64:	46a8      	mov	r8, r5
 8003f66:	f805 9c01 	strb.w	r9, [r5, #-1]
 8003f6a:	d0a5      	beq.n	8003eb8 <_dtoa_r+0xa60>
 8003f6c:	4651      	mov	r1, sl
 8003f6e:	2300      	movs	r3, #0
 8003f70:	220a      	movs	r2, #10
 8003f72:	4620      	mov	r0, r4
 8003f74:	f000 f988 	bl	8004288 <__multadd>
 8003f78:	9b07      	ldr	r3, [sp, #28]
 8003f7a:	4682      	mov	sl, r0
 8003f7c:	42bb      	cmp	r3, r7
 8003f7e:	f04f 020a 	mov.w	r2, #10
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	9907      	ldr	r1, [sp, #28]
 8003f88:	4620      	mov	r0, r4
 8003f8a:	d104      	bne.n	8003f96 <_dtoa_r+0xb3e>
 8003f8c:	f000 f97c 	bl	8004288 <__multadd>
 8003f90:	9007      	str	r0, [sp, #28]
 8003f92:	4607      	mov	r7, r0
 8003f94:	e6b1      	b.n	8003cfa <_dtoa_r+0x8a2>
 8003f96:	f000 f977 	bl	8004288 <__multadd>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	9007      	str	r0, [sp, #28]
 8003f9e:	220a      	movs	r2, #10
 8003fa0:	4639      	mov	r1, r7
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	f000 f970 	bl	8004288 <__multadd>
 8003fa8:	e7f3      	b.n	8003f92 <_dtoa_r+0xb3a>
 8003faa:	4651      	mov	r1, sl
 8003fac:	2300      	movs	r3, #0
 8003fae:	220a      	movs	r2, #10
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f000 f969 	bl	8004288 <__multadd>
 8003fb6:	4682      	mov	sl, r0
 8003fb8:	e768      	b.n	8003e8c <_dtoa_r+0xa34>
 8003fba:	9b06      	ldr	r3, [sp, #24]
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d105      	bne.n	8003fcc <_dtoa_r+0xb74>
 8003fc0:	2331      	movs	r3, #49	; 0x31
 8003fc2:	9a06      	ldr	r2, [sp, #24]
 8003fc4:	f10b 0b01 	add.w	fp, fp, #1
 8003fc8:	7013      	strb	r3, [r2, #0]
 8003fca:	e73e      	b.n	8003e4a <_dtoa_r+0x9f2>
 8003fcc:	4615      	mov	r5, r2
 8003fce:	e7b4      	b.n	8003f3a <_dtoa_r+0xae2>
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <_dtoa_r+0xba0>)
 8003fd2:	f7ff baa3 	b.w	800351c <_dtoa_r+0xc4>
 8003fd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f47f aa7d 	bne.w	80034d8 <_dtoa_r+0x80>
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <_dtoa_r+0xba4>)
 8003fe0:	f7ff ba9c 	b.w	800351c <_dtoa_r+0xc4>
 8003fe4:	9b04      	ldr	r3, [sp, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f73f af4f 	bgt.w	8003e8a <_dtoa_r+0xa32>
 8003fec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	f77f af4b 	ble.w	8003e8a <_dtoa_r+0xa32>
 8003ff4:	e714      	b.n	8003e20 <_dtoa_r+0x9c8>
 8003ff6:	bf00      	nop
 8003ff8:	08005168 	.word	0x08005168
 8003ffc:	0800518c 	.word	0x0800518c

08004000 <_cleanup_r>:
 8004000:	4901      	ldr	r1, [pc, #4]	; (8004008 <_cleanup_r+0x8>)
 8004002:	f000 b8a9 	b.w	8004158 <_fwalk_reent>
 8004006:	bf00      	nop
 8004008:	08004efd 	.word	0x08004efd

0800400c <std.isra.0>:
 800400c:	2300      	movs	r3, #0
 800400e:	b510      	push	{r4, lr}
 8004010:	4604      	mov	r4, r0
 8004012:	6003      	str	r3, [r0, #0]
 8004014:	6043      	str	r3, [r0, #4]
 8004016:	6083      	str	r3, [r0, #8]
 8004018:	8181      	strh	r1, [r0, #12]
 800401a:	6643      	str	r3, [r0, #100]	; 0x64
 800401c:	81c2      	strh	r2, [r0, #14]
 800401e:	6103      	str	r3, [r0, #16]
 8004020:	6143      	str	r3, [r0, #20]
 8004022:	6183      	str	r3, [r0, #24]
 8004024:	4619      	mov	r1, r3
 8004026:	2208      	movs	r2, #8
 8004028:	305c      	adds	r0, #92	; 0x5c
 800402a:	f7fe fd05 	bl	8002a38 <memset>
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <std.isra.0+0x38>)
 8004030:	6224      	str	r4, [r4, #32]
 8004032:	6263      	str	r3, [r4, #36]	; 0x24
 8004034:	4b04      	ldr	r3, [pc, #16]	; (8004048 <std.isra.0+0x3c>)
 8004036:	62a3      	str	r3, [r4, #40]	; 0x28
 8004038:	4b04      	ldr	r3, [pc, #16]	; (800404c <std.isra.0+0x40>)
 800403a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800403c:	4b04      	ldr	r3, [pc, #16]	; (8004050 <std.isra.0+0x44>)
 800403e:	6323      	str	r3, [r4, #48]	; 0x30
 8004040:	bd10      	pop	{r4, pc}
 8004042:	bf00      	nop
 8004044:	08004ba1 	.word	0x08004ba1
 8004048:	08004bc3 	.word	0x08004bc3
 800404c:	08004bfb 	.word	0x08004bfb
 8004050:	08004c1f 	.word	0x08004c1f

08004054 <__sfmoreglue>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	2568      	movs	r5, #104	; 0x68
 8004058:	1e4a      	subs	r2, r1, #1
 800405a:	4355      	muls	r5, r2
 800405c:	460e      	mov	r6, r1
 800405e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004062:	f000 fbf1 	bl	8004848 <_malloc_r>
 8004066:	4604      	mov	r4, r0
 8004068:	b140      	cbz	r0, 800407c <__sfmoreglue+0x28>
 800406a:	2100      	movs	r1, #0
 800406c:	e880 0042 	stmia.w	r0, {r1, r6}
 8004070:	300c      	adds	r0, #12
 8004072:	60a0      	str	r0, [r4, #8]
 8004074:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004078:	f7fe fcde 	bl	8002a38 <memset>
 800407c:	4620      	mov	r0, r4
 800407e:	bd70      	pop	{r4, r5, r6, pc}

08004080 <__sinit>:
 8004080:	6983      	ldr	r3, [r0, #24]
 8004082:	b510      	push	{r4, lr}
 8004084:	4604      	mov	r4, r0
 8004086:	bb33      	cbnz	r3, 80040d6 <__sinit+0x56>
 8004088:	6483      	str	r3, [r0, #72]	; 0x48
 800408a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800408c:	6503      	str	r3, [r0, #80]	; 0x50
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <__sinit+0x58>)
 8004090:	4a12      	ldr	r2, [pc, #72]	; (80040dc <__sinit+0x5c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6282      	str	r2, [r0, #40]	; 0x28
 8004096:	4298      	cmp	r0, r3
 8004098:	bf04      	itt	eq
 800409a:	2301      	moveq	r3, #1
 800409c:	6183      	streq	r3, [r0, #24]
 800409e:	f000 f81f 	bl	80040e0 <__sfp>
 80040a2:	6060      	str	r0, [r4, #4]
 80040a4:	4620      	mov	r0, r4
 80040a6:	f000 f81b 	bl	80040e0 <__sfp>
 80040aa:	60a0      	str	r0, [r4, #8]
 80040ac:	4620      	mov	r0, r4
 80040ae:	f000 f817 	bl	80040e0 <__sfp>
 80040b2:	2200      	movs	r2, #0
 80040b4:	60e0      	str	r0, [r4, #12]
 80040b6:	2104      	movs	r1, #4
 80040b8:	6860      	ldr	r0, [r4, #4]
 80040ba:	f7ff ffa7 	bl	800400c <std.isra.0>
 80040be:	2201      	movs	r2, #1
 80040c0:	2109      	movs	r1, #9
 80040c2:	68a0      	ldr	r0, [r4, #8]
 80040c4:	f7ff ffa2 	bl	800400c <std.isra.0>
 80040c8:	2202      	movs	r2, #2
 80040ca:	2112      	movs	r1, #18
 80040cc:	68e0      	ldr	r0, [r4, #12]
 80040ce:	f7ff ff9d 	bl	800400c <std.isra.0>
 80040d2:	2301      	movs	r3, #1
 80040d4:	61a3      	str	r3, [r4, #24]
 80040d6:	bd10      	pop	{r4, pc}
 80040d8:	08005154 	.word	0x08005154
 80040dc:	08004001 	.word	0x08004001

080040e0 <__sfp>:
 80040e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e2:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <__sfp+0x74>)
 80040e4:	4607      	mov	r7, r0
 80040e6:	681e      	ldr	r6, [r3, #0]
 80040e8:	69b3      	ldr	r3, [r6, #24]
 80040ea:	b913      	cbnz	r3, 80040f2 <__sfp+0x12>
 80040ec:	4630      	mov	r0, r6
 80040ee:	f7ff ffc7 	bl	8004080 <__sinit>
 80040f2:	3648      	adds	r6, #72	; 0x48
 80040f4:	68b4      	ldr	r4, [r6, #8]
 80040f6:	6873      	ldr	r3, [r6, #4]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	d503      	bpl.n	8004104 <__sfp+0x24>
 80040fc:	6833      	ldr	r3, [r6, #0]
 80040fe:	b133      	cbz	r3, 800410e <__sfp+0x2e>
 8004100:	6836      	ldr	r6, [r6, #0]
 8004102:	e7f7      	b.n	80040f4 <__sfp+0x14>
 8004104:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004108:	b16d      	cbz	r5, 8004126 <__sfp+0x46>
 800410a:	3468      	adds	r4, #104	; 0x68
 800410c:	e7f4      	b.n	80040f8 <__sfp+0x18>
 800410e:	2104      	movs	r1, #4
 8004110:	4638      	mov	r0, r7
 8004112:	f7ff ff9f 	bl	8004054 <__sfmoreglue>
 8004116:	6030      	str	r0, [r6, #0]
 8004118:	2800      	cmp	r0, #0
 800411a:	d1f1      	bne.n	8004100 <__sfp+0x20>
 800411c:	230c      	movs	r3, #12
 800411e:	4604      	mov	r4, r0
 8004120:	603b      	str	r3, [r7, #0]
 8004122:	4620      	mov	r0, r4
 8004124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004126:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800412a:	81e3      	strh	r3, [r4, #14]
 800412c:	2301      	movs	r3, #1
 800412e:	6665      	str	r5, [r4, #100]	; 0x64
 8004130:	81a3      	strh	r3, [r4, #12]
 8004132:	6025      	str	r5, [r4, #0]
 8004134:	60a5      	str	r5, [r4, #8]
 8004136:	6065      	str	r5, [r4, #4]
 8004138:	6125      	str	r5, [r4, #16]
 800413a:	6165      	str	r5, [r4, #20]
 800413c:	61a5      	str	r5, [r4, #24]
 800413e:	2208      	movs	r2, #8
 8004140:	4629      	mov	r1, r5
 8004142:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004146:	f7fe fc77 	bl	8002a38 <memset>
 800414a:	6365      	str	r5, [r4, #52]	; 0x34
 800414c:	63a5      	str	r5, [r4, #56]	; 0x38
 800414e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004150:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004152:	e7e6      	b.n	8004122 <__sfp+0x42>
 8004154:	08005154 	.word	0x08005154

08004158 <_fwalk_reent>:
 8004158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800415c:	4680      	mov	r8, r0
 800415e:	4689      	mov	r9, r1
 8004160:	2600      	movs	r6, #0
 8004162:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004166:	b914      	cbnz	r4, 800416e <_fwalk_reent+0x16>
 8004168:	4630      	mov	r0, r6
 800416a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800416e:	68a5      	ldr	r5, [r4, #8]
 8004170:	6867      	ldr	r7, [r4, #4]
 8004172:	3f01      	subs	r7, #1
 8004174:	d501      	bpl.n	800417a <_fwalk_reent+0x22>
 8004176:	6824      	ldr	r4, [r4, #0]
 8004178:	e7f5      	b.n	8004166 <_fwalk_reent+0xe>
 800417a:	89ab      	ldrh	r3, [r5, #12]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d907      	bls.n	8004190 <_fwalk_reent+0x38>
 8004180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004184:	3301      	adds	r3, #1
 8004186:	d003      	beq.n	8004190 <_fwalk_reent+0x38>
 8004188:	4629      	mov	r1, r5
 800418a:	4640      	mov	r0, r8
 800418c:	47c8      	blx	r9
 800418e:	4306      	orrs	r6, r0
 8004190:	3568      	adds	r5, #104	; 0x68
 8004192:	e7ee      	b.n	8004172 <_fwalk_reent+0x1a>

08004194 <_localeconv_r>:
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <_localeconv_r+0x14>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6a18      	ldr	r0, [r3, #32]
 800419a:	4b04      	ldr	r3, [pc, #16]	; (80041ac <_localeconv_r+0x18>)
 800419c:	2800      	cmp	r0, #0
 800419e:	bf08      	it	eq
 80041a0:	4618      	moveq	r0, r3
 80041a2:	30f0      	adds	r0, #240	; 0xf0
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	2000000c 	.word	0x2000000c
 80041ac:	20000070 	.word	0x20000070

080041b0 <malloc>:
 80041b0:	4b02      	ldr	r3, [pc, #8]	; (80041bc <malloc+0xc>)
 80041b2:	4601      	mov	r1, r0
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	f000 bb47 	b.w	8004848 <_malloc_r>
 80041ba:	bf00      	nop
 80041bc:	2000000c 	.word	0x2000000c

080041c0 <memchr>:
 80041c0:	b510      	push	{r4, lr}
 80041c2:	b2c9      	uxtb	r1, r1
 80041c4:	4402      	add	r2, r0
 80041c6:	4290      	cmp	r0, r2
 80041c8:	4603      	mov	r3, r0
 80041ca:	d101      	bne.n	80041d0 <memchr+0x10>
 80041cc:	2000      	movs	r0, #0
 80041ce:	bd10      	pop	{r4, pc}
 80041d0:	781c      	ldrb	r4, [r3, #0]
 80041d2:	3001      	adds	r0, #1
 80041d4:	428c      	cmp	r4, r1
 80041d6:	d1f6      	bne.n	80041c6 <memchr+0x6>
 80041d8:	4618      	mov	r0, r3
 80041da:	bd10      	pop	{r4, pc}

080041dc <memcpy>:
 80041dc:	b510      	push	{r4, lr}
 80041de:	1e43      	subs	r3, r0, #1
 80041e0:	440a      	add	r2, r1
 80041e2:	4291      	cmp	r1, r2
 80041e4:	d100      	bne.n	80041e8 <memcpy+0xc>
 80041e6:	bd10      	pop	{r4, pc}
 80041e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041f0:	e7f7      	b.n	80041e2 <memcpy+0x6>

080041f2 <_Balloc>:
 80041f2:	b570      	push	{r4, r5, r6, lr}
 80041f4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80041f6:	4604      	mov	r4, r0
 80041f8:	460e      	mov	r6, r1
 80041fa:	b93d      	cbnz	r5, 800420c <_Balloc+0x1a>
 80041fc:	2010      	movs	r0, #16
 80041fe:	f7ff ffd7 	bl	80041b0 <malloc>
 8004202:	6260      	str	r0, [r4, #36]	; 0x24
 8004204:	6045      	str	r5, [r0, #4]
 8004206:	6085      	str	r5, [r0, #8]
 8004208:	6005      	str	r5, [r0, #0]
 800420a:	60c5      	str	r5, [r0, #12]
 800420c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800420e:	68eb      	ldr	r3, [r5, #12]
 8004210:	b183      	cbz	r3, 8004234 <_Balloc+0x42>
 8004212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800421a:	b9b8      	cbnz	r0, 800424c <_Balloc+0x5a>
 800421c:	2101      	movs	r1, #1
 800421e:	fa01 f506 	lsl.w	r5, r1, r6
 8004222:	1d6a      	adds	r2, r5, #5
 8004224:	0092      	lsls	r2, r2, #2
 8004226:	4620      	mov	r0, r4
 8004228:	f000 fab3 	bl	8004792 <_calloc_r>
 800422c:	b160      	cbz	r0, 8004248 <_Balloc+0x56>
 800422e:	6046      	str	r6, [r0, #4]
 8004230:	6085      	str	r5, [r0, #8]
 8004232:	e00e      	b.n	8004252 <_Balloc+0x60>
 8004234:	2221      	movs	r2, #33	; 0x21
 8004236:	2104      	movs	r1, #4
 8004238:	4620      	mov	r0, r4
 800423a:	f000 faaa 	bl	8004792 <_calloc_r>
 800423e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004240:	60e8      	str	r0, [r5, #12]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e4      	bne.n	8004212 <_Balloc+0x20>
 8004248:	2000      	movs	r0, #0
 800424a:	bd70      	pop	{r4, r5, r6, pc}
 800424c:	6802      	ldr	r2, [r0, #0]
 800424e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004252:	2300      	movs	r3, #0
 8004254:	6103      	str	r3, [r0, #16]
 8004256:	60c3      	str	r3, [r0, #12]
 8004258:	bd70      	pop	{r4, r5, r6, pc}

0800425a <_Bfree>:
 800425a:	b570      	push	{r4, r5, r6, lr}
 800425c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800425e:	4606      	mov	r6, r0
 8004260:	460d      	mov	r5, r1
 8004262:	b93c      	cbnz	r4, 8004274 <_Bfree+0x1a>
 8004264:	2010      	movs	r0, #16
 8004266:	f7ff ffa3 	bl	80041b0 <malloc>
 800426a:	6270      	str	r0, [r6, #36]	; 0x24
 800426c:	6044      	str	r4, [r0, #4]
 800426e:	6084      	str	r4, [r0, #8]
 8004270:	6004      	str	r4, [r0, #0]
 8004272:	60c4      	str	r4, [r0, #12]
 8004274:	b13d      	cbz	r5, 8004286 <_Bfree+0x2c>
 8004276:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004278:	686a      	ldr	r2, [r5, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004280:	6029      	str	r1, [r5, #0]
 8004282:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004286:	bd70      	pop	{r4, r5, r6, pc}

08004288 <__multadd>:
 8004288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800428c:	461f      	mov	r7, r3
 800428e:	4606      	mov	r6, r0
 8004290:	460c      	mov	r4, r1
 8004292:	2300      	movs	r3, #0
 8004294:	690d      	ldr	r5, [r1, #16]
 8004296:	f101 0e14 	add.w	lr, r1, #20
 800429a:	f8de 0000 	ldr.w	r0, [lr]
 800429e:	3301      	adds	r3, #1
 80042a0:	b281      	uxth	r1, r0
 80042a2:	fb02 7101 	mla	r1, r2, r1, r7
 80042a6:	0c00      	lsrs	r0, r0, #16
 80042a8:	0c0f      	lsrs	r7, r1, #16
 80042aa:	fb02 7000 	mla	r0, r2, r0, r7
 80042ae:	b289      	uxth	r1, r1
 80042b0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80042b4:	429d      	cmp	r5, r3
 80042b6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80042ba:	f84e 1b04 	str.w	r1, [lr], #4
 80042be:	dcec      	bgt.n	800429a <__multadd+0x12>
 80042c0:	b1d7      	cbz	r7, 80042f8 <__multadd+0x70>
 80042c2:	68a3      	ldr	r3, [r4, #8]
 80042c4:	429d      	cmp	r5, r3
 80042c6:	db12      	blt.n	80042ee <__multadd+0x66>
 80042c8:	6861      	ldr	r1, [r4, #4]
 80042ca:	4630      	mov	r0, r6
 80042cc:	3101      	adds	r1, #1
 80042ce:	f7ff ff90 	bl	80041f2 <_Balloc>
 80042d2:	4680      	mov	r8, r0
 80042d4:	6922      	ldr	r2, [r4, #16]
 80042d6:	f104 010c 	add.w	r1, r4, #12
 80042da:	3202      	adds	r2, #2
 80042dc:	0092      	lsls	r2, r2, #2
 80042de:	300c      	adds	r0, #12
 80042e0:	f7ff ff7c 	bl	80041dc <memcpy>
 80042e4:	4621      	mov	r1, r4
 80042e6:	4630      	mov	r0, r6
 80042e8:	f7ff ffb7 	bl	800425a <_Bfree>
 80042ec:	4644      	mov	r4, r8
 80042ee:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80042f2:	3501      	adds	r5, #1
 80042f4:	615f      	str	r7, [r3, #20]
 80042f6:	6125      	str	r5, [r4, #16]
 80042f8:	4620      	mov	r0, r4
 80042fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080042fe <__hi0bits>:
 80042fe:	0c02      	lsrs	r2, r0, #16
 8004300:	0412      	lsls	r2, r2, #16
 8004302:	4603      	mov	r3, r0
 8004304:	b9b2      	cbnz	r2, 8004334 <__hi0bits+0x36>
 8004306:	0403      	lsls	r3, r0, #16
 8004308:	2010      	movs	r0, #16
 800430a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800430e:	bf04      	itt	eq
 8004310:	021b      	lsleq	r3, r3, #8
 8004312:	3008      	addeq	r0, #8
 8004314:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004318:	bf04      	itt	eq
 800431a:	011b      	lsleq	r3, r3, #4
 800431c:	3004      	addeq	r0, #4
 800431e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004322:	bf04      	itt	eq
 8004324:	009b      	lsleq	r3, r3, #2
 8004326:	3002      	addeq	r0, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	db06      	blt.n	800433a <__hi0bits+0x3c>
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	d503      	bpl.n	8004338 <__hi0bits+0x3a>
 8004330:	3001      	adds	r0, #1
 8004332:	4770      	bx	lr
 8004334:	2000      	movs	r0, #0
 8004336:	e7e8      	b.n	800430a <__hi0bits+0xc>
 8004338:	2020      	movs	r0, #32
 800433a:	4770      	bx	lr

0800433c <__lo0bits>:
 800433c:	6803      	ldr	r3, [r0, #0]
 800433e:	4601      	mov	r1, r0
 8004340:	f013 0207 	ands.w	r2, r3, #7
 8004344:	d00b      	beq.n	800435e <__lo0bits+0x22>
 8004346:	07da      	lsls	r2, r3, #31
 8004348:	d423      	bmi.n	8004392 <__lo0bits+0x56>
 800434a:	0798      	lsls	r0, r3, #30
 800434c:	bf49      	itett	mi
 800434e:	085b      	lsrmi	r3, r3, #1
 8004350:	089b      	lsrpl	r3, r3, #2
 8004352:	2001      	movmi	r0, #1
 8004354:	600b      	strmi	r3, [r1, #0]
 8004356:	bf5c      	itt	pl
 8004358:	600b      	strpl	r3, [r1, #0]
 800435a:	2002      	movpl	r0, #2
 800435c:	4770      	bx	lr
 800435e:	b298      	uxth	r0, r3
 8004360:	b9a8      	cbnz	r0, 800438e <__lo0bits+0x52>
 8004362:	2010      	movs	r0, #16
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	f013 0fff 	tst.w	r3, #255	; 0xff
 800436a:	bf04      	itt	eq
 800436c:	0a1b      	lsreq	r3, r3, #8
 800436e:	3008      	addeq	r0, #8
 8004370:	071a      	lsls	r2, r3, #28
 8004372:	bf04      	itt	eq
 8004374:	091b      	lsreq	r3, r3, #4
 8004376:	3004      	addeq	r0, #4
 8004378:	079a      	lsls	r2, r3, #30
 800437a:	bf04      	itt	eq
 800437c:	089b      	lsreq	r3, r3, #2
 800437e:	3002      	addeq	r0, #2
 8004380:	07da      	lsls	r2, r3, #31
 8004382:	d402      	bmi.n	800438a <__lo0bits+0x4e>
 8004384:	085b      	lsrs	r3, r3, #1
 8004386:	d006      	beq.n	8004396 <__lo0bits+0x5a>
 8004388:	3001      	adds	r0, #1
 800438a:	600b      	str	r3, [r1, #0]
 800438c:	4770      	bx	lr
 800438e:	4610      	mov	r0, r2
 8004390:	e7e9      	b.n	8004366 <__lo0bits+0x2a>
 8004392:	2000      	movs	r0, #0
 8004394:	4770      	bx	lr
 8004396:	2020      	movs	r0, #32
 8004398:	4770      	bx	lr

0800439a <__i2b>:
 800439a:	b510      	push	{r4, lr}
 800439c:	460c      	mov	r4, r1
 800439e:	2101      	movs	r1, #1
 80043a0:	f7ff ff27 	bl	80041f2 <_Balloc>
 80043a4:	2201      	movs	r2, #1
 80043a6:	6144      	str	r4, [r0, #20]
 80043a8:	6102      	str	r2, [r0, #16]
 80043aa:	bd10      	pop	{r4, pc}

080043ac <__multiply>:
 80043ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b0:	4614      	mov	r4, r2
 80043b2:	690a      	ldr	r2, [r1, #16]
 80043b4:	6923      	ldr	r3, [r4, #16]
 80043b6:	4689      	mov	r9, r1
 80043b8:	429a      	cmp	r2, r3
 80043ba:	bfbe      	ittt	lt
 80043bc:	460b      	movlt	r3, r1
 80043be:	46a1      	movlt	r9, r4
 80043c0:	461c      	movlt	r4, r3
 80043c2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80043c6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80043ca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80043ce:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80043d2:	eb07 060a 	add.w	r6, r7, sl
 80043d6:	429e      	cmp	r6, r3
 80043d8:	bfc8      	it	gt
 80043da:	3101      	addgt	r1, #1
 80043dc:	f7ff ff09 	bl	80041f2 <_Balloc>
 80043e0:	f100 0514 	add.w	r5, r0, #20
 80043e4:	462b      	mov	r3, r5
 80043e6:	2200      	movs	r2, #0
 80043e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80043ec:	4543      	cmp	r3, r8
 80043ee:	d316      	bcc.n	800441e <__multiply+0x72>
 80043f0:	f104 0214 	add.w	r2, r4, #20
 80043f4:	f109 0114 	add.w	r1, r9, #20
 80043f8:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80043fc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	9c01      	ldr	r4, [sp, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	4294      	cmp	r4, r2
 8004408:	d80c      	bhi.n	8004424 <__multiply+0x78>
 800440a:	2e00      	cmp	r6, #0
 800440c:	dd03      	ble.n	8004416 <__multiply+0x6a>
 800440e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004412:	2b00      	cmp	r3, #0
 8004414:	d054      	beq.n	80044c0 <__multiply+0x114>
 8004416:	6106      	str	r6, [r0, #16]
 8004418:	b003      	add	sp, #12
 800441a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800441e:	f843 2b04 	str.w	r2, [r3], #4
 8004422:	e7e3      	b.n	80043ec <__multiply+0x40>
 8004424:	f8b3 a000 	ldrh.w	sl, [r3]
 8004428:	3204      	adds	r2, #4
 800442a:	f1ba 0f00 	cmp.w	sl, #0
 800442e:	d020      	beq.n	8004472 <__multiply+0xc6>
 8004430:	46ae      	mov	lr, r5
 8004432:	4689      	mov	r9, r1
 8004434:	f04f 0c00 	mov.w	ip, #0
 8004438:	f859 4b04 	ldr.w	r4, [r9], #4
 800443c:	f8be b000 	ldrh.w	fp, [lr]
 8004440:	b2a3      	uxth	r3, r4
 8004442:	fb0a b303 	mla	r3, sl, r3, fp
 8004446:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800444a:	f8de 4000 	ldr.w	r4, [lr]
 800444e:	4463      	add	r3, ip
 8004450:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004454:	fb0a c40b 	mla	r4, sl, fp, ip
 8004458:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800445c:	b29b      	uxth	r3, r3
 800445e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004462:	454f      	cmp	r7, r9
 8004464:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004468:	f84e 3b04 	str.w	r3, [lr], #4
 800446c:	d8e4      	bhi.n	8004438 <__multiply+0x8c>
 800446e:	f8ce c000 	str.w	ip, [lr]
 8004472:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004476:	f1b9 0f00 	cmp.w	r9, #0
 800447a:	d01f      	beq.n	80044bc <__multiply+0x110>
 800447c:	46ae      	mov	lr, r5
 800447e:	468c      	mov	ip, r1
 8004480:	f04f 0a00 	mov.w	sl, #0
 8004484:	682b      	ldr	r3, [r5, #0]
 8004486:	f8bc 4000 	ldrh.w	r4, [ip]
 800448a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800448e:	b29b      	uxth	r3, r3
 8004490:	fb09 b404 	mla	r4, r9, r4, fp
 8004494:	44a2      	add	sl, r4
 8004496:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800449a:	f84e 3b04 	str.w	r3, [lr], #4
 800449e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80044a2:	f8be 4000 	ldrh.w	r4, [lr]
 80044a6:	0c1b      	lsrs	r3, r3, #16
 80044a8:	fb09 4303 	mla	r3, r9, r3, r4
 80044ac:	4567      	cmp	r7, ip
 80044ae:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80044b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80044b6:	d8e6      	bhi.n	8004486 <__multiply+0xda>
 80044b8:	f8ce 3000 	str.w	r3, [lr]
 80044bc:	3504      	adds	r5, #4
 80044be:	e7a0      	b.n	8004402 <__multiply+0x56>
 80044c0:	3e01      	subs	r6, #1
 80044c2:	e7a2      	b.n	800440a <__multiply+0x5e>

080044c4 <__pow5mult>:
 80044c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044c8:	4615      	mov	r5, r2
 80044ca:	f012 0203 	ands.w	r2, r2, #3
 80044ce:	4606      	mov	r6, r0
 80044d0:	460f      	mov	r7, r1
 80044d2:	d007      	beq.n	80044e4 <__pow5mult+0x20>
 80044d4:	4c21      	ldr	r4, [pc, #132]	; (800455c <__pow5mult+0x98>)
 80044d6:	3a01      	subs	r2, #1
 80044d8:	2300      	movs	r3, #0
 80044da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80044de:	f7ff fed3 	bl	8004288 <__multadd>
 80044e2:	4607      	mov	r7, r0
 80044e4:	10ad      	asrs	r5, r5, #2
 80044e6:	d035      	beq.n	8004554 <__pow5mult+0x90>
 80044e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80044ea:	b93c      	cbnz	r4, 80044fc <__pow5mult+0x38>
 80044ec:	2010      	movs	r0, #16
 80044ee:	f7ff fe5f 	bl	80041b0 <malloc>
 80044f2:	6270      	str	r0, [r6, #36]	; 0x24
 80044f4:	6044      	str	r4, [r0, #4]
 80044f6:	6084      	str	r4, [r0, #8]
 80044f8:	6004      	str	r4, [r0, #0]
 80044fa:	60c4      	str	r4, [r0, #12]
 80044fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004500:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004504:	b94c      	cbnz	r4, 800451a <__pow5mult+0x56>
 8004506:	f240 2171 	movw	r1, #625	; 0x271
 800450a:	4630      	mov	r0, r6
 800450c:	f7ff ff45 	bl	800439a <__i2b>
 8004510:	2300      	movs	r3, #0
 8004512:	4604      	mov	r4, r0
 8004514:	f8c8 0008 	str.w	r0, [r8, #8]
 8004518:	6003      	str	r3, [r0, #0]
 800451a:	f04f 0800 	mov.w	r8, #0
 800451e:	07eb      	lsls	r3, r5, #31
 8004520:	d50a      	bpl.n	8004538 <__pow5mult+0x74>
 8004522:	4639      	mov	r1, r7
 8004524:	4622      	mov	r2, r4
 8004526:	4630      	mov	r0, r6
 8004528:	f7ff ff40 	bl	80043ac <__multiply>
 800452c:	4681      	mov	r9, r0
 800452e:	4639      	mov	r1, r7
 8004530:	4630      	mov	r0, r6
 8004532:	f7ff fe92 	bl	800425a <_Bfree>
 8004536:	464f      	mov	r7, r9
 8004538:	106d      	asrs	r5, r5, #1
 800453a:	d00b      	beq.n	8004554 <__pow5mult+0x90>
 800453c:	6820      	ldr	r0, [r4, #0]
 800453e:	b938      	cbnz	r0, 8004550 <__pow5mult+0x8c>
 8004540:	4622      	mov	r2, r4
 8004542:	4621      	mov	r1, r4
 8004544:	4630      	mov	r0, r6
 8004546:	f7ff ff31 	bl	80043ac <__multiply>
 800454a:	6020      	str	r0, [r4, #0]
 800454c:	f8c0 8000 	str.w	r8, [r0]
 8004550:	4604      	mov	r4, r0
 8004552:	e7e4      	b.n	800451e <__pow5mult+0x5a>
 8004554:	4638      	mov	r0, r7
 8004556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800455a:	bf00      	nop
 800455c:	080052f0 	.word	0x080052f0

08004560 <__lshift>:
 8004560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004564:	460c      	mov	r4, r1
 8004566:	4607      	mov	r7, r0
 8004568:	4616      	mov	r6, r2
 800456a:	6923      	ldr	r3, [r4, #16]
 800456c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004570:	eb0a 0903 	add.w	r9, sl, r3
 8004574:	6849      	ldr	r1, [r1, #4]
 8004576:	68a3      	ldr	r3, [r4, #8]
 8004578:	f109 0501 	add.w	r5, r9, #1
 800457c:	42ab      	cmp	r3, r5
 800457e:	db31      	blt.n	80045e4 <__lshift+0x84>
 8004580:	4638      	mov	r0, r7
 8004582:	f7ff fe36 	bl	80041f2 <_Balloc>
 8004586:	2200      	movs	r2, #0
 8004588:	4680      	mov	r8, r0
 800458a:	4611      	mov	r1, r2
 800458c:	f100 0314 	add.w	r3, r0, #20
 8004590:	4552      	cmp	r2, sl
 8004592:	db2a      	blt.n	80045ea <__lshift+0x8a>
 8004594:	6920      	ldr	r0, [r4, #16]
 8004596:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800459a:	f104 0114 	add.w	r1, r4, #20
 800459e:	f016 021f 	ands.w	r2, r6, #31
 80045a2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80045a6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80045aa:	d022      	beq.n	80045f2 <__lshift+0x92>
 80045ac:	2000      	movs	r0, #0
 80045ae:	f1c2 0c20 	rsb	ip, r2, #32
 80045b2:	680e      	ldr	r6, [r1, #0]
 80045b4:	4096      	lsls	r6, r2
 80045b6:	4330      	orrs	r0, r6
 80045b8:	f843 0b04 	str.w	r0, [r3], #4
 80045bc:	f851 0b04 	ldr.w	r0, [r1], #4
 80045c0:	458e      	cmp	lr, r1
 80045c2:	fa20 f00c 	lsr.w	r0, r0, ip
 80045c6:	d8f4      	bhi.n	80045b2 <__lshift+0x52>
 80045c8:	6018      	str	r0, [r3, #0]
 80045ca:	b108      	cbz	r0, 80045d0 <__lshift+0x70>
 80045cc:	f109 0502 	add.w	r5, r9, #2
 80045d0:	3d01      	subs	r5, #1
 80045d2:	4638      	mov	r0, r7
 80045d4:	f8c8 5010 	str.w	r5, [r8, #16]
 80045d8:	4621      	mov	r1, r4
 80045da:	f7ff fe3e 	bl	800425a <_Bfree>
 80045de:	4640      	mov	r0, r8
 80045e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e4:	3101      	adds	r1, #1
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	e7c8      	b.n	800457c <__lshift+0x1c>
 80045ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80045ee:	3201      	adds	r2, #1
 80045f0:	e7ce      	b.n	8004590 <__lshift+0x30>
 80045f2:	3b04      	subs	r3, #4
 80045f4:	f851 2b04 	ldr.w	r2, [r1], #4
 80045f8:	458e      	cmp	lr, r1
 80045fa:	f843 2f04 	str.w	r2, [r3, #4]!
 80045fe:	d8f9      	bhi.n	80045f4 <__lshift+0x94>
 8004600:	e7e6      	b.n	80045d0 <__lshift+0x70>

08004602 <__mcmp>:
 8004602:	6903      	ldr	r3, [r0, #16]
 8004604:	690a      	ldr	r2, [r1, #16]
 8004606:	b530      	push	{r4, r5, lr}
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	d10c      	bne.n	8004626 <__mcmp+0x24>
 800460c:	0092      	lsls	r2, r2, #2
 800460e:	3014      	adds	r0, #20
 8004610:	3114      	adds	r1, #20
 8004612:	1884      	adds	r4, r0, r2
 8004614:	4411      	add	r1, r2
 8004616:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800461a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800461e:	4295      	cmp	r5, r2
 8004620:	d003      	beq.n	800462a <__mcmp+0x28>
 8004622:	d305      	bcc.n	8004630 <__mcmp+0x2e>
 8004624:	2301      	movs	r3, #1
 8004626:	4618      	mov	r0, r3
 8004628:	bd30      	pop	{r4, r5, pc}
 800462a:	42a0      	cmp	r0, r4
 800462c:	d3f3      	bcc.n	8004616 <__mcmp+0x14>
 800462e:	e7fa      	b.n	8004626 <__mcmp+0x24>
 8004630:	f04f 33ff 	mov.w	r3, #4294967295
 8004634:	e7f7      	b.n	8004626 <__mcmp+0x24>

08004636 <__mdiff>:
 8004636:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800463a:	460d      	mov	r5, r1
 800463c:	4607      	mov	r7, r0
 800463e:	4611      	mov	r1, r2
 8004640:	4628      	mov	r0, r5
 8004642:	4614      	mov	r4, r2
 8004644:	f7ff ffdd 	bl	8004602 <__mcmp>
 8004648:	1e06      	subs	r6, r0, #0
 800464a:	d108      	bne.n	800465e <__mdiff+0x28>
 800464c:	4631      	mov	r1, r6
 800464e:	4638      	mov	r0, r7
 8004650:	f7ff fdcf 	bl	80041f2 <_Balloc>
 8004654:	2301      	movs	r3, #1
 8004656:	6146      	str	r6, [r0, #20]
 8004658:	6103      	str	r3, [r0, #16]
 800465a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800465e:	bfa4      	itt	ge
 8004660:	4623      	movge	r3, r4
 8004662:	462c      	movge	r4, r5
 8004664:	4638      	mov	r0, r7
 8004666:	6861      	ldr	r1, [r4, #4]
 8004668:	bfa6      	itte	ge
 800466a:	461d      	movge	r5, r3
 800466c:	2600      	movge	r6, #0
 800466e:	2601      	movlt	r6, #1
 8004670:	f7ff fdbf 	bl	80041f2 <_Balloc>
 8004674:	f04f 0c00 	mov.w	ip, #0
 8004678:	60c6      	str	r6, [r0, #12]
 800467a:	692b      	ldr	r3, [r5, #16]
 800467c:	6926      	ldr	r6, [r4, #16]
 800467e:	f104 0214 	add.w	r2, r4, #20
 8004682:	f105 0914 	add.w	r9, r5, #20
 8004686:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800468a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800468e:	f100 0114 	add.w	r1, r0, #20
 8004692:	f852 ab04 	ldr.w	sl, [r2], #4
 8004696:	f859 5b04 	ldr.w	r5, [r9], #4
 800469a:	fa1f f38a 	uxth.w	r3, sl
 800469e:	4463      	add	r3, ip
 80046a0:	b2ac      	uxth	r4, r5
 80046a2:	1b1b      	subs	r3, r3, r4
 80046a4:	0c2c      	lsrs	r4, r5, #16
 80046a6:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80046aa:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80046b4:	45c8      	cmp	r8, r9
 80046b6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80046ba:	4696      	mov	lr, r2
 80046bc:	f841 4b04 	str.w	r4, [r1], #4
 80046c0:	d8e7      	bhi.n	8004692 <__mdiff+0x5c>
 80046c2:	45be      	cmp	lr, r7
 80046c4:	d305      	bcc.n	80046d2 <__mdiff+0x9c>
 80046c6:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80046ca:	b18b      	cbz	r3, 80046f0 <__mdiff+0xba>
 80046cc:	6106      	str	r6, [r0, #16]
 80046ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80046d6:	b2a2      	uxth	r2, r4
 80046d8:	4462      	add	r2, ip
 80046da:	1413      	asrs	r3, r2, #16
 80046dc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80046e0:	b292      	uxth	r2, r2
 80046e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80046e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80046ea:	f841 2b04 	str.w	r2, [r1], #4
 80046ee:	e7e8      	b.n	80046c2 <__mdiff+0x8c>
 80046f0:	3e01      	subs	r6, #1
 80046f2:	e7e8      	b.n	80046c6 <__mdiff+0x90>

080046f4 <__d2b>:
 80046f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80046f8:	461c      	mov	r4, r3
 80046fa:	2101      	movs	r1, #1
 80046fc:	4690      	mov	r8, r2
 80046fe:	9e08      	ldr	r6, [sp, #32]
 8004700:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004702:	f7ff fd76 	bl	80041f2 <_Balloc>
 8004706:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800470a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800470e:	4607      	mov	r7, r0
 8004710:	bb34      	cbnz	r4, 8004760 <__d2b+0x6c>
 8004712:	9201      	str	r2, [sp, #4]
 8004714:	f1b8 0f00 	cmp.w	r8, #0
 8004718:	d027      	beq.n	800476a <__d2b+0x76>
 800471a:	a802      	add	r0, sp, #8
 800471c:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004720:	f7ff fe0c 	bl	800433c <__lo0bits>
 8004724:	9900      	ldr	r1, [sp, #0]
 8004726:	b1f0      	cbz	r0, 8004766 <__d2b+0x72>
 8004728:	9a01      	ldr	r2, [sp, #4]
 800472a:	f1c0 0320 	rsb	r3, r0, #32
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	430b      	orrs	r3, r1
 8004734:	40c2      	lsrs	r2, r0
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	9201      	str	r2, [sp, #4]
 800473a:	9b01      	ldr	r3, [sp, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf14      	ite	ne
 8004740:	2102      	movne	r1, #2
 8004742:	2101      	moveq	r1, #1
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	6139      	str	r1, [r7, #16]
 8004748:	b1c4      	cbz	r4, 800477c <__d2b+0x88>
 800474a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800474e:	4404      	add	r4, r0
 8004750:	6034      	str	r4, [r6, #0]
 8004752:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004756:	6028      	str	r0, [r5, #0]
 8004758:	4638      	mov	r0, r7
 800475a:	b002      	add	sp, #8
 800475c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004760:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004764:	e7d5      	b.n	8004712 <__d2b+0x1e>
 8004766:	6179      	str	r1, [r7, #20]
 8004768:	e7e7      	b.n	800473a <__d2b+0x46>
 800476a:	a801      	add	r0, sp, #4
 800476c:	f7ff fde6 	bl	800433c <__lo0bits>
 8004770:	2101      	movs	r1, #1
 8004772:	9b01      	ldr	r3, [sp, #4]
 8004774:	6139      	str	r1, [r7, #16]
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	3020      	adds	r0, #32
 800477a:	e7e5      	b.n	8004748 <__d2b+0x54>
 800477c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004780:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004784:	6030      	str	r0, [r6, #0]
 8004786:	6918      	ldr	r0, [r3, #16]
 8004788:	f7ff fdb9 	bl	80042fe <__hi0bits>
 800478c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004790:	e7e1      	b.n	8004756 <__d2b+0x62>

08004792 <_calloc_r>:
 8004792:	b538      	push	{r3, r4, r5, lr}
 8004794:	fb02 f401 	mul.w	r4, r2, r1
 8004798:	4621      	mov	r1, r4
 800479a:	f000 f855 	bl	8004848 <_malloc_r>
 800479e:	4605      	mov	r5, r0
 80047a0:	b118      	cbz	r0, 80047aa <_calloc_r+0x18>
 80047a2:	4622      	mov	r2, r4
 80047a4:	2100      	movs	r1, #0
 80047a6:	f7fe f947 	bl	8002a38 <memset>
 80047aa:	4628      	mov	r0, r5
 80047ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080047b0 <_free_r>:
 80047b0:	b538      	push	{r3, r4, r5, lr}
 80047b2:	4605      	mov	r5, r0
 80047b4:	2900      	cmp	r1, #0
 80047b6:	d043      	beq.n	8004840 <_free_r+0x90>
 80047b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047bc:	1f0c      	subs	r4, r1, #4
 80047be:	2b00      	cmp	r3, #0
 80047c0:	bfb8      	it	lt
 80047c2:	18e4      	addlt	r4, r4, r3
 80047c4:	f000 fc4c 	bl	8005060 <__malloc_lock>
 80047c8:	4a1e      	ldr	r2, [pc, #120]	; (8004844 <_free_r+0x94>)
 80047ca:	6813      	ldr	r3, [r2, #0]
 80047cc:	4610      	mov	r0, r2
 80047ce:	b933      	cbnz	r3, 80047de <_free_r+0x2e>
 80047d0:	6063      	str	r3, [r4, #4]
 80047d2:	6014      	str	r4, [r2, #0]
 80047d4:	4628      	mov	r0, r5
 80047d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047da:	f000 bc42 	b.w	8005062 <__malloc_unlock>
 80047de:	42a3      	cmp	r3, r4
 80047e0:	d90b      	bls.n	80047fa <_free_r+0x4a>
 80047e2:	6821      	ldr	r1, [r4, #0]
 80047e4:	1862      	adds	r2, r4, r1
 80047e6:	4293      	cmp	r3, r2
 80047e8:	bf01      	itttt	eq
 80047ea:	681a      	ldreq	r2, [r3, #0]
 80047ec:	685b      	ldreq	r3, [r3, #4]
 80047ee:	1852      	addeq	r2, r2, r1
 80047f0:	6022      	streq	r2, [r4, #0]
 80047f2:	6063      	str	r3, [r4, #4]
 80047f4:	6004      	str	r4, [r0, #0]
 80047f6:	e7ed      	b.n	80047d4 <_free_r+0x24>
 80047f8:	4613      	mov	r3, r2
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	b10a      	cbz	r2, 8004802 <_free_r+0x52>
 80047fe:	42a2      	cmp	r2, r4
 8004800:	d9fa      	bls.n	80047f8 <_free_r+0x48>
 8004802:	6819      	ldr	r1, [r3, #0]
 8004804:	1858      	adds	r0, r3, r1
 8004806:	42a0      	cmp	r0, r4
 8004808:	d10b      	bne.n	8004822 <_free_r+0x72>
 800480a:	6820      	ldr	r0, [r4, #0]
 800480c:	4401      	add	r1, r0
 800480e:	1858      	adds	r0, r3, r1
 8004810:	4282      	cmp	r2, r0
 8004812:	6019      	str	r1, [r3, #0]
 8004814:	d1de      	bne.n	80047d4 <_free_r+0x24>
 8004816:	6810      	ldr	r0, [r2, #0]
 8004818:	6852      	ldr	r2, [r2, #4]
 800481a:	4401      	add	r1, r0
 800481c:	6019      	str	r1, [r3, #0]
 800481e:	605a      	str	r2, [r3, #4]
 8004820:	e7d8      	b.n	80047d4 <_free_r+0x24>
 8004822:	d902      	bls.n	800482a <_free_r+0x7a>
 8004824:	230c      	movs	r3, #12
 8004826:	602b      	str	r3, [r5, #0]
 8004828:	e7d4      	b.n	80047d4 <_free_r+0x24>
 800482a:	6820      	ldr	r0, [r4, #0]
 800482c:	1821      	adds	r1, r4, r0
 800482e:	428a      	cmp	r2, r1
 8004830:	bf01      	itttt	eq
 8004832:	6811      	ldreq	r1, [r2, #0]
 8004834:	6852      	ldreq	r2, [r2, #4]
 8004836:	1809      	addeq	r1, r1, r0
 8004838:	6021      	streq	r1, [r4, #0]
 800483a:	6062      	str	r2, [r4, #4]
 800483c:	605c      	str	r4, [r3, #4]
 800483e:	e7c9      	b.n	80047d4 <_free_r+0x24>
 8004840:	bd38      	pop	{r3, r4, r5, pc}
 8004842:	bf00      	nop
 8004844:	200001fc 	.word	0x200001fc

08004848 <_malloc_r>:
 8004848:	b570      	push	{r4, r5, r6, lr}
 800484a:	1ccd      	adds	r5, r1, #3
 800484c:	f025 0503 	bic.w	r5, r5, #3
 8004850:	3508      	adds	r5, #8
 8004852:	2d0c      	cmp	r5, #12
 8004854:	bf38      	it	cc
 8004856:	250c      	movcc	r5, #12
 8004858:	2d00      	cmp	r5, #0
 800485a:	4606      	mov	r6, r0
 800485c:	db01      	blt.n	8004862 <_malloc_r+0x1a>
 800485e:	42a9      	cmp	r1, r5
 8004860:	d903      	bls.n	800486a <_malloc_r+0x22>
 8004862:	230c      	movs	r3, #12
 8004864:	6033      	str	r3, [r6, #0]
 8004866:	2000      	movs	r0, #0
 8004868:	bd70      	pop	{r4, r5, r6, pc}
 800486a:	f000 fbf9 	bl	8005060 <__malloc_lock>
 800486e:	4a23      	ldr	r2, [pc, #140]	; (80048fc <_malloc_r+0xb4>)
 8004870:	6814      	ldr	r4, [r2, #0]
 8004872:	4621      	mov	r1, r4
 8004874:	b991      	cbnz	r1, 800489c <_malloc_r+0x54>
 8004876:	4c22      	ldr	r4, [pc, #136]	; (8004900 <_malloc_r+0xb8>)
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	b91b      	cbnz	r3, 8004884 <_malloc_r+0x3c>
 800487c:	4630      	mov	r0, r6
 800487e:	f000 f97f 	bl	8004b80 <_sbrk_r>
 8004882:	6020      	str	r0, [r4, #0]
 8004884:	4629      	mov	r1, r5
 8004886:	4630      	mov	r0, r6
 8004888:	f000 f97a 	bl	8004b80 <_sbrk_r>
 800488c:	1c43      	adds	r3, r0, #1
 800488e:	d126      	bne.n	80048de <_malloc_r+0x96>
 8004890:	230c      	movs	r3, #12
 8004892:	4630      	mov	r0, r6
 8004894:	6033      	str	r3, [r6, #0]
 8004896:	f000 fbe4 	bl	8005062 <__malloc_unlock>
 800489a:	e7e4      	b.n	8004866 <_malloc_r+0x1e>
 800489c:	680b      	ldr	r3, [r1, #0]
 800489e:	1b5b      	subs	r3, r3, r5
 80048a0:	d41a      	bmi.n	80048d8 <_malloc_r+0x90>
 80048a2:	2b0b      	cmp	r3, #11
 80048a4:	d90f      	bls.n	80048c6 <_malloc_r+0x7e>
 80048a6:	600b      	str	r3, [r1, #0]
 80048a8:	18cc      	adds	r4, r1, r3
 80048aa:	50cd      	str	r5, [r1, r3]
 80048ac:	4630      	mov	r0, r6
 80048ae:	f000 fbd8 	bl	8005062 <__malloc_unlock>
 80048b2:	f104 000b 	add.w	r0, r4, #11
 80048b6:	1d23      	adds	r3, r4, #4
 80048b8:	f020 0007 	bic.w	r0, r0, #7
 80048bc:	1ac3      	subs	r3, r0, r3
 80048be:	d01b      	beq.n	80048f8 <_malloc_r+0xb0>
 80048c0:	425a      	negs	r2, r3
 80048c2:	50e2      	str	r2, [r4, r3]
 80048c4:	bd70      	pop	{r4, r5, r6, pc}
 80048c6:	428c      	cmp	r4, r1
 80048c8:	bf0b      	itete	eq
 80048ca:	6863      	ldreq	r3, [r4, #4]
 80048cc:	684b      	ldrne	r3, [r1, #4]
 80048ce:	6013      	streq	r3, [r2, #0]
 80048d0:	6063      	strne	r3, [r4, #4]
 80048d2:	bf18      	it	ne
 80048d4:	460c      	movne	r4, r1
 80048d6:	e7e9      	b.n	80048ac <_malloc_r+0x64>
 80048d8:	460c      	mov	r4, r1
 80048da:	6849      	ldr	r1, [r1, #4]
 80048dc:	e7ca      	b.n	8004874 <_malloc_r+0x2c>
 80048de:	1cc4      	adds	r4, r0, #3
 80048e0:	f024 0403 	bic.w	r4, r4, #3
 80048e4:	42a0      	cmp	r0, r4
 80048e6:	d005      	beq.n	80048f4 <_malloc_r+0xac>
 80048e8:	1a21      	subs	r1, r4, r0
 80048ea:	4630      	mov	r0, r6
 80048ec:	f000 f948 	bl	8004b80 <_sbrk_r>
 80048f0:	3001      	adds	r0, #1
 80048f2:	d0cd      	beq.n	8004890 <_malloc_r+0x48>
 80048f4:	6025      	str	r5, [r4, #0]
 80048f6:	e7d9      	b.n	80048ac <_malloc_r+0x64>
 80048f8:	bd70      	pop	{r4, r5, r6, pc}
 80048fa:	bf00      	nop
 80048fc:	200001fc 	.word	0x200001fc
 8004900:	20000200 	.word	0x20000200

08004904 <__sfputc_r>:
 8004904:	6893      	ldr	r3, [r2, #8]
 8004906:	b410      	push	{r4}
 8004908:	3b01      	subs	r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	6093      	str	r3, [r2, #8]
 800490e:	da08      	bge.n	8004922 <__sfputc_r+0x1e>
 8004910:	6994      	ldr	r4, [r2, #24]
 8004912:	42a3      	cmp	r3, r4
 8004914:	db02      	blt.n	800491c <__sfputc_r+0x18>
 8004916:	b2cb      	uxtb	r3, r1
 8004918:	2b0a      	cmp	r3, #10
 800491a:	d102      	bne.n	8004922 <__sfputc_r+0x1e>
 800491c:	bc10      	pop	{r4}
 800491e:	f000 b983 	b.w	8004c28 <__swbuf_r>
 8004922:	6813      	ldr	r3, [r2, #0]
 8004924:	1c58      	adds	r0, r3, #1
 8004926:	6010      	str	r0, [r2, #0]
 8004928:	7019      	strb	r1, [r3, #0]
 800492a:	b2c8      	uxtb	r0, r1
 800492c:	bc10      	pop	{r4}
 800492e:	4770      	bx	lr

08004930 <__sfputs_r>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	4606      	mov	r6, r0
 8004934:	460f      	mov	r7, r1
 8004936:	4614      	mov	r4, r2
 8004938:	18d5      	adds	r5, r2, r3
 800493a:	42ac      	cmp	r4, r5
 800493c:	d101      	bne.n	8004942 <__sfputs_r+0x12>
 800493e:	2000      	movs	r0, #0
 8004940:	e007      	b.n	8004952 <__sfputs_r+0x22>
 8004942:	463a      	mov	r2, r7
 8004944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004948:	4630      	mov	r0, r6
 800494a:	f7ff ffdb 	bl	8004904 <__sfputc_r>
 800494e:	1c43      	adds	r3, r0, #1
 8004950:	d1f3      	bne.n	800493a <__sfputs_r+0xa>
 8004952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004954 <_vfiprintf_r>:
 8004954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004958:	b09d      	sub	sp, #116	; 0x74
 800495a:	460c      	mov	r4, r1
 800495c:	4617      	mov	r7, r2
 800495e:	9303      	str	r3, [sp, #12]
 8004960:	4606      	mov	r6, r0
 8004962:	b118      	cbz	r0, 800496c <_vfiprintf_r+0x18>
 8004964:	6983      	ldr	r3, [r0, #24]
 8004966:	b90b      	cbnz	r3, 800496c <_vfiprintf_r+0x18>
 8004968:	f7ff fb8a 	bl	8004080 <__sinit>
 800496c:	4b7c      	ldr	r3, [pc, #496]	; (8004b60 <_vfiprintf_r+0x20c>)
 800496e:	429c      	cmp	r4, r3
 8004970:	d157      	bne.n	8004a22 <_vfiprintf_r+0xce>
 8004972:	6874      	ldr	r4, [r6, #4]
 8004974:	89a3      	ldrh	r3, [r4, #12]
 8004976:	0718      	lsls	r0, r3, #28
 8004978:	d55d      	bpl.n	8004a36 <_vfiprintf_r+0xe2>
 800497a:	6923      	ldr	r3, [r4, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d05a      	beq.n	8004a36 <_vfiprintf_r+0xe2>
 8004980:	2300      	movs	r3, #0
 8004982:	9309      	str	r3, [sp, #36]	; 0x24
 8004984:	2320      	movs	r3, #32
 8004986:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800498a:	2330      	movs	r3, #48	; 0x30
 800498c:	f04f 0b01 	mov.w	fp, #1
 8004990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004994:	46b8      	mov	r8, r7
 8004996:	4645      	mov	r5, r8
 8004998:	f815 3b01 	ldrb.w	r3, [r5], #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d155      	bne.n	8004a4c <_vfiprintf_r+0xf8>
 80049a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80049a4:	d00b      	beq.n	80049be <_vfiprintf_r+0x6a>
 80049a6:	4653      	mov	r3, sl
 80049a8:	463a      	mov	r2, r7
 80049aa:	4621      	mov	r1, r4
 80049ac:	4630      	mov	r0, r6
 80049ae:	f7ff ffbf 	bl	8004930 <__sfputs_r>
 80049b2:	3001      	adds	r0, #1
 80049b4:	f000 80c4 	beq.w	8004b40 <_vfiprintf_r+0x1ec>
 80049b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ba:	4453      	add	r3, sl
 80049bc:	9309      	str	r3, [sp, #36]	; 0x24
 80049be:	f898 3000 	ldrb.w	r3, [r8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 80bc 	beq.w	8004b40 <_vfiprintf_r+0x1ec>
 80049c8:	2300      	movs	r3, #0
 80049ca:	f04f 32ff 	mov.w	r2, #4294967295
 80049ce:	9304      	str	r3, [sp, #16]
 80049d0:	9307      	str	r3, [sp, #28]
 80049d2:	9205      	str	r2, [sp, #20]
 80049d4:	9306      	str	r3, [sp, #24]
 80049d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049da:	931a      	str	r3, [sp, #104]	; 0x68
 80049dc:	2205      	movs	r2, #5
 80049de:	7829      	ldrb	r1, [r5, #0]
 80049e0:	4860      	ldr	r0, [pc, #384]	; (8004b64 <_vfiprintf_r+0x210>)
 80049e2:	f7ff fbed 	bl	80041c0 <memchr>
 80049e6:	f105 0801 	add.w	r8, r5, #1
 80049ea:	9b04      	ldr	r3, [sp, #16]
 80049ec:	2800      	cmp	r0, #0
 80049ee:	d131      	bne.n	8004a54 <_vfiprintf_r+0x100>
 80049f0:	06d9      	lsls	r1, r3, #27
 80049f2:	bf44      	itt	mi
 80049f4:	2220      	movmi	r2, #32
 80049f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049fa:	071a      	lsls	r2, r3, #28
 80049fc:	bf44      	itt	mi
 80049fe:	222b      	movmi	r2, #43	; 0x2b
 8004a00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a04:	782a      	ldrb	r2, [r5, #0]
 8004a06:	2a2a      	cmp	r2, #42	; 0x2a
 8004a08:	d02c      	beq.n	8004a64 <_vfiprintf_r+0x110>
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	200a      	movs	r0, #10
 8004a0e:	9a07      	ldr	r2, [sp, #28]
 8004a10:	46a8      	mov	r8, r5
 8004a12:	f898 3000 	ldrb.w	r3, [r8]
 8004a16:	3501      	adds	r5, #1
 8004a18:	3b30      	subs	r3, #48	; 0x30
 8004a1a:	2b09      	cmp	r3, #9
 8004a1c:	d96d      	bls.n	8004afa <_vfiprintf_r+0x1a6>
 8004a1e:	b371      	cbz	r1, 8004a7e <_vfiprintf_r+0x12a>
 8004a20:	e026      	b.n	8004a70 <_vfiprintf_r+0x11c>
 8004a22:	4b51      	ldr	r3, [pc, #324]	; (8004b68 <_vfiprintf_r+0x214>)
 8004a24:	429c      	cmp	r4, r3
 8004a26:	d101      	bne.n	8004a2c <_vfiprintf_r+0xd8>
 8004a28:	68b4      	ldr	r4, [r6, #8]
 8004a2a:	e7a3      	b.n	8004974 <_vfiprintf_r+0x20>
 8004a2c:	4b4f      	ldr	r3, [pc, #316]	; (8004b6c <_vfiprintf_r+0x218>)
 8004a2e:	429c      	cmp	r4, r3
 8004a30:	bf08      	it	eq
 8004a32:	68f4      	ldreq	r4, [r6, #12]
 8004a34:	e79e      	b.n	8004974 <_vfiprintf_r+0x20>
 8004a36:	4621      	mov	r1, r4
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f000 f959 	bl	8004cf0 <__swsetup_r>
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	d09e      	beq.n	8004980 <_vfiprintf_r+0x2c>
 8004a42:	f04f 30ff 	mov.w	r0, #4294967295
 8004a46:	b01d      	add	sp, #116	; 0x74
 8004a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a4c:	2b25      	cmp	r3, #37	; 0x25
 8004a4e:	d0a7      	beq.n	80049a0 <_vfiprintf_r+0x4c>
 8004a50:	46a8      	mov	r8, r5
 8004a52:	e7a0      	b.n	8004996 <_vfiprintf_r+0x42>
 8004a54:	4a43      	ldr	r2, [pc, #268]	; (8004b64 <_vfiprintf_r+0x210>)
 8004a56:	4645      	mov	r5, r8
 8004a58:	1a80      	subs	r0, r0, r2
 8004a5a:	fa0b f000 	lsl.w	r0, fp, r0
 8004a5e:	4318      	orrs	r0, r3
 8004a60:	9004      	str	r0, [sp, #16]
 8004a62:	e7bb      	b.n	80049dc <_vfiprintf_r+0x88>
 8004a64:	9a03      	ldr	r2, [sp, #12]
 8004a66:	1d11      	adds	r1, r2, #4
 8004a68:	6812      	ldr	r2, [r2, #0]
 8004a6a:	9103      	str	r1, [sp, #12]
 8004a6c:	2a00      	cmp	r2, #0
 8004a6e:	db01      	blt.n	8004a74 <_vfiprintf_r+0x120>
 8004a70:	9207      	str	r2, [sp, #28]
 8004a72:	e004      	b.n	8004a7e <_vfiprintf_r+0x12a>
 8004a74:	4252      	negs	r2, r2
 8004a76:	f043 0302 	orr.w	r3, r3, #2
 8004a7a:	9207      	str	r2, [sp, #28]
 8004a7c:	9304      	str	r3, [sp, #16]
 8004a7e:	f898 3000 	ldrb.w	r3, [r8]
 8004a82:	2b2e      	cmp	r3, #46	; 0x2e
 8004a84:	d110      	bne.n	8004aa8 <_vfiprintf_r+0x154>
 8004a86:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004a8a:	f108 0101 	add.w	r1, r8, #1
 8004a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a90:	d137      	bne.n	8004b02 <_vfiprintf_r+0x1ae>
 8004a92:	9b03      	ldr	r3, [sp, #12]
 8004a94:	f108 0802 	add.w	r8, r8, #2
 8004a98:	1d1a      	adds	r2, r3, #4
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	9203      	str	r2, [sp, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	bfb8      	it	lt
 8004aa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004aa6:	9305      	str	r3, [sp, #20]
 8004aa8:	4d31      	ldr	r5, [pc, #196]	; (8004b70 <_vfiprintf_r+0x21c>)
 8004aaa:	2203      	movs	r2, #3
 8004aac:	f898 1000 	ldrb.w	r1, [r8]
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f7ff fb85 	bl	80041c0 <memchr>
 8004ab6:	b140      	cbz	r0, 8004aca <_vfiprintf_r+0x176>
 8004ab8:	2340      	movs	r3, #64	; 0x40
 8004aba:	1b40      	subs	r0, r0, r5
 8004abc:	fa03 f000 	lsl.w	r0, r3, r0
 8004ac0:	9b04      	ldr	r3, [sp, #16]
 8004ac2:	f108 0801 	add.w	r8, r8, #1
 8004ac6:	4303      	orrs	r3, r0
 8004ac8:	9304      	str	r3, [sp, #16]
 8004aca:	f898 1000 	ldrb.w	r1, [r8]
 8004ace:	2206      	movs	r2, #6
 8004ad0:	4828      	ldr	r0, [pc, #160]	; (8004b74 <_vfiprintf_r+0x220>)
 8004ad2:	f108 0701 	add.w	r7, r8, #1
 8004ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ada:	f7ff fb71 	bl	80041c0 <memchr>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d034      	beq.n	8004b4c <_vfiprintf_r+0x1f8>
 8004ae2:	4b25      	ldr	r3, [pc, #148]	; (8004b78 <_vfiprintf_r+0x224>)
 8004ae4:	bb03      	cbnz	r3, 8004b28 <_vfiprintf_r+0x1d4>
 8004ae6:	9b03      	ldr	r3, [sp, #12]
 8004ae8:	3307      	adds	r3, #7
 8004aea:	f023 0307 	bic.w	r3, r3, #7
 8004aee:	3308      	adds	r3, #8
 8004af0:	9303      	str	r3, [sp, #12]
 8004af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004af4:	444b      	add	r3, r9
 8004af6:	9309      	str	r3, [sp, #36]	; 0x24
 8004af8:	e74c      	b.n	8004994 <_vfiprintf_r+0x40>
 8004afa:	fb00 3202 	mla	r2, r0, r2, r3
 8004afe:	2101      	movs	r1, #1
 8004b00:	e786      	b.n	8004a10 <_vfiprintf_r+0xbc>
 8004b02:	2300      	movs	r3, #0
 8004b04:	250a      	movs	r5, #10
 8004b06:	4618      	mov	r0, r3
 8004b08:	9305      	str	r3, [sp, #20]
 8004b0a:	4688      	mov	r8, r1
 8004b0c:	f898 2000 	ldrb.w	r2, [r8]
 8004b10:	3101      	adds	r1, #1
 8004b12:	3a30      	subs	r2, #48	; 0x30
 8004b14:	2a09      	cmp	r2, #9
 8004b16:	d903      	bls.n	8004b20 <_vfiprintf_r+0x1cc>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0c5      	beq.n	8004aa8 <_vfiprintf_r+0x154>
 8004b1c:	9005      	str	r0, [sp, #20]
 8004b1e:	e7c3      	b.n	8004aa8 <_vfiprintf_r+0x154>
 8004b20:	fb05 2000 	mla	r0, r5, r0, r2
 8004b24:	2301      	movs	r3, #1
 8004b26:	e7f0      	b.n	8004b0a <_vfiprintf_r+0x1b6>
 8004b28:	ab03      	add	r3, sp, #12
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	4622      	mov	r2, r4
 8004b2e:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <_vfiprintf_r+0x228>)
 8004b30:	a904      	add	r1, sp, #16
 8004b32:	4630      	mov	r0, r6
 8004b34:	f7fe f81a 	bl	8002b6c <_printf_float>
 8004b38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b3c:	4681      	mov	r9, r0
 8004b3e:	d1d8      	bne.n	8004af2 <_vfiprintf_r+0x19e>
 8004b40:	89a3      	ldrh	r3, [r4, #12]
 8004b42:	065b      	lsls	r3, r3, #25
 8004b44:	f53f af7d 	bmi.w	8004a42 <_vfiprintf_r+0xee>
 8004b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b4a:	e77c      	b.n	8004a46 <_vfiprintf_r+0xf2>
 8004b4c:	ab03      	add	r3, sp, #12
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	4622      	mov	r2, r4
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <_vfiprintf_r+0x228>)
 8004b54:	a904      	add	r1, sp, #16
 8004b56:	4630      	mov	r0, r6
 8004b58:	f7fe fab8 	bl	80030cc <_printf_i>
 8004b5c:	e7ec      	b.n	8004b38 <_vfiprintf_r+0x1e4>
 8004b5e:	bf00      	nop
 8004b60:	080051bc 	.word	0x080051bc
 8004b64:	080052fc 	.word	0x080052fc
 8004b68:	080051dc 	.word	0x080051dc
 8004b6c:	0800519c 	.word	0x0800519c
 8004b70:	08005302 	.word	0x08005302
 8004b74:	08005306 	.word	0x08005306
 8004b78:	08002b6d 	.word	0x08002b6d
 8004b7c:	08004931 	.word	0x08004931

08004b80 <_sbrk_r>:
 8004b80:	b538      	push	{r3, r4, r5, lr}
 8004b82:	2300      	movs	r3, #0
 8004b84:	4c05      	ldr	r4, [pc, #20]	; (8004b9c <_sbrk_r+0x1c>)
 8004b86:	4605      	mov	r5, r0
 8004b88:	4608      	mov	r0, r1
 8004b8a:	6023      	str	r3, [r4, #0]
 8004b8c:	f7fd fe58 	bl	8002840 <_sbrk>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d102      	bne.n	8004b9a <_sbrk_r+0x1a>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	b103      	cbz	r3, 8004b9a <_sbrk_r+0x1a>
 8004b98:	602b      	str	r3, [r5, #0]
 8004b9a:	bd38      	pop	{r3, r4, r5, pc}
 8004b9c:	20000380 	.word	0x20000380

08004ba0 <__sread>:
 8004ba0:	b510      	push	{r4, lr}
 8004ba2:	460c      	mov	r4, r1
 8004ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba8:	f000 fa5c 	bl	8005064 <_read_r>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	bfab      	itete	ge
 8004bb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8004bb4:	181b      	addge	r3, r3, r0
 8004bb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bba:	bfac      	ite	ge
 8004bbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bbe:	81a3      	strhlt	r3, [r4, #12]
 8004bc0:	bd10      	pop	{r4, pc}

08004bc2 <__swrite>:
 8004bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc6:	461f      	mov	r7, r3
 8004bc8:	898b      	ldrh	r3, [r1, #12]
 8004bca:	4605      	mov	r5, r0
 8004bcc:	05db      	lsls	r3, r3, #23
 8004bce:	460c      	mov	r4, r1
 8004bd0:	4616      	mov	r6, r2
 8004bd2:	d505      	bpl.n	8004be0 <__swrite+0x1e>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bdc:	f000 f9b8 	bl	8004f50 <_lseek_r>
 8004be0:	89a3      	ldrh	r3, [r4, #12]
 8004be2:	4632      	mov	r2, r6
 8004be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004be8:	81a3      	strh	r3, [r4, #12]
 8004bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bee:	463b      	mov	r3, r7
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf6:	f000 b869 	b.w	8004ccc <_write_r>

08004bfa <__sseek>:
 8004bfa:	b510      	push	{r4, lr}
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c02:	f000 f9a5 	bl	8004f50 <_lseek_r>
 8004c06:	1c43      	adds	r3, r0, #1
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	bf15      	itete	ne
 8004c0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c16:	81a3      	strheq	r3, [r4, #12]
 8004c18:	bf18      	it	ne
 8004c1a:	81a3      	strhne	r3, [r4, #12]
 8004c1c:	bd10      	pop	{r4, pc}

08004c1e <__sclose>:
 8004c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c22:	f000 b8d3 	b.w	8004dcc <_close_r>
	...

08004c28 <__swbuf_r>:
 8004c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2a:	460e      	mov	r6, r1
 8004c2c:	4614      	mov	r4, r2
 8004c2e:	4605      	mov	r5, r0
 8004c30:	b118      	cbz	r0, 8004c3a <__swbuf_r+0x12>
 8004c32:	6983      	ldr	r3, [r0, #24]
 8004c34:	b90b      	cbnz	r3, 8004c3a <__swbuf_r+0x12>
 8004c36:	f7ff fa23 	bl	8004080 <__sinit>
 8004c3a:	4b21      	ldr	r3, [pc, #132]	; (8004cc0 <__swbuf_r+0x98>)
 8004c3c:	429c      	cmp	r4, r3
 8004c3e:	d12a      	bne.n	8004c96 <__swbuf_r+0x6e>
 8004c40:	686c      	ldr	r4, [r5, #4]
 8004c42:	69a3      	ldr	r3, [r4, #24]
 8004c44:	60a3      	str	r3, [r4, #8]
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	071a      	lsls	r2, r3, #28
 8004c4a:	d52e      	bpl.n	8004caa <__swbuf_r+0x82>
 8004c4c:	6923      	ldr	r3, [r4, #16]
 8004c4e:	b363      	cbz	r3, 8004caa <__swbuf_r+0x82>
 8004c50:	6923      	ldr	r3, [r4, #16]
 8004c52:	6820      	ldr	r0, [r4, #0]
 8004c54:	b2f6      	uxtb	r6, r6
 8004c56:	1ac0      	subs	r0, r0, r3
 8004c58:	6963      	ldr	r3, [r4, #20]
 8004c5a:	4637      	mov	r7, r6
 8004c5c:	4298      	cmp	r0, r3
 8004c5e:	db04      	blt.n	8004c6a <__swbuf_r+0x42>
 8004c60:	4621      	mov	r1, r4
 8004c62:	4628      	mov	r0, r5
 8004c64:	f000 f94a 	bl	8004efc <_fflush_r>
 8004c68:	bb28      	cbnz	r0, 8004cb6 <__swbuf_r+0x8e>
 8004c6a:	68a3      	ldr	r3, [r4, #8]
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	60a3      	str	r3, [r4, #8]
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	6022      	str	r2, [r4, #0]
 8004c78:	701e      	strb	r6, [r3, #0]
 8004c7a:	6963      	ldr	r3, [r4, #20]
 8004c7c:	4298      	cmp	r0, r3
 8004c7e:	d004      	beq.n	8004c8a <__swbuf_r+0x62>
 8004c80:	89a3      	ldrh	r3, [r4, #12]
 8004c82:	07db      	lsls	r3, r3, #31
 8004c84:	d519      	bpl.n	8004cba <__swbuf_r+0x92>
 8004c86:	2e0a      	cmp	r6, #10
 8004c88:	d117      	bne.n	8004cba <__swbuf_r+0x92>
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f000 f935 	bl	8004efc <_fflush_r>
 8004c92:	b190      	cbz	r0, 8004cba <__swbuf_r+0x92>
 8004c94:	e00f      	b.n	8004cb6 <__swbuf_r+0x8e>
 8004c96:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <__swbuf_r+0x9c>)
 8004c98:	429c      	cmp	r4, r3
 8004c9a:	d101      	bne.n	8004ca0 <__swbuf_r+0x78>
 8004c9c:	68ac      	ldr	r4, [r5, #8]
 8004c9e:	e7d0      	b.n	8004c42 <__swbuf_r+0x1a>
 8004ca0:	4b09      	ldr	r3, [pc, #36]	; (8004cc8 <__swbuf_r+0xa0>)
 8004ca2:	429c      	cmp	r4, r3
 8004ca4:	bf08      	it	eq
 8004ca6:	68ec      	ldreq	r4, [r5, #12]
 8004ca8:	e7cb      	b.n	8004c42 <__swbuf_r+0x1a>
 8004caa:	4621      	mov	r1, r4
 8004cac:	4628      	mov	r0, r5
 8004cae:	f000 f81f 	bl	8004cf0 <__swsetup_r>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	d0cc      	beq.n	8004c50 <__swbuf_r+0x28>
 8004cb6:	f04f 37ff 	mov.w	r7, #4294967295
 8004cba:	4638      	mov	r0, r7
 8004cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	080051bc 	.word	0x080051bc
 8004cc4:	080051dc 	.word	0x080051dc
 8004cc8:	0800519c 	.word	0x0800519c

08004ccc <_write_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4605      	mov	r5, r0
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	4c05      	ldr	r4, [pc, #20]	; (8004cec <_write_r+0x20>)
 8004cd8:	6022      	str	r2, [r4, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f7fd fd60 	bl	80027a0 <_write>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d102      	bne.n	8004cea <_write_r+0x1e>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	b103      	cbz	r3, 8004cea <_write_r+0x1e>
 8004ce8:	602b      	str	r3, [r5, #0]
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	20000380 	.word	0x20000380

08004cf0 <__swsetup_r>:
 8004cf0:	4b32      	ldr	r3, [pc, #200]	; (8004dbc <__swsetup_r+0xcc>)
 8004cf2:	b570      	push	{r4, r5, r6, lr}
 8004cf4:	681d      	ldr	r5, [r3, #0]
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	b125      	cbz	r5, 8004d06 <__swsetup_r+0x16>
 8004cfc:	69ab      	ldr	r3, [r5, #24]
 8004cfe:	b913      	cbnz	r3, 8004d06 <__swsetup_r+0x16>
 8004d00:	4628      	mov	r0, r5
 8004d02:	f7ff f9bd 	bl	8004080 <__sinit>
 8004d06:	4b2e      	ldr	r3, [pc, #184]	; (8004dc0 <__swsetup_r+0xd0>)
 8004d08:	429c      	cmp	r4, r3
 8004d0a:	d10f      	bne.n	8004d2c <__swsetup_r+0x3c>
 8004d0c:	686c      	ldr	r4, [r5, #4]
 8004d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	0715      	lsls	r5, r2, #28
 8004d16:	d42c      	bmi.n	8004d72 <__swsetup_r+0x82>
 8004d18:	06d0      	lsls	r0, r2, #27
 8004d1a:	d411      	bmi.n	8004d40 <__swsetup_r+0x50>
 8004d1c:	2209      	movs	r2, #9
 8004d1e:	6032      	str	r2, [r6, #0]
 8004d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d24:	81a3      	strh	r3, [r4, #12]
 8004d26:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
 8004d2c:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <__swsetup_r+0xd4>)
 8004d2e:	429c      	cmp	r4, r3
 8004d30:	d101      	bne.n	8004d36 <__swsetup_r+0x46>
 8004d32:	68ac      	ldr	r4, [r5, #8]
 8004d34:	e7eb      	b.n	8004d0e <__swsetup_r+0x1e>
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <__swsetup_r+0xd8>)
 8004d38:	429c      	cmp	r4, r3
 8004d3a:	bf08      	it	eq
 8004d3c:	68ec      	ldreq	r4, [r5, #12]
 8004d3e:	e7e6      	b.n	8004d0e <__swsetup_r+0x1e>
 8004d40:	0751      	lsls	r1, r2, #29
 8004d42:	d512      	bpl.n	8004d6a <__swsetup_r+0x7a>
 8004d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d46:	b141      	cbz	r1, 8004d5a <__swsetup_r+0x6a>
 8004d48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d4c:	4299      	cmp	r1, r3
 8004d4e:	d002      	beq.n	8004d56 <__swsetup_r+0x66>
 8004d50:	4630      	mov	r0, r6
 8004d52:	f7ff fd2d 	bl	80047b0 <_free_r>
 8004d56:	2300      	movs	r3, #0
 8004d58:	6363      	str	r3, [r4, #52]	; 0x34
 8004d5a:	89a3      	ldrh	r3, [r4, #12]
 8004d5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d60:	81a3      	strh	r3, [r4, #12]
 8004d62:	2300      	movs	r3, #0
 8004d64:	6063      	str	r3, [r4, #4]
 8004d66:	6923      	ldr	r3, [r4, #16]
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	89a3      	ldrh	r3, [r4, #12]
 8004d6c:	f043 0308 	orr.w	r3, r3, #8
 8004d70:	81a3      	strh	r3, [r4, #12]
 8004d72:	6923      	ldr	r3, [r4, #16]
 8004d74:	b94b      	cbnz	r3, 8004d8a <__swsetup_r+0x9a>
 8004d76:	89a3      	ldrh	r3, [r4, #12]
 8004d78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d80:	d003      	beq.n	8004d8a <__swsetup_r+0x9a>
 8004d82:	4621      	mov	r1, r4
 8004d84:	4630      	mov	r0, r6
 8004d86:	f000 f919 	bl	8004fbc <__smakebuf_r>
 8004d8a:	89a2      	ldrh	r2, [r4, #12]
 8004d8c:	f012 0301 	ands.w	r3, r2, #1
 8004d90:	d00c      	beq.n	8004dac <__swsetup_r+0xbc>
 8004d92:	2300      	movs	r3, #0
 8004d94:	60a3      	str	r3, [r4, #8]
 8004d96:	6963      	ldr	r3, [r4, #20]
 8004d98:	425b      	negs	r3, r3
 8004d9a:	61a3      	str	r3, [r4, #24]
 8004d9c:	6923      	ldr	r3, [r4, #16]
 8004d9e:	b953      	cbnz	r3, 8004db6 <__swsetup_r+0xc6>
 8004da0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004da4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004da8:	d1ba      	bne.n	8004d20 <__swsetup_r+0x30>
 8004daa:	bd70      	pop	{r4, r5, r6, pc}
 8004dac:	0792      	lsls	r2, r2, #30
 8004dae:	bf58      	it	pl
 8004db0:	6963      	ldrpl	r3, [r4, #20]
 8004db2:	60a3      	str	r3, [r4, #8]
 8004db4:	e7f2      	b.n	8004d9c <__swsetup_r+0xac>
 8004db6:	2000      	movs	r0, #0
 8004db8:	e7f7      	b.n	8004daa <__swsetup_r+0xba>
 8004dba:	bf00      	nop
 8004dbc:	2000000c 	.word	0x2000000c
 8004dc0:	080051bc 	.word	0x080051bc
 8004dc4:	080051dc 	.word	0x080051dc
 8004dc8:	0800519c 	.word	0x0800519c

08004dcc <_close_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	2300      	movs	r3, #0
 8004dd0:	4c05      	ldr	r4, [pc, #20]	; (8004de8 <_close_r+0x1c>)
 8004dd2:	4605      	mov	r5, r0
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	6023      	str	r3, [r4, #0]
 8004dd8:	f7fd fd4c 	bl	8002874 <_close>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	d102      	bne.n	8004de6 <_close_r+0x1a>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	b103      	cbz	r3, 8004de6 <_close_r+0x1a>
 8004de4:	602b      	str	r3, [r5, #0]
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
 8004de8:	20000380 	.word	0x20000380

08004dec <__sflush_r>:
 8004dec:	898a      	ldrh	r2, [r1, #12]
 8004dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df2:	4605      	mov	r5, r0
 8004df4:	0710      	lsls	r0, r2, #28
 8004df6:	460c      	mov	r4, r1
 8004df8:	d45a      	bmi.n	8004eb0 <__sflush_r+0xc4>
 8004dfa:	684b      	ldr	r3, [r1, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	dc05      	bgt.n	8004e0c <__sflush_r+0x20>
 8004e00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	dc02      	bgt.n	8004e0c <__sflush_r+0x20>
 8004e06:	2000      	movs	r0, #0
 8004e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e0e:	2e00      	cmp	r6, #0
 8004e10:	d0f9      	beq.n	8004e06 <__sflush_r+0x1a>
 8004e12:	2300      	movs	r3, #0
 8004e14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e18:	682f      	ldr	r7, [r5, #0]
 8004e1a:	602b      	str	r3, [r5, #0]
 8004e1c:	d033      	beq.n	8004e86 <__sflush_r+0x9a>
 8004e1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	075a      	lsls	r2, r3, #29
 8004e24:	d505      	bpl.n	8004e32 <__sflush_r+0x46>
 8004e26:	6863      	ldr	r3, [r4, #4]
 8004e28:	1ac0      	subs	r0, r0, r3
 8004e2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e2c:	b10b      	cbz	r3, 8004e32 <__sflush_r+0x46>
 8004e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e30:	1ac0      	subs	r0, r0, r3
 8004e32:	2300      	movs	r3, #0
 8004e34:	4602      	mov	r2, r0
 8004e36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e38:	6a21      	ldr	r1, [r4, #32]
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	47b0      	blx	r6
 8004e3e:	1c43      	adds	r3, r0, #1
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	d106      	bne.n	8004e52 <__sflush_r+0x66>
 8004e44:	6829      	ldr	r1, [r5, #0]
 8004e46:	291d      	cmp	r1, #29
 8004e48:	d84b      	bhi.n	8004ee2 <__sflush_r+0xf6>
 8004e4a:	4a2b      	ldr	r2, [pc, #172]	; (8004ef8 <__sflush_r+0x10c>)
 8004e4c:	40ca      	lsrs	r2, r1
 8004e4e:	07d6      	lsls	r6, r2, #31
 8004e50:	d547      	bpl.n	8004ee2 <__sflush_r+0xf6>
 8004e52:	2200      	movs	r2, #0
 8004e54:	6062      	str	r2, [r4, #4]
 8004e56:	6922      	ldr	r2, [r4, #16]
 8004e58:	04d9      	lsls	r1, r3, #19
 8004e5a:	6022      	str	r2, [r4, #0]
 8004e5c:	d504      	bpl.n	8004e68 <__sflush_r+0x7c>
 8004e5e:	1c42      	adds	r2, r0, #1
 8004e60:	d101      	bne.n	8004e66 <__sflush_r+0x7a>
 8004e62:	682b      	ldr	r3, [r5, #0]
 8004e64:	b903      	cbnz	r3, 8004e68 <__sflush_r+0x7c>
 8004e66:	6560      	str	r0, [r4, #84]	; 0x54
 8004e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e6a:	602f      	str	r7, [r5, #0]
 8004e6c:	2900      	cmp	r1, #0
 8004e6e:	d0ca      	beq.n	8004e06 <__sflush_r+0x1a>
 8004e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e74:	4299      	cmp	r1, r3
 8004e76:	d002      	beq.n	8004e7e <__sflush_r+0x92>
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f7ff fc99 	bl	80047b0 <_free_r>
 8004e7e:	2000      	movs	r0, #0
 8004e80:	6360      	str	r0, [r4, #52]	; 0x34
 8004e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e86:	6a21      	ldr	r1, [r4, #32]
 8004e88:	2301      	movs	r3, #1
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	47b0      	blx	r6
 8004e8e:	1c41      	adds	r1, r0, #1
 8004e90:	d1c6      	bne.n	8004e20 <__sflush_r+0x34>
 8004e92:	682b      	ldr	r3, [r5, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0c3      	beq.n	8004e20 <__sflush_r+0x34>
 8004e98:	2b1d      	cmp	r3, #29
 8004e9a:	d001      	beq.n	8004ea0 <__sflush_r+0xb4>
 8004e9c:	2b16      	cmp	r3, #22
 8004e9e:	d101      	bne.n	8004ea4 <__sflush_r+0xb8>
 8004ea0:	602f      	str	r7, [r5, #0]
 8004ea2:	e7b0      	b.n	8004e06 <__sflush_r+0x1a>
 8004ea4:	89a3      	ldrh	r3, [r4, #12]
 8004ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eaa:	81a3      	strh	r3, [r4, #12]
 8004eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb0:	690f      	ldr	r7, [r1, #16]
 8004eb2:	2f00      	cmp	r7, #0
 8004eb4:	d0a7      	beq.n	8004e06 <__sflush_r+0x1a>
 8004eb6:	0793      	lsls	r3, r2, #30
 8004eb8:	bf18      	it	ne
 8004eba:	2300      	movne	r3, #0
 8004ebc:	680e      	ldr	r6, [r1, #0]
 8004ebe:	bf08      	it	eq
 8004ec0:	694b      	ldreq	r3, [r1, #20]
 8004ec2:	eba6 0807 	sub.w	r8, r6, r7
 8004ec6:	600f      	str	r7, [r1, #0]
 8004ec8:	608b      	str	r3, [r1, #8]
 8004eca:	f1b8 0f00 	cmp.w	r8, #0
 8004ece:	dd9a      	ble.n	8004e06 <__sflush_r+0x1a>
 8004ed0:	4643      	mov	r3, r8
 8004ed2:	463a      	mov	r2, r7
 8004ed4:	6a21      	ldr	r1, [r4, #32]
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004eda:	47b0      	blx	r6
 8004edc:	2800      	cmp	r0, #0
 8004ede:	dc07      	bgt.n	8004ef0 <__sflush_r+0x104>
 8004ee0:	89a3      	ldrh	r3, [r4, #12]
 8004ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ee6:	81a3      	strh	r3, [r4, #12]
 8004ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ef0:	4407      	add	r7, r0
 8004ef2:	eba8 0800 	sub.w	r8, r8, r0
 8004ef6:	e7e8      	b.n	8004eca <__sflush_r+0xde>
 8004ef8:	20400001 	.word	0x20400001

08004efc <_fflush_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	690b      	ldr	r3, [r1, #16]
 8004f00:	4605      	mov	r5, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	b1db      	cbz	r3, 8004f3e <_fflush_r+0x42>
 8004f06:	b118      	cbz	r0, 8004f10 <_fflush_r+0x14>
 8004f08:	6983      	ldr	r3, [r0, #24]
 8004f0a:	b90b      	cbnz	r3, 8004f10 <_fflush_r+0x14>
 8004f0c:	f7ff f8b8 	bl	8004080 <__sinit>
 8004f10:	4b0c      	ldr	r3, [pc, #48]	; (8004f44 <_fflush_r+0x48>)
 8004f12:	429c      	cmp	r4, r3
 8004f14:	d109      	bne.n	8004f2a <_fflush_r+0x2e>
 8004f16:	686c      	ldr	r4, [r5, #4]
 8004f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f1c:	b17b      	cbz	r3, 8004f3e <_fflush_r+0x42>
 8004f1e:	4621      	mov	r1, r4
 8004f20:	4628      	mov	r0, r5
 8004f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f26:	f7ff bf61 	b.w	8004dec <__sflush_r>
 8004f2a:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <_fflush_r+0x4c>)
 8004f2c:	429c      	cmp	r4, r3
 8004f2e:	d101      	bne.n	8004f34 <_fflush_r+0x38>
 8004f30:	68ac      	ldr	r4, [r5, #8]
 8004f32:	e7f1      	b.n	8004f18 <_fflush_r+0x1c>
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <_fflush_r+0x50>)
 8004f36:	429c      	cmp	r4, r3
 8004f38:	bf08      	it	eq
 8004f3a:	68ec      	ldreq	r4, [r5, #12]
 8004f3c:	e7ec      	b.n	8004f18 <_fflush_r+0x1c>
 8004f3e:	2000      	movs	r0, #0
 8004f40:	bd38      	pop	{r3, r4, r5, pc}
 8004f42:	bf00      	nop
 8004f44:	080051bc 	.word	0x080051bc
 8004f48:	080051dc 	.word	0x080051dc
 8004f4c:	0800519c 	.word	0x0800519c

08004f50 <_lseek_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4605      	mov	r5, r0
 8004f54:	4608      	mov	r0, r1
 8004f56:	4611      	mov	r1, r2
 8004f58:	2200      	movs	r2, #0
 8004f5a:	4c05      	ldr	r4, [pc, #20]	; (8004f70 <_lseek_r+0x20>)
 8004f5c:	6022      	str	r2, [r4, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f7fd fc92 	bl	8002888 <_lseek>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d102      	bne.n	8004f6e <_lseek_r+0x1e>
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	b103      	cbz	r3, 8004f6e <_lseek_r+0x1e>
 8004f6c:	602b      	str	r3, [r5, #0]
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
 8004f70:	20000380 	.word	0x20000380

08004f74 <__swhatbuf_r>:
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	460e      	mov	r6, r1
 8004f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f7c:	b090      	sub	sp, #64	; 0x40
 8004f7e:	2900      	cmp	r1, #0
 8004f80:	4614      	mov	r4, r2
 8004f82:	461d      	mov	r5, r3
 8004f84:	da07      	bge.n	8004f96 <__swhatbuf_r+0x22>
 8004f86:	2300      	movs	r3, #0
 8004f88:	602b      	str	r3, [r5, #0]
 8004f8a:	89b3      	ldrh	r3, [r6, #12]
 8004f8c:	061a      	lsls	r2, r3, #24
 8004f8e:	d410      	bmi.n	8004fb2 <__swhatbuf_r+0x3e>
 8004f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f94:	e00e      	b.n	8004fb4 <__swhatbuf_r+0x40>
 8004f96:	aa01      	add	r2, sp, #4
 8004f98:	f000 f884 	bl	80050a4 <_fstat_r>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	dbf2      	blt.n	8004f86 <__swhatbuf_r+0x12>
 8004fa0:	9a02      	ldr	r2, [sp, #8]
 8004fa2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fa6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004faa:	425a      	negs	r2, r3
 8004fac:	415a      	adcs	r2, r3
 8004fae:	602a      	str	r2, [r5, #0]
 8004fb0:	e7ee      	b.n	8004f90 <__swhatbuf_r+0x1c>
 8004fb2:	2340      	movs	r3, #64	; 0x40
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	6023      	str	r3, [r4, #0]
 8004fb8:	b010      	add	sp, #64	; 0x40
 8004fba:	bd70      	pop	{r4, r5, r6, pc}

08004fbc <__smakebuf_r>:
 8004fbc:	898b      	ldrh	r3, [r1, #12]
 8004fbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fc0:	079d      	lsls	r5, r3, #30
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	d507      	bpl.n	8004fd8 <__smakebuf_r+0x1c>
 8004fc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	6123      	str	r3, [r4, #16]
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	6163      	str	r3, [r4, #20]
 8004fd4:	b002      	add	sp, #8
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	ab01      	add	r3, sp, #4
 8004fda:	466a      	mov	r2, sp
 8004fdc:	f7ff ffca 	bl	8004f74 <__swhatbuf_r>
 8004fe0:	9900      	ldr	r1, [sp, #0]
 8004fe2:	4605      	mov	r5, r0
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f7ff fc2f 	bl	8004848 <_malloc_r>
 8004fea:	b948      	cbnz	r0, 8005000 <__smakebuf_r+0x44>
 8004fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ff0:	059a      	lsls	r2, r3, #22
 8004ff2:	d4ef      	bmi.n	8004fd4 <__smakebuf_r+0x18>
 8004ff4:	f023 0303 	bic.w	r3, r3, #3
 8004ff8:	f043 0302 	orr.w	r3, r3, #2
 8004ffc:	81a3      	strh	r3, [r4, #12]
 8004ffe:	e7e3      	b.n	8004fc8 <__smakebuf_r+0xc>
 8005000:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <__smakebuf_r+0x7c>)
 8005002:	62b3      	str	r3, [r6, #40]	; 0x28
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	6020      	str	r0, [r4, #0]
 8005008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500c:	81a3      	strh	r3, [r4, #12]
 800500e:	9b00      	ldr	r3, [sp, #0]
 8005010:	6120      	str	r0, [r4, #16]
 8005012:	6163      	str	r3, [r4, #20]
 8005014:	9b01      	ldr	r3, [sp, #4]
 8005016:	b15b      	cbz	r3, 8005030 <__smakebuf_r+0x74>
 8005018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800501c:	4630      	mov	r0, r6
 800501e:	f000 f853 	bl	80050c8 <_isatty_r>
 8005022:	b128      	cbz	r0, 8005030 <__smakebuf_r+0x74>
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	f023 0303 	bic.w	r3, r3, #3
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	431d      	orrs	r5, r3
 8005034:	81a5      	strh	r5, [r4, #12]
 8005036:	e7cd      	b.n	8004fd4 <__smakebuf_r+0x18>
 8005038:	08004001 	.word	0x08004001

0800503c <__ascii_mbtowc>:
 800503c:	b082      	sub	sp, #8
 800503e:	b901      	cbnz	r1, 8005042 <__ascii_mbtowc+0x6>
 8005040:	a901      	add	r1, sp, #4
 8005042:	b142      	cbz	r2, 8005056 <__ascii_mbtowc+0x1a>
 8005044:	b14b      	cbz	r3, 800505a <__ascii_mbtowc+0x1e>
 8005046:	7813      	ldrb	r3, [r2, #0]
 8005048:	600b      	str	r3, [r1, #0]
 800504a:	7812      	ldrb	r2, [r2, #0]
 800504c:	1c10      	adds	r0, r2, #0
 800504e:	bf18      	it	ne
 8005050:	2001      	movne	r0, #1
 8005052:	b002      	add	sp, #8
 8005054:	4770      	bx	lr
 8005056:	4610      	mov	r0, r2
 8005058:	e7fb      	b.n	8005052 <__ascii_mbtowc+0x16>
 800505a:	f06f 0001 	mvn.w	r0, #1
 800505e:	e7f8      	b.n	8005052 <__ascii_mbtowc+0x16>

08005060 <__malloc_lock>:
 8005060:	4770      	bx	lr

08005062 <__malloc_unlock>:
 8005062:	4770      	bx	lr

08005064 <_read_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4605      	mov	r5, r0
 8005068:	4608      	mov	r0, r1
 800506a:	4611      	mov	r1, r2
 800506c:	2200      	movs	r2, #0
 800506e:	4c05      	ldr	r4, [pc, #20]	; (8005084 <_read_r+0x20>)
 8005070:	6022      	str	r2, [r4, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	f7fd fbd6 	bl	8002824 <_read>
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	d102      	bne.n	8005082 <_read_r+0x1e>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	b103      	cbz	r3, 8005082 <_read_r+0x1e>
 8005080:	602b      	str	r3, [r5, #0]
 8005082:	bd38      	pop	{r3, r4, r5, pc}
 8005084:	20000380 	.word	0x20000380

08005088 <__ascii_wctomb>:
 8005088:	b149      	cbz	r1, 800509e <__ascii_wctomb+0x16>
 800508a:	2aff      	cmp	r2, #255	; 0xff
 800508c:	bf8b      	itete	hi
 800508e:	238a      	movhi	r3, #138	; 0x8a
 8005090:	700a      	strbls	r2, [r1, #0]
 8005092:	6003      	strhi	r3, [r0, #0]
 8005094:	2001      	movls	r0, #1
 8005096:	bf88      	it	hi
 8005098:	f04f 30ff 	movhi.w	r0, #4294967295
 800509c:	4770      	bx	lr
 800509e:	4608      	mov	r0, r1
 80050a0:	4770      	bx	lr
	...

080050a4 <_fstat_r>:
 80050a4:	b538      	push	{r3, r4, r5, lr}
 80050a6:	2300      	movs	r3, #0
 80050a8:	4c06      	ldr	r4, [pc, #24]	; (80050c4 <_fstat_r+0x20>)
 80050aa:	4605      	mov	r5, r0
 80050ac:	4608      	mov	r0, r1
 80050ae:	4611      	mov	r1, r2
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	f7fd fbe2 	bl	800287a <_fstat>
 80050b6:	1c43      	adds	r3, r0, #1
 80050b8:	d102      	bne.n	80050c0 <_fstat_r+0x1c>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	b103      	cbz	r3, 80050c0 <_fstat_r+0x1c>
 80050be:	602b      	str	r3, [r5, #0]
 80050c0:	bd38      	pop	{r3, r4, r5, pc}
 80050c2:	bf00      	nop
 80050c4:	20000380 	.word	0x20000380

080050c8 <_isatty_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	2300      	movs	r3, #0
 80050cc:	4c05      	ldr	r4, [pc, #20]	; (80050e4 <_isatty_r+0x1c>)
 80050ce:	4605      	mov	r5, r0
 80050d0:	4608      	mov	r0, r1
 80050d2:	6023      	str	r3, [r4, #0]
 80050d4:	f7fd fbd6 	bl	8002884 <_isatty>
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	d102      	bne.n	80050e2 <_isatty_r+0x1a>
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	b103      	cbz	r3, 80050e2 <_isatty_r+0x1a>
 80050e0:	602b      	str	r3, [r5, #0]
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	20000380 	.word	0x20000380

080050e8 <_init>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	bf00      	nop
 80050ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ee:	bc08      	pop	{r3}
 80050f0:	469e      	mov	lr, r3
 80050f2:	4770      	bx	lr

080050f4 <_fini>:
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	bf00      	nop
 80050f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fa:	bc08      	pop	{r3}
 80050fc:	469e      	mov	lr, r3
 80050fe:	4770      	bx	lr
