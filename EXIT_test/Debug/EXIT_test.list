
EXIT_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c18  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000dfc  08000dfc  00010dfc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000e1c  08000e1c  00010e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000e20  08000e20  00010e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08000e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  2000000c  08000e30  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000002c  08000e30  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00008483  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001703  00000000  00000000  000284b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e96  00000000  00000000  00029bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000360  00000000  00000000  0002aa58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000440  00000000  00000000  0002adb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000020ae  00000000  00000000  0002b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001633  00000000  00000000  0002d2a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002e8d9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000718  00000000  00000000  0002e958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08000de4 	.word	0x08000de4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08000de4 	.word	0x08000de4

08000224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000224:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <HAL_InitTick+0x3c>)
{
 8000228:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800022a:	7818      	ldrb	r0, [r3, #0]
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	fbb3 f3f0 	udiv	r3, r3, r0
 8000234:	4a0b      	ldr	r2, [pc, #44]	; (8000264 <HAL_InitTick+0x40>)
 8000236:	6810      	ldr	r0, [r2, #0]
 8000238:	fbb0 f0f3 	udiv	r0, r0, r3
 800023c:	f000 f89e 	bl	800037c <HAL_SYSTICK_Config>
 8000240:	4604      	mov	r4, r0
 8000242:	b958      	cbnz	r0, 800025c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000244:	2d0f      	cmp	r5, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	4602      	mov	r2, r0
 800024a:	4629      	mov	r1, r5
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f000 f854 	bl	80002fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <HAL_InitTick+0x44>)
 8000256:	4620      	mov	r0, r4
 8000258:	601d      	str	r5, [r3, #0]
 800025a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800025c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800025e:	bd38      	pop	{r3, r4, r5, pc}
 8000260:	20000000 	.word	0x20000000
 8000264:	20000008 	.word	0x20000008
 8000268:	20000004 	.word	0x20000004

0800026c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026c:	4a07      	ldr	r2, [pc, #28]	; (800028c <HAL_Init+0x20>)
{
 800026e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000270:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000272:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	f043 0310 	orr.w	r3, r3, #16
 8000278:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800027a:	f000 f82d 	bl	80002d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800027e:	2000      	movs	r0, #0
 8000280:	f7ff ffd0 	bl	8000224 <HAL_InitTick>
  HAL_MspInit();
 8000284:	f000 fcfc 	bl	8000c80 <HAL_MspInit>
}
 8000288:	2000      	movs	r0, #0
 800028a:	bd08      	pop	{r3, pc}
 800028c:	40022000 	.word	0x40022000

08000290 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000290:	4a03      	ldr	r2, [pc, #12]	; (80002a0 <HAL_IncTick+0x10>)
 8000292:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <HAL_IncTick+0x14>)
 8000294:	6811      	ldr	r1, [r2, #0]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	440b      	add	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	20000028 	.word	0x20000028
 80002a4:	20000000 	.word	0x20000000

080002a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_GetTick+0x8>)
 80002aa:	6818      	ldr	r0, [r3, #0]
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000028 	.word	0x20000028

080002b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002b4:	b538      	push	{r3, r4, r5, lr}
 80002b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002b8:	f7ff fff6 	bl	80002a8 <HAL_GetTick>
 80002bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002be:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80002c0:	bf1e      	ittt	ne
 80002c2:	4b04      	ldrne	r3, [pc, #16]	; (80002d4 <HAL_Delay+0x20>)
 80002c4:	781b      	ldrbne	r3, [r3, #0]
 80002c6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002c8:	f7ff ffee 	bl	80002a8 <HAL_GetTick>
 80002cc:	1b40      	subs	r0, r0, r5
 80002ce:	4284      	cmp	r4, r0
 80002d0:	d8fa      	bhi.n	80002c8 <HAL_Delay+0x14>
  {
  }
}
 80002d2:	bd38      	pop	{r3, r4, r5, pc}
 80002d4:	20000000 	.word	0x20000000

080002d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002d8:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002da:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002dc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002e6:	041b      	lsls	r3, r3, #16
 80002e8:	0c1b      	lsrs	r3, r3, #16
 80002ea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80002f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002f4:	60d3      	str	r3, [r2, #12]
 80002f6:	4770      	bx	lr
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002fc:	4b17      	ldr	r3, [pc, #92]	; (800035c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002fe:	b530      	push	{r4, r5, lr}
 8000300:	68dc      	ldr	r4, [r3, #12]
 8000302:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000306:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800030a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800030c:	2b04      	cmp	r3, #4
 800030e:	bf28      	it	cs
 8000310:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000312:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000314:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000318:	bf98      	it	ls
 800031a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800031c:	fa05 f303 	lsl.w	r3, r5, r3
 8000320:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000324:	bf88      	it	hi
 8000326:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000328:	4019      	ands	r1, r3
 800032a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800032c:	fa05 f404 	lsl.w	r4, r5, r4
 8000330:	3c01      	subs	r4, #1
 8000332:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000334:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000336:	ea42 0201 	orr.w	r2, r2, r1
 800033a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033e:	bfaf      	iteee	ge
 8000340:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000344:	4b06      	ldrlt	r3, [pc, #24]	; (8000360 <HAL_NVIC_SetPriority+0x64>)
 8000346:	f000 000f 	andlt.w	r0, r0, #15
 800034a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034c:	bfa5      	ittet	ge
 800034e:	b2d2      	uxtbge	r2, r2
 8000350:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000354:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000356:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800035a:	bd30      	pop	{r4, r5, pc}
 800035c:	e000ed00 	.word	0xe000ed00
 8000360:	e000ed14 	.word	0xe000ed14

08000364 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000364:	2301      	movs	r3, #1
 8000366:	0942      	lsrs	r2, r0, #5
 8000368:	f000 001f 	and.w	r0, r0, #31
 800036c:	fa03 f000 	lsl.w	r0, r3, r0
 8000370:	4b01      	ldr	r3, [pc, #4]	; (8000378 <HAL_NVIC_EnableIRQ+0x14>)
 8000372:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000376:	4770      	bx	lr
 8000378:	e000e100 	.word	0xe000e100

0800037c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800037c:	3801      	subs	r0, #1
 800037e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000382:	d20a      	bcs.n	800039a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000384:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000388:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800038a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800038c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000390:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000394:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800039a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	e000e010 	.word	0xe000e010
 80003a4:	e000ed00 	.word	0xe000ed00

080003a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80003ac:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003ae:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003b0:	4f6c      	ldr	r7, [pc, #432]	; (8000564 <HAL_GPIO_Init+0x1bc>)
 80003b2:	4b6d      	ldr	r3, [pc, #436]	; (8000568 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003b4:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8000570 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 80003b8:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000574 <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 80003bc:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003c0:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80003c2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003c6:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80003ca:	45a0      	cmp	r8, r4
 80003cc:	f040 8085 	bne.w	80004da <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 80003d0:	684d      	ldr	r5, [r1, #4]
 80003d2:	2d12      	cmp	r5, #18
 80003d4:	f000 80b7 	beq.w	8000546 <HAL_GPIO_Init+0x19e>
 80003d8:	f200 808d 	bhi.w	80004f6 <HAL_GPIO_Init+0x14e>
 80003dc:	2d02      	cmp	r5, #2
 80003de:	f000 80af 	beq.w	8000540 <HAL_GPIO_Init+0x198>
 80003e2:	f200 8081 	bhi.w	80004e8 <HAL_GPIO_Init+0x140>
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	f000 8091 	beq.w	800050e <HAL_GPIO_Init+0x166>
 80003ec:	2d01      	cmp	r5, #1
 80003ee:	f000 80a5 	beq.w	800053c <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003f2:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003f6:	2cff      	cmp	r4, #255	; 0xff
 80003f8:	bf93      	iteet	ls
 80003fa:	4682      	movls	sl, r0
 80003fc:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000400:	3d08      	subhi	r5, #8
 8000402:	f8d0 b000 	ldrls.w	fp, [r0]
 8000406:	bf92      	itee	ls
 8000408:	00b5      	lslls	r5, r6, #2
 800040a:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800040e:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000410:	fa09 f805 	lsl.w	r8, r9, r5
 8000414:	ea2b 0808 	bic.w	r8, fp, r8
 8000418:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800041c:	bf88      	it	hi
 800041e:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000422:	ea48 0505 	orr.w	r5, r8, r5
 8000426:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800042a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800042e:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000432:	d052      	beq.n	80004da <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000434:	69bd      	ldr	r5, [r7, #24]
 8000436:	f026 0803 	bic.w	r8, r6, #3
 800043a:	f045 0501 	orr.w	r5, r5, #1
 800043e:	61bd      	str	r5, [r7, #24]
 8000440:	69bd      	ldr	r5, [r7, #24]
 8000442:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000446:	f005 0501 	and.w	r5, r5, #1
 800044a:	9501      	str	r5, [sp, #4]
 800044c:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000450:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000454:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000456:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800045a:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800045e:	fa09 f90b 	lsl.w	r9, r9, fp
 8000462:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000466:	4d41      	ldr	r5, [pc, #260]	; (800056c <HAL_GPIO_Init+0x1c4>)
 8000468:	42a8      	cmp	r0, r5
 800046a:	d071      	beq.n	8000550 <HAL_GPIO_Init+0x1a8>
 800046c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000470:	42a8      	cmp	r0, r5
 8000472:	d06f      	beq.n	8000554 <HAL_GPIO_Init+0x1ac>
 8000474:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000478:	42a8      	cmp	r0, r5
 800047a:	d06d      	beq.n	8000558 <HAL_GPIO_Init+0x1b0>
 800047c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000480:	42a8      	cmp	r0, r5
 8000482:	d06b      	beq.n	800055c <HAL_GPIO_Init+0x1b4>
 8000484:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000488:	42a8      	cmp	r0, r5
 800048a:	d069      	beq.n	8000560 <HAL_GPIO_Init+0x1b8>
 800048c:	4570      	cmp	r0, lr
 800048e:	bf0c      	ite	eq
 8000490:	2505      	moveq	r5, #5
 8000492:	2506      	movne	r5, #6
 8000494:	fa05 f50b 	lsl.w	r5, r5, fp
 8000498:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800049c:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80004a0:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004a2:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80004a6:	bf14      	ite	ne
 80004a8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80004aa:	43a5      	biceq	r5, r4
 80004ac:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80004ae:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004b0:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80004b4:	bf14      	ite	ne
 80004b6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80004b8:	43a5      	biceq	r5, r4
 80004ba:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80004bc:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004be:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80004c2:	bf14      	ite	ne
 80004c4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80004c6:	43a5      	biceq	r5, r4
 80004c8:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80004ca:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004cc:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80004d0:	bf14      	ite	ne
 80004d2:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80004d4:	ea25 0404 	biceq.w	r4, r5, r4
 80004d8:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80004da:	3601      	adds	r6, #1
 80004dc:	2e10      	cmp	r6, #16
 80004de:	f47f af6d 	bne.w	80003bc <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 80004e2:	b003      	add	sp, #12
 80004e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80004e8:	2d03      	cmp	r5, #3
 80004ea:	d025      	beq.n	8000538 <HAL_GPIO_Init+0x190>
 80004ec:	2d11      	cmp	r5, #17
 80004ee:	d180      	bne.n	80003f2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004f0:	68ca      	ldr	r2, [r1, #12]
 80004f2:	3204      	adds	r2, #4
          break;
 80004f4:	e77d      	b.n	80003f2 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80004f6:	4565      	cmp	r5, ip
 80004f8:	d009      	beq.n	800050e <HAL_GPIO_Init+0x166>
 80004fa:	d812      	bhi.n	8000522 <HAL_GPIO_Init+0x17a>
 80004fc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000578 <HAL_GPIO_Init+0x1d0>
 8000500:	454d      	cmp	r5, r9
 8000502:	d004      	beq.n	800050e <HAL_GPIO_Init+0x166>
 8000504:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000508:	454d      	cmp	r5, r9
 800050a:	f47f af72 	bne.w	80003f2 <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800050e:	688a      	ldr	r2, [r1, #8]
 8000510:	b1e2      	cbz	r2, 800054c <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000512:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000514:	bf0c      	ite	eq
 8000516:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800051a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800051e:	2208      	movs	r2, #8
 8000520:	e767      	b.n	80003f2 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8000522:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800057c <HAL_GPIO_Init+0x1d4>
 8000526:	454d      	cmp	r5, r9
 8000528:	d0f1      	beq.n	800050e <HAL_GPIO_Init+0x166>
 800052a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800052e:	454d      	cmp	r5, r9
 8000530:	d0ed      	beq.n	800050e <HAL_GPIO_Init+0x166>
 8000532:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000536:	e7e7      	b.n	8000508 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000538:	2200      	movs	r2, #0
 800053a:	e75a      	b.n	80003f2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800053c:	68ca      	ldr	r2, [r1, #12]
          break;
 800053e:	e758      	b.n	80003f2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000540:	68ca      	ldr	r2, [r1, #12]
 8000542:	3208      	adds	r2, #8
          break;
 8000544:	e755      	b.n	80003f2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000546:	68ca      	ldr	r2, [r1, #12]
 8000548:	320c      	adds	r2, #12
          break;
 800054a:	e752      	b.n	80003f2 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800054c:	2204      	movs	r2, #4
 800054e:	e750      	b.n	80003f2 <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000550:	2500      	movs	r5, #0
 8000552:	e79f      	b.n	8000494 <HAL_GPIO_Init+0xec>
 8000554:	2501      	movs	r5, #1
 8000556:	e79d      	b.n	8000494 <HAL_GPIO_Init+0xec>
 8000558:	2502      	movs	r5, #2
 800055a:	e79b      	b.n	8000494 <HAL_GPIO_Init+0xec>
 800055c:	2503      	movs	r5, #3
 800055e:	e799      	b.n	8000494 <HAL_GPIO_Init+0xec>
 8000560:	2504      	movs	r5, #4
 8000562:	e797      	b.n	8000494 <HAL_GPIO_Init+0xec>
 8000564:	40021000 	.word	0x40021000
 8000568:	40010400 	.word	0x40010400
 800056c:	40010800 	.word	0x40010800
 8000570:	40011c00 	.word	0x40011c00
 8000574:	10210000 	.word	0x10210000
 8000578:	10110000 	.word	0x10110000
 800057c:	10310000 	.word	0x10310000

08000580 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000580:	6883      	ldr	r3, [r0, #8]
 8000582:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000584:	bf14      	ite	ne
 8000586:	2001      	movne	r0, #1
 8000588:	2000      	moveq	r0, #0
 800058a:	4770      	bx	lr

0800058c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800058c:	b10a      	cbz	r2, 8000592 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800058e:	6101      	str	r1, [r0, #16]
 8000590:	4770      	bx	lr
 8000592:	0409      	lsls	r1, r1, #16
 8000594:	e7fb      	b.n	800058e <HAL_GPIO_WritePin+0x2>

08000596 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000596:	68c3      	ldr	r3, [r0, #12]
 8000598:	4059      	eors	r1, r3
 800059a:	60c1      	str	r1, [r0, #12]
 800059c:	4770      	bx	lr
	...

080005a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80005a0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80005a2:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80005a4:	6959      	ldr	r1, [r3, #20]
 80005a6:	4201      	tst	r1, r0
 80005a8:	d002      	beq.n	80005b0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80005aa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80005ac:	f000 fb34 	bl	8000c18 <HAL_GPIO_EXTI_Callback>
 80005b0:	bd08      	pop	{r3, pc}
 80005b2:	bf00      	nop
 80005b4:	40010400 	.word	0x40010400

080005b8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005b8:	6803      	ldr	r3, [r0, #0]
{
 80005ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005be:	07db      	lsls	r3, r3, #31
{
 80005c0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005c2:	d410      	bmi.n	80005e6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005c4:	682b      	ldr	r3, [r5, #0]
 80005c6:	079f      	lsls	r7, r3, #30
 80005c8:	d45e      	bmi.n	8000688 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005ca:	682b      	ldr	r3, [r5, #0]
 80005cc:	0719      	lsls	r1, r3, #28
 80005ce:	f100 8095 	bmi.w	80006fc <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005d2:	682b      	ldr	r3, [r5, #0]
 80005d4:	075a      	lsls	r2, r3, #29
 80005d6:	f100 80bf 	bmi.w	8000758 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005da:	69ea      	ldr	r2, [r5, #28]
 80005dc:	2a00      	cmp	r2, #0
 80005de:	f040 812d 	bne.w	800083c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80005e2:	2000      	movs	r0, #0
 80005e4:	e014      	b.n	8000610 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005e6:	4c90      	ldr	r4, [pc, #576]	; (8000828 <HAL_RCC_OscConfig+0x270>)
 80005e8:	6863      	ldr	r3, [r4, #4]
 80005ea:	f003 030c 	and.w	r3, r3, #12
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	d007      	beq.n	8000602 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005f2:	6863      	ldr	r3, [r4, #4]
 80005f4:	f003 030c 	and.w	r3, r3, #12
 80005f8:	2b08      	cmp	r3, #8
 80005fa:	d10c      	bne.n	8000616 <HAL_RCC_OscConfig+0x5e>
 80005fc:	6863      	ldr	r3, [r4, #4]
 80005fe:	03de      	lsls	r6, r3, #15
 8000600:	d509      	bpl.n	8000616 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000602:	6823      	ldr	r3, [r4, #0]
 8000604:	039c      	lsls	r4, r3, #14
 8000606:	d5dd      	bpl.n	80005c4 <HAL_RCC_OscConfig+0xc>
 8000608:	686b      	ldr	r3, [r5, #4]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d1da      	bne.n	80005c4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800060e:	2001      	movs	r0, #1
}
 8000610:	b002      	add	sp, #8
 8000612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000616:	686b      	ldr	r3, [r5, #4]
 8000618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800061c:	d110      	bne.n	8000640 <HAL_RCC_OscConfig+0x88>
 800061e:	6823      	ldr	r3, [r4, #0]
 8000620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000624:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000626:	f7ff fe3f 	bl	80002a8 <HAL_GetTick>
 800062a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800062c:	6823      	ldr	r3, [r4, #0]
 800062e:	0398      	lsls	r0, r3, #14
 8000630:	d4c8      	bmi.n	80005c4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000632:	f7ff fe39 	bl	80002a8 <HAL_GetTick>
 8000636:	1b80      	subs	r0, r0, r6
 8000638:	2864      	cmp	r0, #100	; 0x64
 800063a:	d9f7      	bls.n	800062c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800063c:	2003      	movs	r0, #3
 800063e:	e7e7      	b.n	8000610 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000640:	b99b      	cbnz	r3, 800066a <HAL_RCC_OscConfig+0xb2>
 8000642:	6823      	ldr	r3, [r4, #0]
 8000644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000648:	6023      	str	r3, [r4, #0]
 800064a:	6823      	ldr	r3, [r4, #0]
 800064c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000650:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000652:	f7ff fe29 	bl	80002a8 <HAL_GetTick>
 8000656:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000658:	6823      	ldr	r3, [r4, #0]
 800065a:	0399      	lsls	r1, r3, #14
 800065c:	d5b2      	bpl.n	80005c4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800065e:	f7ff fe23 	bl	80002a8 <HAL_GetTick>
 8000662:	1b80      	subs	r0, r0, r6
 8000664:	2864      	cmp	r0, #100	; 0x64
 8000666:	d9f7      	bls.n	8000658 <HAL_RCC_OscConfig+0xa0>
 8000668:	e7e8      	b.n	800063c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800066a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	d103      	bne.n	800067a <HAL_RCC_OscConfig+0xc2>
 8000672:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000676:	6023      	str	r3, [r4, #0]
 8000678:	e7d1      	b.n	800061e <HAL_RCC_OscConfig+0x66>
 800067a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800067e:	6023      	str	r3, [r4, #0]
 8000680:	6823      	ldr	r3, [r4, #0]
 8000682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000686:	e7cd      	b.n	8000624 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000688:	4c67      	ldr	r4, [pc, #412]	; (8000828 <HAL_RCC_OscConfig+0x270>)
 800068a:	6863      	ldr	r3, [r4, #4]
 800068c:	f013 0f0c 	tst.w	r3, #12
 8000690:	d007      	beq.n	80006a2 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000692:	6863      	ldr	r3, [r4, #4]
 8000694:	f003 030c 	and.w	r3, r3, #12
 8000698:	2b08      	cmp	r3, #8
 800069a:	d110      	bne.n	80006be <HAL_RCC_OscConfig+0x106>
 800069c:	6863      	ldr	r3, [r4, #4]
 800069e:	03da      	lsls	r2, r3, #15
 80006a0:	d40d      	bmi.n	80006be <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006a2:	6823      	ldr	r3, [r4, #0]
 80006a4:	079b      	lsls	r3, r3, #30
 80006a6:	d502      	bpl.n	80006ae <HAL_RCC_OscConfig+0xf6>
 80006a8:	692b      	ldr	r3, [r5, #16]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d1af      	bne.n	800060e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006ae:	6823      	ldr	r3, [r4, #0]
 80006b0:	696a      	ldr	r2, [r5, #20]
 80006b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80006ba:	6023      	str	r3, [r4, #0]
 80006bc:	e785      	b.n	80005ca <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80006be:	692a      	ldr	r2, [r5, #16]
 80006c0:	4b5a      	ldr	r3, [pc, #360]	; (800082c <HAL_RCC_OscConfig+0x274>)
 80006c2:	b16a      	cbz	r2, 80006e0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006c8:	f7ff fdee 	bl	80002a8 <HAL_GetTick>
 80006cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	079f      	lsls	r7, r3, #30
 80006d2:	d4ec      	bmi.n	80006ae <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006d4:	f7ff fde8 	bl	80002a8 <HAL_GetTick>
 80006d8:	1b80      	subs	r0, r0, r6
 80006da:	2802      	cmp	r0, #2
 80006dc:	d9f7      	bls.n	80006ce <HAL_RCC_OscConfig+0x116>
 80006de:	e7ad      	b.n	800063c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80006e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006e2:	f7ff fde1 	bl	80002a8 <HAL_GetTick>
 80006e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006e8:	6823      	ldr	r3, [r4, #0]
 80006ea:	0798      	lsls	r0, r3, #30
 80006ec:	f57f af6d 	bpl.w	80005ca <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006f0:	f7ff fdda 	bl	80002a8 <HAL_GetTick>
 80006f4:	1b80      	subs	r0, r0, r6
 80006f6:	2802      	cmp	r0, #2
 80006f8:	d9f6      	bls.n	80006e8 <HAL_RCC_OscConfig+0x130>
 80006fa:	e79f      	b.n	800063c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006fc:	69aa      	ldr	r2, [r5, #24]
 80006fe:	4c4a      	ldr	r4, [pc, #296]	; (8000828 <HAL_RCC_OscConfig+0x270>)
 8000700:	4b4b      	ldr	r3, [pc, #300]	; (8000830 <HAL_RCC_OscConfig+0x278>)
 8000702:	b1da      	cbz	r2, 800073c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000704:	2201      	movs	r2, #1
 8000706:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000708:	f7ff fdce 	bl	80002a8 <HAL_GetTick>
 800070c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800070e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000710:	079b      	lsls	r3, r3, #30
 8000712:	d50d      	bpl.n	8000730 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000714:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000718:	4b46      	ldr	r3, [pc, #280]	; (8000834 <HAL_RCC_OscConfig+0x27c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000720:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000722:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000724:	9b01      	ldr	r3, [sp, #4]
 8000726:	1e5a      	subs	r2, r3, #1
 8000728:	9201      	str	r2, [sp, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f9      	bne.n	8000722 <HAL_RCC_OscConfig+0x16a>
 800072e:	e750      	b.n	80005d2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000730:	f7ff fdba 	bl	80002a8 <HAL_GetTick>
 8000734:	1b80      	subs	r0, r0, r6
 8000736:	2802      	cmp	r0, #2
 8000738:	d9e9      	bls.n	800070e <HAL_RCC_OscConfig+0x156>
 800073a:	e77f      	b.n	800063c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800073c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800073e:	f7ff fdb3 	bl	80002a8 <HAL_GetTick>
 8000742:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000746:	079f      	lsls	r7, r3, #30
 8000748:	f57f af43 	bpl.w	80005d2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800074c:	f7ff fdac 	bl	80002a8 <HAL_GetTick>
 8000750:	1b80      	subs	r0, r0, r6
 8000752:	2802      	cmp	r0, #2
 8000754:	d9f6      	bls.n	8000744 <HAL_RCC_OscConfig+0x18c>
 8000756:	e771      	b.n	800063c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000758:	4c33      	ldr	r4, [pc, #204]	; (8000828 <HAL_RCC_OscConfig+0x270>)
 800075a:	69e3      	ldr	r3, [r4, #28]
 800075c:	00d8      	lsls	r0, r3, #3
 800075e:	d424      	bmi.n	80007aa <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000760:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	69e3      	ldr	r3, [r4, #28]
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	61e3      	str	r3, [r4, #28]
 800076a:	69e3      	ldr	r3, [r4, #28]
 800076c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000774:	4e30      	ldr	r6, [pc, #192]	; (8000838 <HAL_RCC_OscConfig+0x280>)
 8000776:	6833      	ldr	r3, [r6, #0]
 8000778:	05d9      	lsls	r1, r3, #23
 800077a:	d518      	bpl.n	80007ae <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800077c:	68eb      	ldr	r3, [r5, #12]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d126      	bne.n	80007d0 <HAL_RCC_OscConfig+0x218>
 8000782:	6a23      	ldr	r3, [r4, #32]
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800078a:	f7ff fd8d 	bl	80002a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800078e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000792:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000794:	6a23      	ldr	r3, [r4, #32]
 8000796:	079b      	lsls	r3, r3, #30
 8000798:	d53f      	bpl.n	800081a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800079a:	2f00      	cmp	r7, #0
 800079c:	f43f af1d 	beq.w	80005da <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007a0:	69e3      	ldr	r3, [r4, #28]
 80007a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007a6:	61e3      	str	r3, [r4, #28]
 80007a8:	e717      	b.n	80005da <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80007aa:	2700      	movs	r7, #0
 80007ac:	e7e2      	b.n	8000774 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007ae:	6833      	ldr	r3, [r6, #0]
 80007b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80007b6:	f7ff fd77 	bl	80002a8 <HAL_GetTick>
 80007ba:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007bc:	6833      	ldr	r3, [r6, #0]
 80007be:	05da      	lsls	r2, r3, #23
 80007c0:	d4dc      	bmi.n	800077c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007c2:	f7ff fd71 	bl	80002a8 <HAL_GetTick>
 80007c6:	eba0 0008 	sub.w	r0, r0, r8
 80007ca:	2864      	cmp	r0, #100	; 0x64
 80007cc:	d9f6      	bls.n	80007bc <HAL_RCC_OscConfig+0x204>
 80007ce:	e735      	b.n	800063c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007d0:	b9ab      	cbnz	r3, 80007fe <HAL_RCC_OscConfig+0x246>
 80007d2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007d4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007d8:	f023 0301 	bic.w	r3, r3, #1
 80007dc:	6223      	str	r3, [r4, #32]
 80007de:	6a23      	ldr	r3, [r4, #32]
 80007e0:	f023 0304 	bic.w	r3, r3, #4
 80007e4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007e6:	f7ff fd5f 	bl	80002a8 <HAL_GetTick>
 80007ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007ec:	6a23      	ldr	r3, [r4, #32]
 80007ee:	0798      	lsls	r0, r3, #30
 80007f0:	d5d3      	bpl.n	800079a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007f2:	f7ff fd59 	bl	80002a8 <HAL_GetTick>
 80007f6:	1b80      	subs	r0, r0, r6
 80007f8:	4540      	cmp	r0, r8
 80007fa:	d9f7      	bls.n	80007ec <HAL_RCC_OscConfig+0x234>
 80007fc:	e71e      	b.n	800063c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007fe:	2b05      	cmp	r3, #5
 8000800:	6a23      	ldr	r3, [r4, #32]
 8000802:	d103      	bne.n	800080c <HAL_RCC_OscConfig+0x254>
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6223      	str	r3, [r4, #32]
 800080a:	e7ba      	b.n	8000782 <HAL_RCC_OscConfig+0x1ca>
 800080c:	f023 0301 	bic.w	r3, r3, #1
 8000810:	6223      	str	r3, [r4, #32]
 8000812:	6a23      	ldr	r3, [r4, #32]
 8000814:	f023 0304 	bic.w	r3, r3, #4
 8000818:	e7b6      	b.n	8000788 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800081a:	f7ff fd45 	bl	80002a8 <HAL_GetTick>
 800081e:	eba0 0008 	sub.w	r0, r0, r8
 8000822:	42b0      	cmp	r0, r6
 8000824:	d9b6      	bls.n	8000794 <HAL_RCC_OscConfig+0x1dc>
 8000826:	e709      	b.n	800063c <HAL_RCC_OscConfig+0x84>
 8000828:	40021000 	.word	0x40021000
 800082c:	42420000 	.word	0x42420000
 8000830:	42420480 	.word	0x42420480
 8000834:	20000008 	.word	0x20000008
 8000838:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800083c:	4c22      	ldr	r4, [pc, #136]	; (80008c8 <HAL_RCC_OscConfig+0x310>)
 800083e:	6863      	ldr	r3, [r4, #4]
 8000840:	f003 030c 	and.w	r3, r3, #12
 8000844:	2b08      	cmp	r3, #8
 8000846:	f43f aee2 	beq.w	800060e <HAL_RCC_OscConfig+0x56>
 800084a:	2300      	movs	r3, #0
 800084c:	4e1f      	ldr	r6, [pc, #124]	; (80008cc <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800084e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000850:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000852:	d12b      	bne.n	80008ac <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000854:	f7ff fd28 	bl	80002a8 <HAL_GetTick>
 8000858:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800085a:	6823      	ldr	r3, [r4, #0]
 800085c:	0199      	lsls	r1, r3, #6
 800085e:	d41f      	bmi.n	80008a0 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000860:	6a2b      	ldr	r3, [r5, #32]
 8000862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000866:	d105      	bne.n	8000874 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000868:	6862      	ldr	r2, [r4, #4]
 800086a:	68a9      	ldr	r1, [r5, #8]
 800086c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000870:	430a      	orrs	r2, r1
 8000872:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000874:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000876:	6862      	ldr	r2, [r4, #4]
 8000878:	430b      	orrs	r3, r1
 800087a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800087e:	4313      	orrs	r3, r2
 8000880:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000882:	2301      	movs	r3, #1
 8000884:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000886:	f7ff fd0f 	bl	80002a8 <HAL_GetTick>
 800088a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800088c:	6823      	ldr	r3, [r4, #0]
 800088e:	019a      	lsls	r2, r3, #6
 8000890:	f53f aea7 	bmi.w	80005e2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000894:	f7ff fd08 	bl	80002a8 <HAL_GetTick>
 8000898:	1b40      	subs	r0, r0, r5
 800089a:	2802      	cmp	r0, #2
 800089c:	d9f6      	bls.n	800088c <HAL_RCC_OscConfig+0x2d4>
 800089e:	e6cd      	b.n	800063c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008a0:	f7ff fd02 	bl	80002a8 <HAL_GetTick>
 80008a4:	1bc0      	subs	r0, r0, r7
 80008a6:	2802      	cmp	r0, #2
 80008a8:	d9d7      	bls.n	800085a <HAL_RCC_OscConfig+0x2a2>
 80008aa:	e6c7      	b.n	800063c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80008ac:	f7ff fcfc 	bl	80002a8 <HAL_GetTick>
 80008b0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008b2:	6823      	ldr	r3, [r4, #0]
 80008b4:	019b      	lsls	r3, r3, #6
 80008b6:	f57f ae94 	bpl.w	80005e2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008ba:	f7ff fcf5 	bl	80002a8 <HAL_GetTick>
 80008be:	1b40      	subs	r0, r0, r5
 80008c0:	2802      	cmp	r0, #2
 80008c2:	d9f6      	bls.n	80008b2 <HAL_RCC_OscConfig+0x2fa>
 80008c4:	e6ba      	b.n	800063c <HAL_RCC_OscConfig+0x84>
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000
 80008cc:	42420060 	.word	0x42420060

080008d0 <HAL_RCC_GetSysClockFreq>:
{
 80008d0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80008d4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80008d6:	ac02      	add	r4, sp, #8
 80008d8:	f103 0510 	add.w	r5, r3, #16
 80008dc:	4622      	mov	r2, r4
 80008de:	6818      	ldr	r0, [r3, #0]
 80008e0:	6859      	ldr	r1, [r3, #4]
 80008e2:	3308      	adds	r3, #8
 80008e4:	c203      	stmia	r2!, {r0, r1}
 80008e6:	42ab      	cmp	r3, r5
 80008e8:	4614      	mov	r4, r2
 80008ea:	d1f7      	bne.n	80008dc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80008ec:	2301      	movs	r3, #1
 80008ee:	f88d 3004 	strb.w	r3, [sp, #4]
 80008f2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80008f4:	4911      	ldr	r1, [pc, #68]	; (800093c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80008f6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80008fa:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80008fc:	f003 020c 	and.w	r2, r3, #12
 8000900:	2a08      	cmp	r2, #8
 8000902:	d117      	bne.n	8000934 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000904:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000908:	a806      	add	r0, sp, #24
 800090a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800090c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800090e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000912:	d50c      	bpl.n	800092e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000914:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000916:	480a      	ldr	r0, [pc, #40]	; (8000940 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000918:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800091c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800091e:	aa06      	add	r2, sp, #24
 8000920:	4413      	add	r3, r2
 8000922:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000926:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800092a:	b007      	add	sp, #28
 800092c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <HAL_RCC_GetSysClockFreq+0x74>)
 8000930:	4350      	muls	r0, r2
 8000932:	e7fa      	b.n	800092a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000936:	e7f8      	b.n	800092a <HAL_RCC_GetSysClockFreq+0x5a>
 8000938:	08000dfc 	.word	0x08000dfc
 800093c:	40021000 	.word	0x40021000
 8000940:	007a1200 	.word	0x007a1200
 8000944:	003d0900 	.word	0x003d0900

08000948 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000948:	4a54      	ldr	r2, [pc, #336]	; (8000a9c <HAL_RCC_ClockConfig+0x154>)
{
 800094a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800094e:	6813      	ldr	r3, [r2, #0]
{
 8000950:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	428b      	cmp	r3, r1
{
 8000958:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800095a:	d32a      	bcc.n	80009b2 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800095c:	6829      	ldr	r1, [r5, #0]
 800095e:	078c      	lsls	r4, r1, #30
 8000960:	d434      	bmi.n	80009cc <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000962:	07ca      	lsls	r2, r1, #31
 8000964:	d447      	bmi.n	80009f6 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000966:	4a4d      	ldr	r2, [pc, #308]	; (8000a9c <HAL_RCC_ClockConfig+0x154>)
 8000968:	6813      	ldr	r3, [r2, #0]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	429e      	cmp	r6, r3
 8000970:	f0c0 8082 	bcc.w	8000a78 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000974:	682a      	ldr	r2, [r5, #0]
 8000976:	4c4a      	ldr	r4, [pc, #296]	; (8000aa0 <HAL_RCC_ClockConfig+0x158>)
 8000978:	f012 0f04 	tst.w	r2, #4
 800097c:	f040 8087 	bne.w	8000a8e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000980:	0713      	lsls	r3, r2, #28
 8000982:	d506      	bpl.n	8000992 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000984:	6863      	ldr	r3, [r4, #4]
 8000986:	692a      	ldr	r2, [r5, #16]
 8000988:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800098c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000990:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000992:	f7ff ff9d 	bl	80008d0 <HAL_RCC_GetSysClockFreq>
 8000996:	6863      	ldr	r3, [r4, #4]
 8000998:	4a42      	ldr	r2, [pc, #264]	; (8000aa4 <HAL_RCC_ClockConfig+0x15c>)
 800099a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800099e:	5cd3      	ldrb	r3, [r2, r3]
 80009a0:	40d8      	lsrs	r0, r3
 80009a2:	4b41      	ldr	r3, [pc, #260]	; (8000aa8 <HAL_RCC_ClockConfig+0x160>)
 80009a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fc3c 	bl	8000224 <HAL_InitTick>
  return HAL_OK;
 80009ac:	2000      	movs	r0, #0
}
 80009ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009b2:	6813      	ldr	r3, [r2, #0]
 80009b4:	f023 0307 	bic.w	r3, r3, #7
 80009b8:	430b      	orrs	r3, r1
 80009ba:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009bc:	6813      	ldr	r3, [r2, #0]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	4299      	cmp	r1, r3
 80009c4:	d0ca      	beq.n	800095c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80009c6:	2001      	movs	r0, #1
 80009c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009cc:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009ce:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80009d2:	bf1e      	ittt	ne
 80009d4:	685a      	ldrne	r2, [r3, #4]
 80009d6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80009da:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009dc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80009de:	bf42      	ittt	mi
 80009e0:	685a      	ldrmi	r2, [r3, #4]
 80009e2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80009e6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009e8:	685a      	ldr	r2, [r3, #4]
 80009ea:	68a8      	ldr	r0, [r5, #8]
 80009ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80009f0:	4302      	orrs	r2, r0
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	e7b5      	b.n	8000962 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009f6:	686a      	ldr	r2, [r5, #4]
 80009f8:	4c29      	ldr	r4, [pc, #164]	; (8000aa0 <HAL_RCC_ClockConfig+0x158>)
 80009fa:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009fc:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009fe:	d11c      	bne.n	8000a3a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a00:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a04:	d0df      	beq.n	80009c6 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a06:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a08:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a0c:	f023 0303 	bic.w	r3, r3, #3
 8000a10:	4313      	orrs	r3, r2
 8000a12:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000a14:	f7ff fc48 	bl	80002a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a18:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000a1a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d114      	bne.n	8000a4a <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a20:	6863      	ldr	r3, [r4, #4]
 8000a22:	f003 030c 	and.w	r3, r3, #12
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	d09d      	beq.n	8000966 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a2a:	f7ff fc3d 	bl	80002a8 <HAL_GetTick>
 8000a2e:	1bc0      	subs	r0, r0, r7
 8000a30:	4540      	cmp	r0, r8
 8000a32:	d9f5      	bls.n	8000a20 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000a34:	2003      	movs	r0, #3
 8000a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a3a:	2a02      	cmp	r2, #2
 8000a3c:	d102      	bne.n	8000a44 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a3e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000a42:	e7df      	b.n	8000a04 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a44:	f013 0f02 	tst.w	r3, #2
 8000a48:	e7dc      	b.n	8000a04 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d10f      	bne.n	8000a6e <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a4e:	6863      	ldr	r3, [r4, #4]
 8000a50:	f003 030c 	and.w	r3, r3, #12
 8000a54:	2b08      	cmp	r3, #8
 8000a56:	d086      	beq.n	8000966 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a58:	f7ff fc26 	bl	80002a8 <HAL_GetTick>
 8000a5c:	1bc0      	subs	r0, r0, r7
 8000a5e:	4540      	cmp	r0, r8
 8000a60:	d9f5      	bls.n	8000a4e <HAL_RCC_ClockConfig+0x106>
 8000a62:	e7e7      	b.n	8000a34 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a64:	f7ff fc20 	bl	80002a8 <HAL_GetTick>
 8000a68:	1bc0      	subs	r0, r0, r7
 8000a6a:	4540      	cmp	r0, r8
 8000a6c:	d8e2      	bhi.n	8000a34 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a6e:	6863      	ldr	r3, [r4, #4]
 8000a70:	f013 0f0c 	tst.w	r3, #12
 8000a74:	d1f6      	bne.n	8000a64 <HAL_RCC_ClockConfig+0x11c>
 8000a76:	e776      	b.n	8000966 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a78:	6813      	ldr	r3, [r2, #0]
 8000a7a:	f023 0307 	bic.w	r3, r3, #7
 8000a7e:	4333      	orrs	r3, r6
 8000a80:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a82:	6813      	ldr	r3, [r2, #0]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	429e      	cmp	r6, r3
 8000a8a:	d19c      	bne.n	80009c6 <HAL_RCC_ClockConfig+0x7e>
 8000a8c:	e772      	b.n	8000974 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a8e:	6863      	ldr	r3, [r4, #4]
 8000a90:	68e9      	ldr	r1, [r5, #12]
 8000a92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a96:	430b      	orrs	r3, r1
 8000a98:	6063      	str	r3, [r4, #4]
 8000a9a:	e771      	b.n	8000980 <HAL_RCC_ClockConfig+0x38>
 8000a9c:	40022000 	.word	0x40022000
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	08000e0c 	.word	0x08000e0c
 8000aa8:	20000008 	.word	0x20000008

08000aac <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	2210      	movs	r2, #16
{
 8000aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ab2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	eb0d 0002 	add.w	r0, sp, r2
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f000 f98b 	bl	8000dd4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000abe:	4b37      	ldr	r3, [pc, #220]	; (8000b9c <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ac0:	4e37      	ldr	r6, [pc, #220]	; (8000ba0 <MX_GPIO_Init+0xf4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ac2:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|BEEP_Pin, GPIO_PIN_RESET);
 8000ac4:	4f37      	ldr	r7, [pc, #220]	; (8000ba4 <MX_GPIO_Init+0xf8>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000aca:	619a      	str	r2, [r3, #24]
 8000acc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ace:	4630      	mov	r0, r6
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000ad4:	9201      	str	r2, [sp, #4]
 8000ad6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ada:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	f042 0204 	orr.w	r2, r2, #4
 8000ae0:	619a      	str	r2, [r3, #24]
 8000ae2:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	f002 0204 	and.w	r2, r2, #4
 8000aea:	9202      	str	r2, [sp, #8]
 8000aec:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	f042 0208 	orr.w	r2, r2, #8
 8000af6:	619a      	str	r2, [r3, #24]
 8000af8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	f003 0308 	and.w	r3, r3, #8
 8000b00:	9303      	str	r3, [sp, #12]
 8000b02:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000b04:	f7ff fd42 	bl	800058c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|BEEP_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	4638      	mov	r0, r7
 8000b0c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000b10:	f7ff fd3c 	bl	800058c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8000b14:	2318      	movs	r3, #24
 8000b16:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b18:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <MX_GPIO_Init+0xfc>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b1a:	a904      	add	r1, sp, #16
 8000b1c:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b1e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b20:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b26:	f7ff fc3f 	bl	80003a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_Pin;
 8000b2a:	2320      	movs	r3, #32
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	a904      	add	r1, sp, #16
 8000b2e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LED1_Pin;
 8000b30:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b36:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f7ff fc35 	bl	80003a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <MX_GPIO_Init+0x100>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000b40:	a904      	add	r1, sp, #16
 8000b42:	481b      	ldr	r0, [pc, #108]	; (8000bb0 <MX_GPIO_Init+0x104>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b44:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8000b46:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f7ff fc2d 	bl	80003a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED0_Pin|BEEP_Pin;
 8000b4e:	f44f 7390 	mov.w	r3, #288	; 0x120
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	a904      	add	r1, sp, #16
 8000b54:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LED0_Pin|BEEP_Pin;
 8000b56:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5c:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f7ff fc22 	bl	80003a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8000b64:	4622      	mov	r2, r4
 8000b66:	2102      	movs	r1, #2
 8000b68:	2006      	movs	r0, #6
 8000b6a:	f7ff fbc7 	bl	80002fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b6e:	2006      	movs	r0, #6
 8000b70:	f7ff fbf8 	bl	8000364 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 1);
 8000b74:	462a      	mov	r2, r5
 8000b76:	2102      	movs	r1, #2
 8000b78:	2009      	movs	r0, #9
 8000b7a:	f7ff fbbf 	bl	80002fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b7e:	2009      	movs	r0, #9
 8000b80:	f7ff fbf0 	bl	8000364 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 2);
 8000b84:	2202      	movs	r2, #2
 8000b86:	200a      	movs	r0, #10
 8000b88:	4611      	mov	r1, r2
 8000b8a:	f7ff fbb7 	bl	80002fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b8e:	200a      	movs	r0, #10
 8000b90:	f7ff fbe8 	bl	8000364 <HAL_NVIC_EnableIRQ>

}
 8000b94:	b008      	add	sp, #32
 8000b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40011800 	.word	0x40011800
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	10210000 	.word	0x10210000
 8000bac:	10110000 	.word	0x10110000
 8000bb0:	40010800 	.word	0x40010800

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b510      	push	{r4, lr}
 8000bb6:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb8:	2228      	movs	r2, #40	; 0x28
 8000bba:	2100      	movs	r1, #0
 8000bbc:	a806      	add	r0, sp, #24
 8000bbe:	f000 f909 	bl	8000dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2214      	movs	r2, #20
 8000bc6:	a801      	add	r0, sp, #4
 8000bc8:	f000 f904 	bl	8000dd4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd0:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bd8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bdc:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bde:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000be2:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be4:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be6:	f7ff fce7 	bl	80005b8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf2:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf4:	4621      	mov	r1, r4
 8000bf6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf8:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bfc:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c00:	f7ff fea2 	bl	8000948 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000c04:	b010      	add	sp, #64	; 0x40
 8000c06:	bd10      	pop	{r4, pc}

08000c08 <main>:
{
 8000c08:	b508      	push	{r3, lr}
  HAL_Init();
 8000c0a:	f7ff fb2f 	bl	800026c <HAL_Init>
  SystemClock_Config();
 8000c0e:	f7ff ffd1 	bl	8000bb4 <SystemClock_Config>
  MX_GPIO_Init();
 8000c12:	f7ff ff4b 	bl	8000aac <MX_GPIO_Init>
 8000c16:	e7fe      	b.n	8000c16 <main+0xe>

08000c18 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000c18:	b510      	push	{r4, lr}
 8000c1a:	4604      	mov	r4, r0
	HAL_Delay(10);
 8000c1c:	200a      	movs	r0, #10
 8000c1e:	f7ff fb49 	bl	80002b4 <HAL_Delay>
//			HAL_GPIO_TogglePin(BEEP_GPIO_Port,BEEP_Pin);
//			HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
//			HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
//			break;
//	}
	if(GPIO_PIN == KEY0_Pin)
 8000c22:	2c10      	cmp	r4, #16
 8000c24:	d10a      	bne.n	8000c3c <HAL_GPIO_EXTI_Callback+0x24>
	{
//		HAL_Delay(10);
		if(HAL_GPIO_ReadPin(KEY0_GPIO_Port,KEY0_Pin) == 0)
 8000c26:	4621      	mov	r1, r4
 8000c28:	4812      	ldr	r0, [pc, #72]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c2a:	f7ff fca9 	bl	8000580 <HAL_GPIO_ReadPin>
 8000c2e:	b9f8      	cbnz	r0, 8000c70 <HAL_GPIO_EXTI_Callback+0x58>
			HAL_GPIO_TogglePin(BEEP_GPIO_Port,BEEP_Pin);
			HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
			HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
		}
	}
}
 8000c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_GPIO_TogglePin(LED0_GPIO_Port,LED0_Pin);
 8000c34:	2120      	movs	r1, #32
 8000c36:	4810      	ldr	r0, [pc, #64]	; (8000c78 <HAL_GPIO_EXTI_Callback+0x60>)
 8000c38:	f7ff bcad 	b.w	8000596 <HAL_GPIO_TogglePin>
	else if(GPIO_PIN == KEY1_Pin)
 8000c3c:	2c08      	cmp	r4, #8
 8000c3e:	d109      	bne.n	8000c54 <HAL_GPIO_EXTI_Callback+0x3c>
		if(HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin) == 0)
 8000c40:	4621      	mov	r1, r4
 8000c42:	480c      	ldr	r0, [pc, #48]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c44:	f7ff fc9c 	bl	8000580 <HAL_GPIO_ReadPin>
 8000c48:	b990      	cbnz	r0, 8000c70 <HAL_GPIO_EXTI_Callback+0x58>
			HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000c4a:	2120      	movs	r1, #32
 8000c4c:	4809      	ldr	r0, [pc, #36]	; (8000c74 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000c4e:	f7ff fca2 	bl	8000596 <HAL_GPIO_TogglePin>
 8000c52:	e7ed      	b.n	8000c30 <HAL_GPIO_EXTI_Callback+0x18>
	else if(GPIO_PIN == WK_UP_Pin)
 8000c54:	2c01      	cmp	r4, #1
 8000c56:	d10b      	bne.n	8000c70 <HAL_GPIO_EXTI_Callback+0x58>
		if(HAL_GPIO_ReadPin(WK_UP_GPIO_Port,WK_UP_Pin) ==1)
 8000c58:	4621      	mov	r1, r4
 8000c5a:	4808      	ldr	r0, [pc, #32]	; (8000c7c <HAL_GPIO_EXTI_Callback+0x64>)
 8000c5c:	f7ff fc90 	bl	8000580 <HAL_GPIO_ReadPin>
 8000c60:	2801      	cmp	r0, #1
 8000c62:	d105      	bne.n	8000c70 <HAL_GPIO_EXTI_Callback+0x58>
			HAL_GPIO_TogglePin(BEEP_GPIO_Port,BEEP_Pin);
 8000c64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <HAL_GPIO_EXTI_Callback+0x60>)
 8000c6a:	f7ff fc94 	bl	8000596 <HAL_GPIO_TogglePin>
 8000c6e:	e7ec      	b.n	8000c4a <HAL_GPIO_EXTI_Callback+0x32>
 8000c70:	bd10      	pop	{r4, pc}
 8000c72:	bf00      	nop
 8000c74:	40011800 	.word	0x40011800
 8000c78:	40010c00 	.word	0x40010c00
 8000c7c:	40010800 	.word	0x40010800

08000c80 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_MspInit+0x44>)
{
 8000c82:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c84:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000c86:	2005      	movs	r0, #5
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c88:	f042 0201 	orr.w	r2, r2, #1
 8000c8c:	619a      	str	r2, [r3, #24]
 8000c8e:	699a      	ldr	r2, [r3, #24]
 8000c90:	f002 0201 	and.w	r2, r2, #1
 8000c94:	9200      	str	r2, [sp, #0]
 8000c96:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c98:	69da      	ldr	r2, [r3, #28]
 8000c9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c9e:	61da      	str	r2, [r3, #28]
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000caa:	f7ff fb15 	bl	80002d8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cae:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <HAL_MspInit+0x48>)
 8000cb0:	6853      	ldr	r3, [r2, #4]
 8000cb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cba:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbc:	b003      	add	sp, #12
 8000cbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010000 	.word	0x40010000

08000ccc <NMI_Handler>:
 8000ccc:	4770      	bx	lr

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler>

08000cd6 <SVC_Handler>:
 8000cd6:	4770      	bx	lr

08000cd8 <DebugMon_Handler>:
 8000cd8:	4770      	bx	lr

08000cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cdc:	f7ff bad8 	b.w	8000290 <HAL_IncTick>

08000ce0 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f7ff bc5d 	b.w	80005a0 <HAL_GPIO_EXTI_IRQHandler>

08000ce6 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000ce6:	2008      	movs	r0, #8
 8000ce8:	f7ff bc5a 	b.w	80005a0 <HAL_GPIO_EXTI_IRQHandler>

08000cec <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000cec:	2010      	movs	r0, #16
 8000cee:	f7ff bc57 	b.w	80005a0 <HAL_GPIO_EXTI_IRQHandler>
	...

08000cf4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <SystemInit+0x40>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	f042 0201 	orr.w	r2, r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000cfe:	6859      	ldr	r1, [r3, #4]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <SystemInit+0x44>)
 8000d02:	400a      	ands	r2, r1
 8000d04:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000d0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d10:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d18:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000d20:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000d22:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000d26:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000d28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <SystemInit+0x48>)
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000
 8000d38:	f8ff0000 	.word	0xf8ff0000
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d40:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d42:	e003      	b.n	8000d4c <LoopCopyDataInit>

08000d44 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d46:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d48:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d4a:	3104      	adds	r1, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d4c:	480a      	ldr	r0, [pc, #40]	; (8000d78 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d50:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d52:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d54:	d3f6      	bcc.n	8000d44 <CopyDataInit>
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d58:	e002      	b.n	8000d60 <LoopFillZerobss>

08000d5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d5c:	f842 3b04 	str.w	r3, [r2], #4

08000d60 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d62:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d64:	d3f9      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d66:	f7ff ffc5 	bl	8000cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f000 f80f 	bl	8000d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d6e:	f7ff ff4b 	bl	8000c08 <main>
  bx lr
 8000d72:	4770      	bx	lr
  ldr r3, =_sidata
 8000d74:	08000e24 	.word	0x08000e24
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000d80:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000d84:	2000002c 	.word	0x2000002c

08000d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC1_2_IRQHandler>
	...

08000d8c <__libc_init_array>:
 8000d8c:	b570      	push	{r4, r5, r6, lr}
 8000d8e:	2500      	movs	r5, #0
 8000d90:	4e0c      	ldr	r6, [pc, #48]	; (8000dc4 <__libc_init_array+0x38>)
 8000d92:	4c0d      	ldr	r4, [pc, #52]	; (8000dc8 <__libc_init_array+0x3c>)
 8000d94:	1ba4      	subs	r4, r4, r6
 8000d96:	10a4      	asrs	r4, r4, #2
 8000d98:	42a5      	cmp	r5, r4
 8000d9a:	d109      	bne.n	8000db0 <__libc_init_array+0x24>
 8000d9c:	f000 f822 	bl	8000de4 <_init>
 8000da0:	2500      	movs	r5, #0
 8000da2:	4e0a      	ldr	r6, [pc, #40]	; (8000dcc <__libc_init_array+0x40>)
 8000da4:	4c0a      	ldr	r4, [pc, #40]	; (8000dd0 <__libc_init_array+0x44>)
 8000da6:	1ba4      	subs	r4, r4, r6
 8000da8:	10a4      	asrs	r4, r4, #2
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d105      	bne.n	8000dba <__libc_init_array+0x2e>
 8000dae:	bd70      	pop	{r4, r5, r6, pc}
 8000db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000db4:	4798      	blx	r3
 8000db6:	3501      	adds	r5, #1
 8000db8:	e7ee      	b.n	8000d98 <__libc_init_array+0xc>
 8000dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dbe:	4798      	blx	r3
 8000dc0:	3501      	adds	r5, #1
 8000dc2:	e7f2      	b.n	8000daa <__libc_init_array+0x1e>
 8000dc4:	08000e1c 	.word	0x08000e1c
 8000dc8:	08000e1c 	.word	0x08000e1c
 8000dcc:	08000e1c 	.word	0x08000e1c
 8000dd0:	08000e20 	.word	0x08000e20

08000dd4 <memset>:
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4402      	add	r2, r0
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d100      	bne.n	8000dde <memset+0xa>
 8000ddc:	4770      	bx	lr
 8000dde:	f803 1b01 	strb.w	r1, [r3], #1
 8000de2:	e7f9      	b.n	8000dd8 <memset+0x4>

08000de4 <_init>:
 8000de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de6:	bf00      	nop
 8000de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dea:	bc08      	pop	{r3}
 8000dec:	469e      	mov	lr, r3
 8000dee:	4770      	bx	lr

08000df0 <_fini>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	bf00      	nop
 8000df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000df6:	bc08      	pop	{r3}
 8000df8:	469e      	mov	lr, r3
 8000dfa:	4770      	bx	lr
