
PWM_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001134  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001318  08001318  00011318  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001338  08001338  00011338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800133c  0800133c  0001133c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000060  2000000c  0800134c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000006c  0800134c  0002006c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ebca  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f8e  00000000  00000000  0002ebff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004811  00000000  00000000  00030b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006b0  00000000  00000000  000353a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000858  00000000  00000000  00035a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003bc1  00000000  00000000  000362a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002c28  00000000  00000000  00039e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003ca91  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000012a8  00000000  00000000  0003cb10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08001300 	.word	0x08001300

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08001300 	.word	0x08001300

08000224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000224:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <HAL_InitTick+0x3c>)
{
 8000228:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800022a:	7818      	ldrb	r0, [r3, #0]
 800022c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000230:	fbb3 f3f0 	udiv	r3, r3, r0
 8000234:	4a0b      	ldr	r2, [pc, #44]	; (8000264 <HAL_InitTick+0x40>)
 8000236:	6810      	ldr	r0, [r2, #0]
 8000238:	fbb0 f0f3 	udiv	r0, r0, r3
 800023c:	f000 f892 	bl	8000364 <HAL_SYSTICK_Config>
 8000240:	4604      	mov	r4, r0
 8000242:	b958      	cbnz	r0, 800025c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000244:	2d0f      	cmp	r5, #15
 8000246:	d809      	bhi.n	800025c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000248:	4602      	mov	r2, r0
 800024a:	4629      	mov	r1, r5
 800024c:	f04f 30ff 	mov.w	r0, #4294967295
 8000250:	f000 f854 	bl	80002fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <HAL_InitTick+0x44>)
 8000256:	4620      	mov	r0, r4
 8000258:	601d      	str	r5, [r3, #0]
 800025a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800025c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800025e:	bd38      	pop	{r3, r4, r5, pc}
 8000260:	20000000 	.word	0x20000000
 8000264:	20000008 	.word	0x20000008
 8000268:	20000004 	.word	0x20000004

0800026c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026c:	4a07      	ldr	r2, [pc, #28]	; (800028c <HAL_Init+0x20>)
{
 800026e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000270:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000272:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	f043 0310 	orr.w	r3, r3, #16
 8000278:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800027a:	f000 f82d 	bl	80002d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800027e:	2000      	movs	r0, #0
 8000280:	f7ff ffd0 	bl	8000224 <HAL_InitTick>
  HAL_MspInit();
 8000284:	f000 ff00 	bl	8001088 <HAL_MspInit>
}
 8000288:	2000      	movs	r0, #0
 800028a:	bd08      	pop	{r3, pc}
 800028c:	40022000 	.word	0x40022000

08000290 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000290:	4a03      	ldr	r2, [pc, #12]	; (80002a0 <HAL_IncTick+0x10>)
 8000292:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <HAL_IncTick+0x14>)
 8000294:	6811      	ldr	r1, [r2, #0]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	440b      	add	r3, r1
 800029a:	6013      	str	r3, [r2, #0]
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	20000028 	.word	0x20000028
 80002a4:	20000000 	.word	0x20000000

080002a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002a8:	4b01      	ldr	r3, [pc, #4]	; (80002b0 <HAL_GetTick+0x8>)
 80002aa:	6818      	ldr	r0, [r3, #0]
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000028 	.word	0x20000028

080002b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002b4:	b538      	push	{r3, r4, r5, lr}
 80002b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002b8:	f7ff fff6 	bl	80002a8 <HAL_GetTick>
 80002bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002be:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80002c0:	bf1e      	ittt	ne
 80002c2:	4b04      	ldrne	r3, [pc, #16]	; (80002d4 <HAL_Delay+0x20>)
 80002c4:	781b      	ldrbne	r3, [r3, #0]
 80002c6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002c8:	f7ff ffee 	bl	80002a8 <HAL_GetTick>
 80002cc:	1b40      	subs	r0, r0, r5
 80002ce:	4284      	cmp	r4, r0
 80002d0:	d8fa      	bhi.n	80002c8 <HAL_Delay+0x14>
  {
  }
}
 80002d2:	bd38      	pop	{r3, r4, r5, pc}
 80002d4:	20000000 	.word	0x20000000

080002d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002d8:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002da:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002dc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002e6:	041b      	lsls	r3, r3, #16
 80002e8:	0c1b      	lsrs	r3, r3, #16
 80002ea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80002f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002f4:	60d3      	str	r3, [r2, #12]
 80002f6:	4770      	bx	lr
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002fc:	4b17      	ldr	r3, [pc, #92]	; (800035c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002fe:	b530      	push	{r4, r5, lr}
 8000300:	68dc      	ldr	r4, [r3, #12]
 8000302:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000306:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800030a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800030c:	2b04      	cmp	r3, #4
 800030e:	bf28      	it	cs
 8000310:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000312:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000314:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000318:	bf98      	it	ls
 800031a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800031c:	fa05 f303 	lsl.w	r3, r5, r3
 8000320:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000324:	bf88      	it	hi
 8000326:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000328:	4019      	ands	r1, r3
 800032a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800032c:	fa05 f404 	lsl.w	r4, r5, r4
 8000330:	3c01      	subs	r4, #1
 8000332:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000334:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000336:	ea42 0201 	orr.w	r2, r2, r1
 800033a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033e:	bfaf      	iteee	ge
 8000340:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000344:	4b06      	ldrlt	r3, [pc, #24]	; (8000360 <HAL_NVIC_SetPriority+0x64>)
 8000346:	f000 000f 	andlt.w	r0, r0, #15
 800034a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034c:	bfa5      	ittet	ge
 800034e:	b2d2      	uxtbge	r2, r2
 8000350:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000354:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000356:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800035a:	bd30      	pop	{r4, r5, pc}
 800035c:	e000ed00 	.word	0xe000ed00
 8000360:	e000ed14 	.word	0xe000ed14

08000364 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000364:	3801      	subs	r0, #1
 8000366:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800036a:	d20a      	bcs.n	8000382 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000370:	4a06      	ldr	r2, [pc, #24]	; (800038c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000372:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000374:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000378:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800037a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800037c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000382:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	e000e010 	.word	0xe000e010
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000394:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000396:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000398:	4f6c      	ldr	r7, [pc, #432]	; (800054c <HAL_GPIO_Init+0x1bc>)
 800039a:	4b6d      	ldr	r3, [pc, #436]	; (8000550 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800039c:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8000558 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 80003a0:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 800055c <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 80003a4:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003a8:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80003aa:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003ae:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80003b2:	45a0      	cmp	r8, r4
 80003b4:	f040 8085 	bne.w	80004c2 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 80003b8:	684d      	ldr	r5, [r1, #4]
 80003ba:	2d12      	cmp	r5, #18
 80003bc:	f000 80b7 	beq.w	800052e <HAL_GPIO_Init+0x19e>
 80003c0:	f200 808d 	bhi.w	80004de <HAL_GPIO_Init+0x14e>
 80003c4:	2d02      	cmp	r5, #2
 80003c6:	f000 80af 	beq.w	8000528 <HAL_GPIO_Init+0x198>
 80003ca:	f200 8081 	bhi.w	80004d0 <HAL_GPIO_Init+0x140>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 8091 	beq.w	80004f6 <HAL_GPIO_Init+0x166>
 80003d4:	2d01      	cmp	r5, #1
 80003d6:	f000 80a5 	beq.w	8000524 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003da:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003de:	2cff      	cmp	r4, #255	; 0xff
 80003e0:	bf93      	iteet	ls
 80003e2:	4682      	movls	sl, r0
 80003e4:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80003e8:	3d08      	subhi	r5, #8
 80003ea:	f8d0 b000 	ldrls.w	fp, [r0]
 80003ee:	bf92      	itee	ls
 80003f0:	00b5      	lslls	r5, r6, #2
 80003f2:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80003f6:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003f8:	fa09 f805 	lsl.w	r8, r9, r5
 80003fc:	ea2b 0808 	bic.w	r8, fp, r8
 8000400:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000404:	bf88      	it	hi
 8000406:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800040a:	ea48 0505 	orr.w	r5, r8, r5
 800040e:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000412:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000416:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800041a:	d052      	beq.n	80004c2 <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800041c:	69bd      	ldr	r5, [r7, #24]
 800041e:	f026 0803 	bic.w	r8, r6, #3
 8000422:	f045 0501 	orr.w	r5, r5, #1
 8000426:	61bd      	str	r5, [r7, #24]
 8000428:	69bd      	ldr	r5, [r7, #24]
 800042a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800042e:	f005 0501 	and.w	r5, r5, #1
 8000432:	9501      	str	r5, [sp, #4]
 8000434:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000438:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800043c:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800043e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000442:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000446:	fa09 f90b 	lsl.w	r9, r9, fp
 800044a:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800044e:	4d41      	ldr	r5, [pc, #260]	; (8000554 <HAL_GPIO_Init+0x1c4>)
 8000450:	42a8      	cmp	r0, r5
 8000452:	d071      	beq.n	8000538 <HAL_GPIO_Init+0x1a8>
 8000454:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000458:	42a8      	cmp	r0, r5
 800045a:	d06f      	beq.n	800053c <HAL_GPIO_Init+0x1ac>
 800045c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000460:	42a8      	cmp	r0, r5
 8000462:	d06d      	beq.n	8000540 <HAL_GPIO_Init+0x1b0>
 8000464:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000468:	42a8      	cmp	r0, r5
 800046a:	d06b      	beq.n	8000544 <HAL_GPIO_Init+0x1b4>
 800046c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000470:	42a8      	cmp	r0, r5
 8000472:	d069      	beq.n	8000548 <HAL_GPIO_Init+0x1b8>
 8000474:	4570      	cmp	r0, lr
 8000476:	bf0c      	ite	eq
 8000478:	2505      	moveq	r5, #5
 800047a:	2506      	movne	r5, #6
 800047c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000480:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000484:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000488:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800048a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800048e:	bf14      	ite	ne
 8000490:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000492:	43a5      	biceq	r5, r4
 8000494:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000496:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000498:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800049c:	bf14      	ite	ne
 800049e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80004a0:	43a5      	biceq	r5, r4
 80004a2:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80004a4:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004a6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80004aa:	bf14      	ite	ne
 80004ac:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80004ae:	43a5      	biceq	r5, r4
 80004b0:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80004b2:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004b4:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80004b8:	bf14      	ite	ne
 80004ba:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80004bc:	ea25 0404 	biceq.w	r4, r5, r4
 80004c0:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80004c2:	3601      	adds	r6, #1
 80004c4:	2e10      	cmp	r6, #16
 80004c6:	f47f af6d 	bne.w	80003a4 <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 80004ca:	b003      	add	sp, #12
 80004cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80004d0:	2d03      	cmp	r5, #3
 80004d2:	d025      	beq.n	8000520 <HAL_GPIO_Init+0x190>
 80004d4:	2d11      	cmp	r5, #17
 80004d6:	d180      	bne.n	80003da <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004d8:	68ca      	ldr	r2, [r1, #12]
 80004da:	3204      	adds	r2, #4
          break;
 80004dc:	e77d      	b.n	80003da <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80004de:	4565      	cmp	r5, ip
 80004e0:	d009      	beq.n	80004f6 <HAL_GPIO_Init+0x166>
 80004e2:	d812      	bhi.n	800050a <HAL_GPIO_Init+0x17a>
 80004e4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000560 <HAL_GPIO_Init+0x1d0>
 80004e8:	454d      	cmp	r5, r9
 80004ea:	d004      	beq.n	80004f6 <HAL_GPIO_Init+0x166>
 80004ec:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004f0:	454d      	cmp	r5, r9
 80004f2:	f47f af72 	bne.w	80003da <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004f6:	688a      	ldr	r2, [r1, #8]
 80004f8:	b1e2      	cbz	r2, 8000534 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004fa:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80004fc:	bf0c      	ite	eq
 80004fe:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000502:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000506:	2208      	movs	r2, #8
 8000508:	e767      	b.n	80003da <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800050a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8000564 <HAL_GPIO_Init+0x1d4>
 800050e:	454d      	cmp	r5, r9
 8000510:	d0f1      	beq.n	80004f6 <HAL_GPIO_Init+0x166>
 8000512:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000516:	454d      	cmp	r5, r9
 8000518:	d0ed      	beq.n	80004f6 <HAL_GPIO_Init+0x166>
 800051a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800051e:	e7e7      	b.n	80004f0 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000520:	2200      	movs	r2, #0
 8000522:	e75a      	b.n	80003da <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000524:	68ca      	ldr	r2, [r1, #12]
          break;
 8000526:	e758      	b.n	80003da <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000528:	68ca      	ldr	r2, [r1, #12]
 800052a:	3208      	adds	r2, #8
          break;
 800052c:	e755      	b.n	80003da <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800052e:	68ca      	ldr	r2, [r1, #12]
 8000530:	320c      	adds	r2, #12
          break;
 8000532:	e752      	b.n	80003da <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000534:	2204      	movs	r2, #4
 8000536:	e750      	b.n	80003da <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000538:	2500      	movs	r5, #0
 800053a:	e79f      	b.n	800047c <HAL_GPIO_Init+0xec>
 800053c:	2501      	movs	r5, #1
 800053e:	e79d      	b.n	800047c <HAL_GPIO_Init+0xec>
 8000540:	2502      	movs	r5, #2
 8000542:	e79b      	b.n	800047c <HAL_GPIO_Init+0xec>
 8000544:	2503      	movs	r5, #3
 8000546:	e799      	b.n	800047c <HAL_GPIO_Init+0xec>
 8000548:	2504      	movs	r5, #4
 800054a:	e797      	b.n	800047c <HAL_GPIO_Init+0xec>
 800054c:	40021000 	.word	0x40021000
 8000550:	40010400 	.word	0x40010400
 8000554:	40010800 	.word	0x40010800
 8000558:	40011c00 	.word	0x40011c00
 800055c:	10210000 	.word	0x10210000
 8000560:	10110000 	.word	0x10110000
 8000564:	10310000 	.word	0x10310000

08000568 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000568:	6803      	ldr	r3, [r0, #0]
{
 800056a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800056e:	07db      	lsls	r3, r3, #31
{
 8000570:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000572:	d410      	bmi.n	8000596 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000574:	682b      	ldr	r3, [r5, #0]
 8000576:	079f      	lsls	r7, r3, #30
 8000578:	d45e      	bmi.n	8000638 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800057a:	682b      	ldr	r3, [r5, #0]
 800057c:	0719      	lsls	r1, r3, #28
 800057e:	f100 8095 	bmi.w	80006ac <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000582:	682b      	ldr	r3, [r5, #0]
 8000584:	075a      	lsls	r2, r3, #29
 8000586:	f100 80bf 	bmi.w	8000708 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800058a:	69ea      	ldr	r2, [r5, #28]
 800058c:	2a00      	cmp	r2, #0
 800058e:	f040 812d 	bne.w	80007ec <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000592:	2000      	movs	r0, #0
 8000594:	e014      	b.n	80005c0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000596:	4c90      	ldr	r4, [pc, #576]	; (80007d8 <HAL_RCC_OscConfig+0x270>)
 8000598:	6863      	ldr	r3, [r4, #4]
 800059a:	f003 030c 	and.w	r3, r3, #12
 800059e:	2b04      	cmp	r3, #4
 80005a0:	d007      	beq.n	80005b2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005a2:	6863      	ldr	r3, [r4, #4]
 80005a4:	f003 030c 	and.w	r3, r3, #12
 80005a8:	2b08      	cmp	r3, #8
 80005aa:	d10c      	bne.n	80005c6 <HAL_RCC_OscConfig+0x5e>
 80005ac:	6863      	ldr	r3, [r4, #4]
 80005ae:	03de      	lsls	r6, r3, #15
 80005b0:	d509      	bpl.n	80005c6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005b2:	6823      	ldr	r3, [r4, #0]
 80005b4:	039c      	lsls	r4, r3, #14
 80005b6:	d5dd      	bpl.n	8000574 <HAL_RCC_OscConfig+0xc>
 80005b8:	686b      	ldr	r3, [r5, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d1da      	bne.n	8000574 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005be:	2001      	movs	r0, #1
}
 80005c0:	b002      	add	sp, #8
 80005c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005c6:	686b      	ldr	r3, [r5, #4]
 80005c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005cc:	d110      	bne.n	80005f0 <HAL_RCC_OscConfig+0x88>
 80005ce:	6823      	ldr	r3, [r4, #0]
 80005d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005d6:	f7ff fe67 	bl	80002a8 <HAL_GetTick>
 80005da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005dc:	6823      	ldr	r3, [r4, #0]
 80005de:	0398      	lsls	r0, r3, #14
 80005e0:	d4c8      	bmi.n	8000574 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005e2:	f7ff fe61 	bl	80002a8 <HAL_GetTick>
 80005e6:	1b80      	subs	r0, r0, r6
 80005e8:	2864      	cmp	r0, #100	; 0x64
 80005ea:	d9f7      	bls.n	80005dc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80005ec:	2003      	movs	r0, #3
 80005ee:	e7e7      	b.n	80005c0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005f0:	b99b      	cbnz	r3, 800061a <HAL_RCC_OscConfig+0xb2>
 80005f2:	6823      	ldr	r3, [r4, #0]
 80005f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005f8:	6023      	str	r3, [r4, #0]
 80005fa:	6823      	ldr	r3, [r4, #0]
 80005fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000600:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000602:	f7ff fe51 	bl	80002a8 <HAL_GetTick>
 8000606:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000608:	6823      	ldr	r3, [r4, #0]
 800060a:	0399      	lsls	r1, r3, #14
 800060c:	d5b2      	bpl.n	8000574 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800060e:	f7ff fe4b 	bl	80002a8 <HAL_GetTick>
 8000612:	1b80      	subs	r0, r0, r6
 8000614:	2864      	cmp	r0, #100	; 0x64
 8000616:	d9f7      	bls.n	8000608 <HAL_RCC_OscConfig+0xa0>
 8000618:	e7e8      	b.n	80005ec <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800061a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800061e:	6823      	ldr	r3, [r4, #0]
 8000620:	d103      	bne.n	800062a <HAL_RCC_OscConfig+0xc2>
 8000622:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000626:	6023      	str	r3, [r4, #0]
 8000628:	e7d1      	b.n	80005ce <HAL_RCC_OscConfig+0x66>
 800062a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800062e:	6023      	str	r3, [r4, #0]
 8000630:	6823      	ldr	r3, [r4, #0]
 8000632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000636:	e7cd      	b.n	80005d4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000638:	4c67      	ldr	r4, [pc, #412]	; (80007d8 <HAL_RCC_OscConfig+0x270>)
 800063a:	6863      	ldr	r3, [r4, #4]
 800063c:	f013 0f0c 	tst.w	r3, #12
 8000640:	d007      	beq.n	8000652 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000642:	6863      	ldr	r3, [r4, #4]
 8000644:	f003 030c 	and.w	r3, r3, #12
 8000648:	2b08      	cmp	r3, #8
 800064a:	d110      	bne.n	800066e <HAL_RCC_OscConfig+0x106>
 800064c:	6863      	ldr	r3, [r4, #4]
 800064e:	03da      	lsls	r2, r3, #15
 8000650:	d40d      	bmi.n	800066e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000652:	6823      	ldr	r3, [r4, #0]
 8000654:	079b      	lsls	r3, r3, #30
 8000656:	d502      	bpl.n	800065e <HAL_RCC_OscConfig+0xf6>
 8000658:	692b      	ldr	r3, [r5, #16]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d1af      	bne.n	80005be <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800065e:	6823      	ldr	r3, [r4, #0]
 8000660:	696a      	ldr	r2, [r5, #20]
 8000662:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000666:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800066a:	6023      	str	r3, [r4, #0]
 800066c:	e785      	b.n	800057a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800066e:	692a      	ldr	r2, [r5, #16]
 8000670:	4b5a      	ldr	r3, [pc, #360]	; (80007dc <HAL_RCC_OscConfig+0x274>)
 8000672:	b16a      	cbz	r2, 8000690 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000674:	2201      	movs	r2, #1
 8000676:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000678:	f7ff fe16 	bl	80002a8 <HAL_GetTick>
 800067c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800067e:	6823      	ldr	r3, [r4, #0]
 8000680:	079f      	lsls	r7, r3, #30
 8000682:	d4ec      	bmi.n	800065e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000684:	f7ff fe10 	bl	80002a8 <HAL_GetTick>
 8000688:	1b80      	subs	r0, r0, r6
 800068a:	2802      	cmp	r0, #2
 800068c:	d9f7      	bls.n	800067e <HAL_RCC_OscConfig+0x116>
 800068e:	e7ad      	b.n	80005ec <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000690:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000692:	f7ff fe09 	bl	80002a8 <HAL_GetTick>
 8000696:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000698:	6823      	ldr	r3, [r4, #0]
 800069a:	0798      	lsls	r0, r3, #30
 800069c:	f57f af6d 	bpl.w	800057a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006a0:	f7ff fe02 	bl	80002a8 <HAL_GetTick>
 80006a4:	1b80      	subs	r0, r0, r6
 80006a6:	2802      	cmp	r0, #2
 80006a8:	d9f6      	bls.n	8000698 <HAL_RCC_OscConfig+0x130>
 80006aa:	e79f      	b.n	80005ec <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006ac:	69aa      	ldr	r2, [r5, #24]
 80006ae:	4c4a      	ldr	r4, [pc, #296]	; (80007d8 <HAL_RCC_OscConfig+0x270>)
 80006b0:	4b4b      	ldr	r3, [pc, #300]	; (80007e0 <HAL_RCC_OscConfig+0x278>)
 80006b2:	b1da      	cbz	r2, 80006ec <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80006b4:	2201      	movs	r2, #1
 80006b6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006b8:	f7ff fdf6 	bl	80002a8 <HAL_GetTick>
 80006bc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006c0:	079b      	lsls	r3, r3, #30
 80006c2:	d50d      	bpl.n	80006e0 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80006c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006c8:	4b46      	ldr	r3, [pc, #280]	; (80007e4 <HAL_RCC_OscConfig+0x27c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80006d0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80006d2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80006d4:	9b01      	ldr	r3, [sp, #4]
 80006d6:	1e5a      	subs	r2, r3, #1
 80006d8:	9201      	str	r2, [sp, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1f9      	bne.n	80006d2 <HAL_RCC_OscConfig+0x16a>
 80006de:	e750      	b.n	8000582 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006e0:	f7ff fde2 	bl	80002a8 <HAL_GetTick>
 80006e4:	1b80      	subs	r0, r0, r6
 80006e6:	2802      	cmp	r0, #2
 80006e8:	d9e9      	bls.n	80006be <HAL_RCC_OscConfig+0x156>
 80006ea:	e77f      	b.n	80005ec <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80006ec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006ee:	f7ff fddb 	bl	80002a8 <HAL_GetTick>
 80006f2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006f6:	079f      	lsls	r7, r3, #30
 80006f8:	f57f af43 	bpl.w	8000582 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006fc:	f7ff fdd4 	bl	80002a8 <HAL_GetTick>
 8000700:	1b80      	subs	r0, r0, r6
 8000702:	2802      	cmp	r0, #2
 8000704:	d9f6      	bls.n	80006f4 <HAL_RCC_OscConfig+0x18c>
 8000706:	e771      	b.n	80005ec <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000708:	4c33      	ldr	r4, [pc, #204]	; (80007d8 <HAL_RCC_OscConfig+0x270>)
 800070a:	69e3      	ldr	r3, [r4, #28]
 800070c:	00d8      	lsls	r0, r3, #3
 800070e:	d424      	bmi.n	800075a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000710:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	69e3      	ldr	r3, [r4, #28]
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000718:	61e3      	str	r3, [r4, #28]
 800071a:	69e3      	ldr	r3, [r4, #28]
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000724:	4e30      	ldr	r6, [pc, #192]	; (80007e8 <HAL_RCC_OscConfig+0x280>)
 8000726:	6833      	ldr	r3, [r6, #0]
 8000728:	05d9      	lsls	r1, r3, #23
 800072a:	d518      	bpl.n	800075e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800072c:	68eb      	ldr	r3, [r5, #12]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d126      	bne.n	8000780 <HAL_RCC_OscConfig+0x218>
 8000732:	6a23      	ldr	r3, [r4, #32]
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800073a:	f7ff fdb5 	bl	80002a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800073e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000742:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000744:	6a23      	ldr	r3, [r4, #32]
 8000746:	079b      	lsls	r3, r3, #30
 8000748:	d53f      	bpl.n	80007ca <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800074a:	2f00      	cmp	r7, #0
 800074c:	f43f af1d 	beq.w	800058a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000750:	69e3      	ldr	r3, [r4, #28]
 8000752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000756:	61e3      	str	r3, [r4, #28]
 8000758:	e717      	b.n	800058a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800075a:	2700      	movs	r7, #0
 800075c:	e7e2      	b.n	8000724 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800075e:	6833      	ldr	r3, [r6, #0]
 8000760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000764:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000766:	f7ff fd9f 	bl	80002a8 <HAL_GetTick>
 800076a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800076c:	6833      	ldr	r3, [r6, #0]
 800076e:	05da      	lsls	r2, r3, #23
 8000770:	d4dc      	bmi.n	800072c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000772:	f7ff fd99 	bl	80002a8 <HAL_GetTick>
 8000776:	eba0 0008 	sub.w	r0, r0, r8
 800077a:	2864      	cmp	r0, #100	; 0x64
 800077c:	d9f6      	bls.n	800076c <HAL_RCC_OscConfig+0x204>
 800077e:	e735      	b.n	80005ec <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000780:	b9ab      	cbnz	r3, 80007ae <HAL_RCC_OscConfig+0x246>
 8000782:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000784:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000788:	f023 0301 	bic.w	r3, r3, #1
 800078c:	6223      	str	r3, [r4, #32]
 800078e:	6a23      	ldr	r3, [r4, #32]
 8000790:	f023 0304 	bic.w	r3, r3, #4
 8000794:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000796:	f7ff fd87 	bl	80002a8 <HAL_GetTick>
 800079a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800079c:	6a23      	ldr	r3, [r4, #32]
 800079e:	0798      	lsls	r0, r3, #30
 80007a0:	d5d3      	bpl.n	800074a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007a2:	f7ff fd81 	bl	80002a8 <HAL_GetTick>
 80007a6:	1b80      	subs	r0, r0, r6
 80007a8:	4540      	cmp	r0, r8
 80007aa:	d9f7      	bls.n	800079c <HAL_RCC_OscConfig+0x234>
 80007ac:	e71e      	b.n	80005ec <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007ae:	2b05      	cmp	r3, #5
 80007b0:	6a23      	ldr	r3, [r4, #32]
 80007b2:	d103      	bne.n	80007bc <HAL_RCC_OscConfig+0x254>
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6223      	str	r3, [r4, #32]
 80007ba:	e7ba      	b.n	8000732 <HAL_RCC_OscConfig+0x1ca>
 80007bc:	f023 0301 	bic.w	r3, r3, #1
 80007c0:	6223      	str	r3, [r4, #32]
 80007c2:	6a23      	ldr	r3, [r4, #32]
 80007c4:	f023 0304 	bic.w	r3, r3, #4
 80007c8:	e7b6      	b.n	8000738 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007ca:	f7ff fd6d 	bl	80002a8 <HAL_GetTick>
 80007ce:	eba0 0008 	sub.w	r0, r0, r8
 80007d2:	42b0      	cmp	r0, r6
 80007d4:	d9b6      	bls.n	8000744 <HAL_RCC_OscConfig+0x1dc>
 80007d6:	e709      	b.n	80005ec <HAL_RCC_OscConfig+0x84>
 80007d8:	40021000 	.word	0x40021000
 80007dc:	42420000 	.word	0x42420000
 80007e0:	42420480 	.word	0x42420480
 80007e4:	20000008 	.word	0x20000008
 80007e8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007ec:	4c22      	ldr	r4, [pc, #136]	; (8000878 <HAL_RCC_OscConfig+0x310>)
 80007ee:	6863      	ldr	r3, [r4, #4]
 80007f0:	f003 030c 	and.w	r3, r3, #12
 80007f4:	2b08      	cmp	r3, #8
 80007f6:	f43f aee2 	beq.w	80005be <HAL_RCC_OscConfig+0x56>
 80007fa:	2300      	movs	r3, #0
 80007fc:	4e1f      	ldr	r6, [pc, #124]	; (800087c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007fe:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000800:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000802:	d12b      	bne.n	800085c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000804:	f7ff fd50 	bl	80002a8 <HAL_GetTick>
 8000808:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800080a:	6823      	ldr	r3, [r4, #0]
 800080c:	0199      	lsls	r1, r3, #6
 800080e:	d41f      	bmi.n	8000850 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000810:	6a2b      	ldr	r3, [r5, #32]
 8000812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000816:	d105      	bne.n	8000824 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000818:	6862      	ldr	r2, [r4, #4]
 800081a:	68a9      	ldr	r1, [r5, #8]
 800081c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000820:	430a      	orrs	r2, r1
 8000822:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000824:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000826:	6862      	ldr	r2, [r4, #4]
 8000828:	430b      	orrs	r3, r1
 800082a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800082e:	4313      	orrs	r3, r2
 8000830:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000832:	2301      	movs	r3, #1
 8000834:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000836:	f7ff fd37 	bl	80002a8 <HAL_GetTick>
 800083a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	019a      	lsls	r2, r3, #6
 8000840:	f53f aea7 	bmi.w	8000592 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000844:	f7ff fd30 	bl	80002a8 <HAL_GetTick>
 8000848:	1b40      	subs	r0, r0, r5
 800084a:	2802      	cmp	r0, #2
 800084c:	d9f6      	bls.n	800083c <HAL_RCC_OscConfig+0x2d4>
 800084e:	e6cd      	b.n	80005ec <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000850:	f7ff fd2a 	bl	80002a8 <HAL_GetTick>
 8000854:	1bc0      	subs	r0, r0, r7
 8000856:	2802      	cmp	r0, #2
 8000858:	d9d7      	bls.n	800080a <HAL_RCC_OscConfig+0x2a2>
 800085a:	e6c7      	b.n	80005ec <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 800085c:	f7ff fd24 	bl	80002a8 <HAL_GetTick>
 8000860:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000862:	6823      	ldr	r3, [r4, #0]
 8000864:	019b      	lsls	r3, r3, #6
 8000866:	f57f ae94 	bpl.w	8000592 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800086a:	f7ff fd1d 	bl	80002a8 <HAL_GetTick>
 800086e:	1b40      	subs	r0, r0, r5
 8000870:	2802      	cmp	r0, #2
 8000872:	d9f6      	bls.n	8000862 <HAL_RCC_OscConfig+0x2fa>
 8000874:	e6ba      	b.n	80005ec <HAL_RCC_OscConfig+0x84>
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000
 800087c:	42420060 	.word	0x42420060

08000880 <HAL_RCC_GetSysClockFreq>:
{
 8000880:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000884:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000886:	ac02      	add	r4, sp, #8
 8000888:	f103 0510 	add.w	r5, r3, #16
 800088c:	4622      	mov	r2, r4
 800088e:	6818      	ldr	r0, [r3, #0]
 8000890:	6859      	ldr	r1, [r3, #4]
 8000892:	3308      	adds	r3, #8
 8000894:	c203      	stmia	r2!, {r0, r1}
 8000896:	42ab      	cmp	r3, r5
 8000898:	4614      	mov	r4, r2
 800089a:	d1f7      	bne.n	800088c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800089c:	2301      	movs	r3, #1
 800089e:	f88d 3004 	strb.w	r3, [sp, #4]
 80008a2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80008a4:	4911      	ldr	r1, [pc, #68]	; (80008ec <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80008a6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80008aa:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80008ac:	f003 020c 	and.w	r2, r3, #12
 80008b0:	2a08      	cmp	r2, #8
 80008b2:	d117      	bne.n	80008e4 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008b4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80008b8:	a806      	add	r0, sp, #24
 80008ba:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008bc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008be:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008c2:	d50c      	bpl.n	80008de <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008c4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008c6:	480a      	ldr	r0, [pc, #40]	; (80008f0 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008c8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008cc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008ce:	aa06      	add	r2, sp, #24
 80008d0:	4413      	add	r3, r2
 80008d2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008d6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80008da:	b007      	add	sp, #28
 80008dc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <HAL_RCC_GetSysClockFreq+0x74>)
 80008e0:	4350      	muls	r0, r2
 80008e2:	e7fa      	b.n	80008da <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80008e6:	e7f8      	b.n	80008da <HAL_RCC_GetSysClockFreq+0x5a>
 80008e8:	08001318 	.word	0x08001318
 80008ec:	40021000 	.word	0x40021000
 80008f0:	007a1200 	.word	0x007a1200
 80008f4:	003d0900 	.word	0x003d0900

080008f8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008f8:	4a54      	ldr	r2, [pc, #336]	; (8000a4c <HAL_RCC_ClockConfig+0x154>)
{
 80008fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008fe:	6813      	ldr	r3, [r2, #0]
{
 8000900:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	428b      	cmp	r3, r1
{
 8000908:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800090a:	d32a      	bcc.n	8000962 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800090c:	6829      	ldr	r1, [r5, #0]
 800090e:	078c      	lsls	r4, r1, #30
 8000910:	d434      	bmi.n	800097c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000912:	07ca      	lsls	r2, r1, #31
 8000914:	d447      	bmi.n	80009a6 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000916:	4a4d      	ldr	r2, [pc, #308]	; (8000a4c <HAL_RCC_ClockConfig+0x154>)
 8000918:	6813      	ldr	r3, [r2, #0]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	429e      	cmp	r6, r3
 8000920:	f0c0 8082 	bcc.w	8000a28 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000924:	682a      	ldr	r2, [r5, #0]
 8000926:	4c4a      	ldr	r4, [pc, #296]	; (8000a50 <HAL_RCC_ClockConfig+0x158>)
 8000928:	f012 0f04 	tst.w	r2, #4
 800092c:	f040 8087 	bne.w	8000a3e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000930:	0713      	lsls	r3, r2, #28
 8000932:	d506      	bpl.n	8000942 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000934:	6863      	ldr	r3, [r4, #4]
 8000936:	692a      	ldr	r2, [r5, #16]
 8000938:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800093c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000940:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000942:	f7ff ff9d 	bl	8000880 <HAL_RCC_GetSysClockFreq>
 8000946:	6863      	ldr	r3, [r4, #4]
 8000948:	4a42      	ldr	r2, [pc, #264]	; (8000a54 <HAL_RCC_ClockConfig+0x15c>)
 800094a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800094e:	5cd3      	ldrb	r3, [r2, r3]
 8000950:	40d8      	lsrs	r0, r3
 8000952:	4b41      	ldr	r3, [pc, #260]	; (8000a58 <HAL_RCC_ClockConfig+0x160>)
 8000954:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff fc64 	bl	8000224 <HAL_InitTick>
  return HAL_OK;
 800095c:	2000      	movs	r0, #0
}
 800095e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000962:	6813      	ldr	r3, [r2, #0]
 8000964:	f023 0307 	bic.w	r3, r3, #7
 8000968:	430b      	orrs	r3, r1
 800096a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800096c:	6813      	ldr	r3, [r2, #0]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	4299      	cmp	r1, r3
 8000974:	d0ca      	beq.n	800090c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000976:	2001      	movs	r0, #1
 8000978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800097c:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800097e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000982:	bf1e      	ittt	ne
 8000984:	685a      	ldrne	r2, [r3, #4]
 8000986:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800098a:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800098c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800098e:	bf42      	ittt	mi
 8000990:	685a      	ldrmi	r2, [r3, #4]
 8000992:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000996:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	68a8      	ldr	r0, [r5, #8]
 800099c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80009a0:	4302      	orrs	r2, r0
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	e7b5      	b.n	8000912 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009a6:	686a      	ldr	r2, [r5, #4]
 80009a8:	4c29      	ldr	r4, [pc, #164]	; (8000a50 <HAL_RCC_ClockConfig+0x158>)
 80009aa:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ac:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009ae:	d11c      	bne.n	80009ea <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009b0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009b4:	d0df      	beq.n	8000976 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009b6:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009b8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009bc:	f023 0303 	bic.w	r3, r3, #3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80009c4:	f7ff fc70 	bl	80002a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009c8:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80009ca:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d114      	bne.n	80009fa <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009d0:	6863      	ldr	r3, [r4, #4]
 80009d2:	f003 030c 	and.w	r3, r3, #12
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	d09d      	beq.n	8000916 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009da:	f7ff fc65 	bl	80002a8 <HAL_GetTick>
 80009de:	1bc0      	subs	r0, r0, r7
 80009e0:	4540      	cmp	r0, r8
 80009e2:	d9f5      	bls.n	80009d0 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80009e4:	2003      	movs	r0, #3
 80009e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009ea:	2a02      	cmp	r2, #2
 80009ec:	d102      	bne.n	80009f4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009f2:	e7df      	b.n	80009b4 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f4:	f013 0f02 	tst.w	r3, #2
 80009f8:	e7dc      	b.n	80009b4 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d10f      	bne.n	8000a1e <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009fe:	6863      	ldr	r3, [r4, #4]
 8000a00:	f003 030c 	and.w	r3, r3, #12
 8000a04:	2b08      	cmp	r3, #8
 8000a06:	d086      	beq.n	8000916 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a08:	f7ff fc4e 	bl	80002a8 <HAL_GetTick>
 8000a0c:	1bc0      	subs	r0, r0, r7
 8000a0e:	4540      	cmp	r0, r8
 8000a10:	d9f5      	bls.n	80009fe <HAL_RCC_ClockConfig+0x106>
 8000a12:	e7e7      	b.n	80009e4 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a14:	f7ff fc48 	bl	80002a8 <HAL_GetTick>
 8000a18:	1bc0      	subs	r0, r0, r7
 8000a1a:	4540      	cmp	r0, r8
 8000a1c:	d8e2      	bhi.n	80009e4 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a1e:	6863      	ldr	r3, [r4, #4]
 8000a20:	f013 0f0c 	tst.w	r3, #12
 8000a24:	d1f6      	bne.n	8000a14 <HAL_RCC_ClockConfig+0x11c>
 8000a26:	e776      	b.n	8000916 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a28:	6813      	ldr	r3, [r2, #0]
 8000a2a:	f023 0307 	bic.w	r3, r3, #7
 8000a2e:	4333      	orrs	r3, r6
 8000a30:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a32:	6813      	ldr	r3, [r2, #0]
 8000a34:	f003 0307 	and.w	r3, r3, #7
 8000a38:	429e      	cmp	r6, r3
 8000a3a:	d19c      	bne.n	8000976 <HAL_RCC_ClockConfig+0x7e>
 8000a3c:	e772      	b.n	8000924 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a3e:	6863      	ldr	r3, [r4, #4]
 8000a40:	68e9      	ldr	r1, [r5, #12]
 8000a42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a46:	430b      	orrs	r3, r1
 8000a48:	6063      	str	r3, [r4, #4]
 8000a4a:	e771      	b.n	8000930 <HAL_RCC_ClockConfig+0x38>
 8000a4c:	40022000 	.word	0x40022000
 8000a50:	40021000 	.word	0x40021000
 8000a54:	08001328 	.word	0x08001328
 8000a58:	20000008 	.word	0x20000008

08000a5c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000a5c:	6a03      	ldr	r3, [r0, #32]
{
 8000a5e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000a60:	f023 0301 	bic.w	r3, r3, #1
 8000a64:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000a66:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000a68:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000a6a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000a6c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000a6e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000a72:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000a74:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000a76:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000a7a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000a7c:	4d0e      	ldr	r5, [pc, #56]	; (8000ab8 <TIM_OC1_SetConfig+0x5c>)
 8000a7e:	42a8      	cmp	r0, r5
 8000a80:	d002      	beq.n	8000a88 <TIM_OC1_SetConfig+0x2c>
 8000a82:	4e0e      	ldr	r6, [pc, #56]	; (8000abc <TIM_OC1_SetConfig+0x60>)
 8000a84:	42b0      	cmp	r0, r6
 8000a86:	d110      	bne.n	8000aaa <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000a88:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000a8a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000a8e:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000a90:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8000a92:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000a96:	d002      	beq.n	8000a9e <TIM_OC1_SetConfig+0x42>
 8000a98:	4d08      	ldr	r5, [pc, #32]	; (8000abc <TIM_OC1_SetConfig+0x60>)
 8000a9a:	42a8      	cmp	r0, r5
 8000a9c:	d105      	bne.n	8000aaa <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000a9e:	694d      	ldr	r5, [r1, #20]
 8000aa0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000aa2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000aa6:	4335      	orrs	r5, r6
 8000aa8:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000aaa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000aac:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000aae:	684a      	ldr	r2, [r1, #4]
 8000ab0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ab2:	6203      	str	r3, [r0, #32]
 8000ab4:	bd70      	pop	{r4, r5, r6, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40012c00 	.word	0x40012c00
 8000abc:	40013400 	.word	0x40013400

08000ac0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000ac0:	6a03      	ldr	r3, [r0, #32]
{
 8000ac2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ac8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000aca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000acc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000ace:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000ad0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000ad2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000ad6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000ad8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000ada:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000ade:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000ae2:	4d11      	ldr	r5, [pc, #68]	; (8000b28 <TIM_OC3_SetConfig+0x68>)
 8000ae4:	42a8      	cmp	r0, r5
 8000ae6:	d003      	beq.n	8000af0 <TIM_OC3_SetConfig+0x30>
 8000ae8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000aec:	42a8      	cmp	r0, r5
 8000aee:	d114      	bne.n	8000b1a <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000af0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000af6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000afa:	4d0b      	ldr	r5, [pc, #44]	; (8000b28 <TIM_OC3_SetConfig+0x68>)
    tmpccer &= ~TIM_CCER_CC3NE;
 8000afc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000b00:	42a8      	cmp	r0, r5
 8000b02:	d003      	beq.n	8000b0c <TIM_OC3_SetConfig+0x4c>
 8000b04:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000b08:	42a8      	cmp	r0, r5
 8000b0a:	d106      	bne.n	8000b1a <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000b0c:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000b0e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000b10:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000b14:	4335      	orrs	r5, r6
 8000b16:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b1a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000b1c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000b1e:	684a      	ldr	r2, [r1, #4]
 8000b20:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b22:	6203      	str	r3, [r0, #32]
 8000b24:	bd70      	pop	{r4, r5, r6, pc}
 8000b26:	bf00      	nop
 8000b28:	40012c00 	.word	0x40012c00

08000b2c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000b2c:	6a03      	ldr	r3, [r0, #32]
{
 8000b2e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b34:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b36:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b38:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000b3a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000b3c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000b3e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000b42:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000b46:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000b4c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000b50:	4d08      	ldr	r5, [pc, #32]	; (8000b74 <TIM_OC4_SetConfig+0x48>)
 8000b52:	42a8      	cmp	r0, r5
 8000b54:	d003      	beq.n	8000b5e <TIM_OC4_SetConfig+0x32>
 8000b56:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000b5a:	42a8      	cmp	r0, r5
 8000b5c:	d104      	bne.n	8000b68 <TIM_OC4_SetConfig+0x3c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000b5e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000b60:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000b64:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b68:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000b6a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000b6c:	684a      	ldr	r2, [r1, #4]
 8000b6e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b70:	6203      	str	r3, [r0, #32]
 8000b72:	bd30      	pop	{r4, r5, pc}
 8000b74:	40012c00 	.word	0x40012c00

08000b78 <HAL_TIM_PWM_MspInit>:
 8000b78:	4770      	bx	lr

08000b7a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000b7a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000b7e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	f04f 0302 	mov.w	r3, #2
 8000b86:	d01c      	beq.n	8000bc2 <HAL_TIM_ConfigClockSource+0x48>
 8000b88:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000b8a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000b8e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000b90:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000b94:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000b96:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000b9a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000b9e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8000ba0:	680a      	ldr	r2, [r1, #0]
 8000ba2:	2a40      	cmp	r2, #64	; 0x40
 8000ba4:	d079      	beq.n	8000c9a <HAL_TIM_ConfigClockSource+0x120>
 8000ba6:	d819      	bhi.n	8000bdc <HAL_TIM_ConfigClockSource+0x62>
 8000ba8:	2a10      	cmp	r2, #16
 8000baa:	f000 8093 	beq.w	8000cd4 <HAL_TIM_ConfigClockSource+0x15a>
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_TIM_ConfigClockSource+0x4c>
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	f000 8089 	beq.w	8000cc8 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000bc2:	4618      	mov	r0, r3
}
 8000bc4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000bc6:	2a20      	cmp	r2, #32
 8000bc8:	f000 808a 	beq.w	8000ce0 <HAL_TIM_ConfigClockSource+0x166>
 8000bcc:	2a30      	cmp	r2, #48	; 0x30
 8000bce:	d1f2      	bne.n	8000bb6 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000bd0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000bd2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000bd6:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000bda:	e036      	b.n	8000c4a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000bdc:	2a70      	cmp	r2, #112	; 0x70
 8000bde:	d036      	beq.n	8000c4e <HAL_TIM_ConfigClockSource+0xd4>
 8000be0:	d81b      	bhi.n	8000c1a <HAL_TIM_ConfigClockSource+0xa0>
 8000be2:	2a50      	cmp	r2, #80	; 0x50
 8000be4:	d042      	beq.n	8000c6c <HAL_TIM_ConfigClockSource+0xf2>
 8000be6:	2a60      	cmp	r2, #96	; 0x60
 8000be8:	d1e5      	bne.n	8000bb6 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000bea:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000bec:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000bee:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000bf2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000bf4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000bf6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000bf8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000bfa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000bfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000c02:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000c06:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000c0a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c0c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000c0e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000c14:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000c18:	e017      	b.n	8000c4a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000c1a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000c1e:	d011      	beq.n	8000c44 <HAL_TIM_ConfigClockSource+0xca>
 8000c20:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000c24:	d1c7      	bne.n	8000bb6 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000c26:	688a      	ldr	r2, [r1, #8]
 8000c28:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000c2a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000c2c:	68c9      	ldr	r1, [r1, #12]
 8000c2e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000c30:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000c34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c38:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000c3a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c42:	e002      	b.n	8000c4a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	e7b3      	b.n	8000bb6 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000c4e:	688a      	ldr	r2, [r1, #8]
 8000c50:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000c52:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000c54:	68c9      	ldr	r1, [r1, #12]
 8000c56:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000c58:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000c5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000c60:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000c62:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000c64:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000c66:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000c6a:	e7ee      	b.n	8000c4a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000c6c:	684c      	ldr	r4, [r1, #4]
 8000c6e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000c70:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c72:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000c74:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c78:	f025 0501 	bic.w	r5, r5, #1
 8000c7c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000c7e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000c80:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000c82:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000c86:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c8c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000c8e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000c94:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000c98:	e7d7      	b.n	8000c4a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000c9a:	684c      	ldr	r4, [r1, #4]
 8000c9c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000c9e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ca0:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000ca2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ca6:	f025 0501 	bic.w	r5, r5, #1
 8000caa:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000cac:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000cae:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000cb0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000cb4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000cb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000cba:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000cbc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000cbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000cc2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000cc6:	e7c0      	b.n	8000c4a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000cc8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000cca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000cce:	f042 0207 	orr.w	r2, r2, #7
 8000cd2:	e7ba      	b.n	8000c4a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000cd4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000cd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000cda:	f042 0217 	orr.w	r2, r2, #23
 8000cde:	e7b4      	b.n	8000c4a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000ce0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ce2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ce6:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000cea:	e7ae      	b.n	8000c4a <HAL_TIM_ConfigClockSource+0xd0>

08000cec <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000cec:	4a24      	ldr	r2, [pc, #144]	; (8000d80 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8000cee:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d012      	beq.n	8000d1a <TIM_Base_SetConfig+0x2e>
 8000cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	d00e      	beq.n	8000d1a <TIM_Base_SetConfig+0x2e>
 8000cfc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d00:	d00b      	beq.n	8000d1a <TIM_Base_SetConfig+0x2e>
 8000d02:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d007      	beq.n	8000d1a <TIM_Base_SetConfig+0x2e>
 8000d0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	d003      	beq.n	8000d1a <TIM_Base_SetConfig+0x2e>
 8000d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d11d      	bne.n	8000d56 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8000d1a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000d20:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <TIM_Base_SetConfig+0x94>)
 8000d24:	4290      	cmp	r0, r2
 8000d26:	d012      	beq.n	8000d4e <TIM_Base_SetConfig+0x62>
 8000d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000d2c:	4290      	cmp	r0, r2
 8000d2e:	d00e      	beq.n	8000d4e <TIM_Base_SetConfig+0x62>
 8000d30:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d34:	d00b      	beq.n	8000d4e <TIM_Base_SetConfig+0x62>
 8000d36:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000d3a:	4290      	cmp	r0, r2
 8000d3c:	d007      	beq.n	8000d4e <TIM_Base_SetConfig+0x62>
 8000d3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d42:	4290      	cmp	r0, r2
 8000d44:	d003      	beq.n	8000d4e <TIM_Base_SetConfig+0x62>
 8000d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d4a:	4290      	cmp	r0, r2
 8000d4c:	d103      	bne.n	8000d56 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d4e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d54:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000d56:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000d5c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000d5e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d60:	688b      	ldr	r3, [r1, #8]
 8000d62:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d64:	680b      	ldr	r3, [r1, #0]
 8000d66:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <TIM_Base_SetConfig+0x94>)
 8000d6a:	4298      	cmp	r0, r3
 8000d6c:	d003      	beq.n	8000d76 <TIM_Base_SetConfig+0x8a>
 8000d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000d72:	4298      	cmp	r0, r3
 8000d74:	d101      	bne.n	8000d7a <TIM_Base_SetConfig+0x8e>
    TIMx->RCR = Structure->RepetitionCounter;
 8000d76:	690b      	ldr	r3, [r1, #16]
 8000d78:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	6143      	str	r3, [r0, #20]
 8000d7e:	4770      	bx	lr
 8000d80:	40012c00 	.word	0x40012c00

08000d84 <HAL_TIM_Base_Init>:
{
 8000d84:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000d86:	4604      	mov	r4, r0
 8000d88:	b1a0      	cbz	r0, 8000db4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000d8a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000d8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d92:	b91b      	cbnz	r3, 8000d9c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000d94:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000d98:	f000 f9c8 	bl	800112c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000d9c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d9e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000da0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000da4:	1d21      	adds	r1, r4, #4
 8000da6:	f7ff ffa1 	bl	8000cec <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000daa:	2301      	movs	r3, #1
  return HAL_OK;
 8000dac:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000dae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000db2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000db4:	2001      	movs	r0, #1
}
 8000db6:	bd10      	pop	{r4, pc}

08000db8 <HAL_TIM_PWM_Init>:
{
 8000db8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000dba:	4604      	mov	r4, r0
 8000dbc:	b1a0      	cbz	r0, 8000de8 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000dbe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000dc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000dc6:	b91b      	cbnz	r3, 8000dd0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000dc8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8000dcc:	f7ff fed4 	bl	8000b78 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000dd0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000dd2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000dd4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000dd8:	1d21      	adds	r1, r4, #4
 8000dda:	f7ff ff87 	bl	8000cec <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000dde:	2301      	movs	r3, #1
  return HAL_OK;
 8000de0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000de2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000de6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000de8:	2001      	movs	r0, #1
}
 8000dea:	bd10      	pop	{r4, pc}

08000dec <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000dec:	6a03      	ldr	r3, [r0, #32]
{
 8000dee:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000df0:	f023 0310 	bic.w	r3, r3, #16
 8000df4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000df6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8000df8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8000dfa:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000dfc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000dfe:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e02:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000e06:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000e08:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000e0c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000e10:	4d10      	ldr	r5, [pc, #64]	; (8000e54 <TIM_OC2_SetConfig+0x68>)
 8000e12:	42a8      	cmp	r0, r5
 8000e14:	d003      	beq.n	8000e1e <TIM_OC2_SetConfig+0x32>
 8000e16:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000e1a:	42a8      	cmp	r0, r5
 8000e1c:	d114      	bne.n	8000e48 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000e1e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000e24:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000e28:	4d0a      	ldr	r5, [pc, #40]	; (8000e54 <TIM_OC2_SetConfig+0x68>)
    tmpccer &= ~TIM_CCER_CC2NE;
 8000e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000e2e:	42a8      	cmp	r0, r5
 8000e30:	d003      	beq.n	8000e3a <TIM_OC2_SetConfig+0x4e>
 8000e32:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000e36:	42a8      	cmp	r0, r5
 8000e38:	d106      	bne.n	8000e48 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8000e3a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000e3c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000e3e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000e42:	4335      	orrs	r5, r6
 8000e44:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8000e48:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000e4a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000e4c:	684a      	ldr	r2, [r1, #4]
 8000e4e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000e50:	6203      	str	r3, [r0, #32]
 8000e52:	bd70      	pop	{r4, r5, r6, pc}
 8000e54:	40012c00 	.word	0x40012c00

08000e58 <HAL_TIM_PWM_ConfigChannel>:
{
 8000e58:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8000e5a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000e5e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	f04f 0002 	mov.w	r0, #2
 8000e66:	d025      	beq.n	8000eb4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8000e68:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000e6a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8000e6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8000e72:	2a0c      	cmp	r2, #12
 8000e74:	d818      	bhi.n	8000ea8 <HAL_TIM_PWM_ConfigChannel+0x50>
 8000e76:	e8df f002 	tbb	[pc, r2]
 8000e7a:	1707      	.short	0x1707
 8000e7c:	171e1717 	.word	0x171e1717
 8000e80:	172f1717 	.word	0x172f1717
 8000e84:	1717      	.short	0x1717
 8000e86:	40          	.byte	0x40
 8000e87:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000e88:	6820      	ldr	r0, [r4, #0]
 8000e8a:	f7ff fde7 	bl	8000a5c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000e8e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000e90:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000e92:	699a      	ldr	r2, [r3, #24]
 8000e94:	f042 0208 	orr.w	r2, r2, #8
 8000e98:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000e9a:	699a      	ldr	r2, [r3, #24]
 8000e9c:	f022 0204 	bic.w	r2, r2, #4
 8000ea0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000ea2:	699a      	ldr	r2, [r3, #24]
 8000ea4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000ea6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000ea8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000eaa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000eac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000eb0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000eb4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000eb6:	6820      	ldr	r0, [r4, #0]
 8000eb8:	f7ff ff98 	bl	8000dec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000ebc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000ebe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000ec0:	699a      	ldr	r2, [r3, #24]
 8000ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000ec8:	699a      	ldr	r2, [r3, #24]
 8000eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000ed0:	699a      	ldr	r2, [r3, #24]
 8000ed2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ed6:	e7e6      	b.n	8000ea6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000ed8:	6820      	ldr	r0, [r4, #0]
 8000eda:	f7ff fdf1 	bl	8000ac0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000ede:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000ee0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000ee2:	69da      	ldr	r2, [r3, #28]
 8000ee4:	f042 0208 	orr.w	r2, r2, #8
 8000ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000eea:	69da      	ldr	r2, [r3, #28]
 8000eec:	f022 0204 	bic.w	r2, r2, #4
 8000ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000ef2:	69da      	ldr	r2, [r3, #28]
 8000ef4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000ef6:	61da      	str	r2, [r3, #28]
    break;
 8000ef8:	e7d6      	b.n	8000ea8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000efa:	6820      	ldr	r0, [r4, #0]
 8000efc:	f7ff fe16 	bl	8000b2c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000f00:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000f02:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000f04:	69da      	ldr	r2, [r3, #28]
 8000f06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000f0c:	69da      	ldr	r2, [r3, #28]
 8000f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000f14:	69da      	ldr	r2, [r3, #28]
 8000f16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f1a:	e7ec      	b.n	8000ef6 <HAL_TIM_PWM_ConfigChannel+0x9e>

08000f1c <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8000f1c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8000f1e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000f20:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8000f22:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8000f24:	ea23 0304 	bic.w	r3, r3, r4
 8000f28:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000f2a:	6a03      	ldr	r3, [r0, #32]
 8000f2c:	408a      	lsls	r2, r1
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	6202      	str	r2, [r0, #32]
 8000f32:	bd10      	pop	{r4, pc}

08000f34 <HAL_TIM_PWM_Start>:
{
 8000f34:	b510      	push	{r4, lr}
 8000f36:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	6800      	ldr	r0, [r0, #0]
 8000f3c:	f7ff ffee 	bl	8000f1c <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000f40:	6823      	ldr	r3, [r4, #0]
 8000f42:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <HAL_TIM_PWM_Start+0x30>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d003      	beq.n	8000f50 <HAL_TIM_PWM_Start+0x1c>
 8000f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d103      	bne.n	8000f58 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8000f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f56:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8000f58:	681a      	ldr	r2, [r3, #0]
}
 8000f5a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8000f5c:	f042 0201 	orr.w	r2, r2, #1
 8000f60:	601a      	str	r2, [r3, #0]
}
 8000f62:	bd10      	pop	{r4, pc}
 8000f64:	40012c00 	.word	0x40012c00

08000f68 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000f68:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000f6c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	f04f 0302 	mov.w	r3, #2
 8000f74:	d018      	beq.n	8000fa8 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000f76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000f7a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000f7c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000f7e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000f80:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000f82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f86:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	4322      	orrs	r2, r4
 8000f8c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f94:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000fa8:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000faa:	bd10      	pop	{r4, pc}

08000fac <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <MX_GPIO_Init+0x2c>)
{
 8000fae:	b082      	sub	sp, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	699a      	ldr	r2, [r3, #24]
 8000fb2:	f042 0204 	orr.w	r2, r2, #4
 8000fb6:	619a      	str	r2, [r3, #24]
 8000fb8:	699a      	ldr	r2, [r3, #24]
 8000fba:	f002 0204 	and.w	r2, r2, #4
 8000fbe:	9200      	str	r2, [sp, #0]
 8000fc0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	699a      	ldr	r2, [r3, #24]
 8000fc4:	f042 0208 	orr.w	r2, r2, #8
 8000fc8:	619a      	str	r2, [r3, #24]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	9b01      	ldr	r3, [sp, #4]

}
 8000fd4:	b002      	add	sp, #8
 8000fd6:	4770      	bx	lr
 8000fd8:	40021000 	.word	0x40021000

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b510      	push	{r4, lr}
 8000fde:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe0:	2228      	movs	r2, #40	; 0x28
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	a806      	add	r0, sp, #24
 8000fe6:	f000 f983 	bl	80012f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fea:	2100      	movs	r1, #0
 8000fec:	2214      	movs	r2, #20
 8000fee:	a801      	add	r0, sp, #4
 8000ff0:	f000 f97e 	bl	80012f0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff8:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ffc:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ffe:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001000:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001004:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001006:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800100a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100c:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100e:	f7ff faab 	bl	8000568 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001012:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001014:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001018:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101a:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800101c:	4621      	mov	r1, r4
 800101e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001020:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001022:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001024:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001026:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001028:	f7ff fc66 	bl	80008f8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800102c:	b010      	add	sp, #64	; 0x40
 800102e:	bd10      	pop	{r4, pc}

08001030 <main>:
{
 8001030:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 8001032:	f7ff f91b 	bl	800026c <HAL_Init>
  SystemClock_Config();
 8001036:	f7ff ffd1 	bl	8000fdc <SystemClock_Config>
  MX_GPIO_Init();
 800103a:	f7ff ffb7 	bl	8000fac <MX_GPIO_Init>
  MX_TIM3_Init();
 800103e:	f000 f8bb 	bl	80011b8 <MX_TIM3_Init>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001042:	2104      	movs	r1, #4
 8001044:	480e      	ldr	r0, [pc, #56]	; (8001080 <main+0x50>)
 8001046:	f7ff ff75 	bl	8000f34 <HAL_TIM_PWM_Start>
	uint16_t pwmVal = 0;
 800104a:	2400      	movs	r4, #0
 800104c:	4d0c      	ldr	r5, [pc, #48]	; (8001080 <main+0x50>)
	  while(pwmVal <1000)
 800104e:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8001052:	d30d      	bcc.n	8001070 <main+0x40>
 8001054:	3c01      	subs	r4, #1
 8001056:	b2a4      	uxth	r4, r4
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,pwmVal);
 8001058:	682b      	ldr	r3, [r5, #0]
		  HAL_Delay(1);
 800105a:	2001      	movs	r0, #1
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,pwmVal);
 800105c:	639c      	str	r4, [r3, #56]	; 0x38
		  HAL_Delay(1);
 800105e:	f7ff f929 	bl	80002b4 <HAL_Delay>
	  while(pwmVal)
 8001062:	f114 34ff 	adds.w	r4, r4, #4294967295
 8001066:	d2f7      	bcs.n	8001058 <main+0x28>
	  HAL_Delay(200);
 8001068:	20c8      	movs	r0, #200	; 0xc8
 800106a:	f7ff f923 	bl	80002b4 <HAL_Delay>
	  while(pwmVal <1000)
 800106e:	2400      	movs	r4, #0
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,pwmVal);
 8001070:	682b      	ldr	r3, [r5, #0]
		  pwmVal ++;
 8001072:	3401      	adds	r4, #1
 8001074:	b2a4      	uxth	r4, r4
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,pwmVal);
 8001076:	639c      	str	r4, [r3, #56]	; 0x38
		  HAL_Delay(1);
 8001078:	2001      	movs	r0, #1
 800107a:	f7ff f91b 	bl	80002b4 <HAL_Delay>
 800107e:	e7e6      	b.n	800104e <main+0x1e>
 8001080:	2000002c 	.word	0x2000002c

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	4770      	bx	lr
	...

08001088 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_MspInit+0x3c>)
{
 800108a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800108c:	699a      	ldr	r2, [r3, #24]
 800108e:	f042 0201 	orr.w	r2, r2, #1
 8001092:	619a      	str	r2, [r3, #24]
 8001094:	699a      	ldr	r2, [r3, #24]
 8001096:	f002 0201 	and.w	r2, r2, #1
 800109a:	9200      	str	r2, [sp, #0]
 800109c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	69da      	ldr	r2, [r3, #28]
 80010a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010a4:	61da      	str	r2, [r3, #28]
 80010a6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010b2:	6853      	ldr	r3, [r2, #4]
 80010b4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	b002      	add	sp, #8
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010000 	.word	0x40010000

080010cc <NMI_Handler>:
 80010cc:	4770      	bx	lr

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	e7fe      	b.n	80010d0 <MemManage_Handler>

080010d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d2:	e7fe      	b.n	80010d2 <BusFault_Handler>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler>

080010d6 <SVC_Handler>:
 80010d6:	4770      	bx	lr

080010d8 <DebugMon_Handler>:
 80010d8:	4770      	bx	lr

080010da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010dc:	f7ff b8d8 	b.w	8000290 <HAL_IncTick>

080010e0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <SystemInit+0x40>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	f042 0201 	orr.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80010ea:	6859      	ldr	r1, [r3, #4]
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <SystemInit+0x44>)
 80010ee:	400a      	ands	r2, r1
 80010f0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80010f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010fc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001104:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800110c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800110e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001112:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001114:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <SystemInit+0x48>)
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000
 8001124:	f8ff0000 	.word	0xf8ff0000
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 800112c:	6802      	ldr	r2, [r0, #0]
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_TIM_Base_MspInit+0x24>)
{
 8001130:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM3)
 8001132:	429a      	cmp	r2, r3
 8001134:	d10a      	bne.n	800114c <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001136:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800113a:	69da      	ldr	r2, [r3, #28]
 800113c:	f042 0202 	orr.w	r2, r2, #2
 8001140:	61da      	str	r2, [r3, #28]
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800114c:	b002      	add	sp, #8
 800114e:	4770      	bx	lr
 8001150:	40000400 	.word	0x40000400

08001154 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001154:	b510      	push	{r4, lr}
 8001156:	4604      	mov	r4, r0
 8001158:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	2210      	movs	r2, #16
 800115c:	2100      	movs	r1, #0
 800115e:	a802      	add	r0, sp, #8
 8001160:	f000 f8c6 	bl	80012f0 <memset>
  if(timHandle->Instance==TIM3)
 8001164:	6822      	ldr	r2, [r4, #0]
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_TIM_MspPostInit+0x58>)
 8001168:	429a      	cmp	r2, r3
 800116a:	d11d      	bne.n	80011a8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001170:	699a      	ldr	r2, [r3, #24]
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001172:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	f042 0208 	orr.w	r2, r2, #8
 8001178:	619a      	str	r2, [r3, #24]
 800117a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <HAL_TIM_MspPostInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM_Pin;
 8001186:	2320      	movs	r3, #32
 8001188:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001192:	f7ff f8fd 	bl	8000390 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001196:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_TIM_MspPostInit+0x60>)
 8001198:	6853      	ldr	r3, [r2, #4]
 800119a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800119e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011a6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011a8:	b006      	add	sp, #24
 80011aa:	bd10      	pop	{r4, pc}
 80011ac:	40000400 	.word	0x40000400
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	40010000 	.word	0x40010000

080011b8 <MX_TIM3_Init>:
{
 80011b8:	b510      	push	{r4, lr}
 80011ba:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011bc:	2210      	movs	r2, #16
 80011be:	2100      	movs	r1, #0
 80011c0:	a803      	add	r0, sp, #12
 80011c2:	f000 f895 	bl	80012f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c6:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c8:	221c      	movs	r2, #28
 80011ca:	4621      	mov	r1, r4
 80011cc:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	9401      	str	r4, [sp, #4]
 80011d2:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d4:	f000 f88c 	bl	80012f0 <memset>
  htim3.Init.Prescaler = 71;
 80011d8:	2347      	movs	r3, #71	; 0x47
  htim3.Instance = TIM3;
 80011da:	481e      	ldr	r0, [pc, #120]	; (8001254 <MX_TIM3_Init+0x9c>)
  htim3.Init.Prescaler = 71;
 80011dc:	4a1e      	ldr	r2, [pc, #120]	; (8001258 <MX_TIM3_Init+0xa0>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 71;
 80011e0:	e880 000c 	stmia.w	r0, {r2, r3}
  htim3.Init.Period = 999;
 80011e4:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	6104      	str	r4, [r0, #16]
  htim3.Init.Period = 999;
 80011ea:	60c3      	str	r3, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ee:	f7ff fdc9 	bl	8000d84 <HAL_TIM_Base_Init>
 80011f2:	b108      	cbz	r0, 80011f8 <MX_TIM3_Init+0x40>
    Error_Handler();
 80011f4:	f7ff ff46 	bl	8001084 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011fc:	a903      	add	r1, sp, #12
 80011fe:	4815      	ldr	r0, [pc, #84]	; (8001254 <MX_TIM3_Init+0x9c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001202:	f7ff fcba 	bl	8000b7a <HAL_TIM_ConfigClockSource>
 8001206:	b108      	cbz	r0, 800120c <MX_TIM3_Init+0x54>
    Error_Handler();
 8001208:	f7ff ff3c 	bl	8001084 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800120c:	4811      	ldr	r0, [pc, #68]	; (8001254 <MX_TIM3_Init+0x9c>)
 800120e:	f7ff fdd3 	bl	8000db8 <HAL_TIM_PWM_Init>
 8001212:	b108      	cbz	r0, 8001218 <MX_TIM3_Init+0x60>
    Error_Handler();
 8001214:	f7ff ff36 	bl	8001084 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001218:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800121a:	a901      	add	r1, sp, #4
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_TIM3_Init+0x9c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121e:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001222:	f7ff fea1 	bl	8000f68 <HAL_TIMEx_MasterConfigSynchronization>
 8001226:	b108      	cbz	r0, 800122c <MX_TIM3_Init+0x74>
    Error_Handler();
 8001228:	f7ff ff2c 	bl	8001084 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122c:	2360      	movs	r3, #96	; 0x60
 800122e:	9307      	str	r3, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001230:	2302      	movs	r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001232:	2204      	movs	r2, #4
 8001234:	a907      	add	r1, sp, #28
 8001236:	4807      	ldr	r0, [pc, #28]	; (8001254 <MX_TIM3_Init+0x9c>)
  sConfigOC.Pulse = 0;
 8001238:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800123a:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800123c:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800123e:	f7ff fe0b 	bl	8000e58 <HAL_TIM_PWM_ConfigChannel>
 8001242:	b108      	cbz	r0, 8001248 <MX_TIM3_Init+0x90>
    Error_Handler();
 8001244:	f7ff ff1e 	bl	8001084 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <MX_TIM3_Init+0x9c>)
 800124a:	f7ff ff83 	bl	8001154 <HAL_TIM_MspPostInit>
}
 800124e:	b00e      	add	sp, #56	; 0x38
 8001250:	bd10      	pop	{r4, pc}
 8001252:	bf00      	nop
 8001254:	2000002c 	.word	0x2000002c
 8001258:	40000400 	.word	0x40000400

0800125c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800125c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800125e:	e003      	b.n	8001268 <LoopCopyDataInit>

08001260 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001262:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001264:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001266:	3104      	adds	r1, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001268:	480a      	ldr	r0, [pc, #40]	; (8001294 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800126c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800126e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001270:	d3f6      	bcc.n	8001260 <CopyDataInit>
  ldr r2, =_sbss
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001274:	e002      	b.n	800127c <LoopFillZerobss>

08001276 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001278:	f842 3b04 	str.w	r3, [r2], #4

0800127c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800127e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001280:	d3f9      	bcc.n	8001276 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001282:	f7ff ff2d 	bl	80010e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001286:	f000 f80f 	bl	80012a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800128a:	f7ff fed1 	bl	8001030 <main>
  bx lr
 800128e:	4770      	bx	lr
  ldr r3, =_sidata
 8001290:	08001340 	.word	0x08001340
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001298:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800129c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80012a0:	2000006c 	.word	0x2000006c

080012a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC1_2_IRQHandler>
	...

080012a8 <__libc_init_array>:
 80012a8:	b570      	push	{r4, r5, r6, lr}
 80012aa:	2500      	movs	r5, #0
 80012ac:	4e0c      	ldr	r6, [pc, #48]	; (80012e0 <__libc_init_array+0x38>)
 80012ae:	4c0d      	ldr	r4, [pc, #52]	; (80012e4 <__libc_init_array+0x3c>)
 80012b0:	1ba4      	subs	r4, r4, r6
 80012b2:	10a4      	asrs	r4, r4, #2
 80012b4:	42a5      	cmp	r5, r4
 80012b6:	d109      	bne.n	80012cc <__libc_init_array+0x24>
 80012b8:	f000 f822 	bl	8001300 <_init>
 80012bc:	2500      	movs	r5, #0
 80012be:	4e0a      	ldr	r6, [pc, #40]	; (80012e8 <__libc_init_array+0x40>)
 80012c0:	4c0a      	ldr	r4, [pc, #40]	; (80012ec <__libc_init_array+0x44>)
 80012c2:	1ba4      	subs	r4, r4, r6
 80012c4:	10a4      	asrs	r4, r4, #2
 80012c6:	42a5      	cmp	r5, r4
 80012c8:	d105      	bne.n	80012d6 <__libc_init_array+0x2e>
 80012ca:	bd70      	pop	{r4, r5, r6, pc}
 80012cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012d0:	4798      	blx	r3
 80012d2:	3501      	adds	r5, #1
 80012d4:	e7ee      	b.n	80012b4 <__libc_init_array+0xc>
 80012d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012da:	4798      	blx	r3
 80012dc:	3501      	adds	r5, #1
 80012de:	e7f2      	b.n	80012c6 <__libc_init_array+0x1e>
 80012e0:	08001338 	.word	0x08001338
 80012e4:	08001338 	.word	0x08001338
 80012e8:	08001338 	.word	0x08001338
 80012ec:	0800133c 	.word	0x0800133c

080012f0 <memset>:
 80012f0:	4603      	mov	r3, r0
 80012f2:	4402      	add	r2, r0
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d100      	bne.n	80012fa <memset+0xa>
 80012f8:	4770      	bx	lr
 80012fa:	f803 1b01 	strb.w	r1, [r3], #1
 80012fe:	e7f9      	b.n	80012f4 <memset+0x4>

08001300 <_init>:
 8001300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001302:	bf00      	nop
 8001304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001306:	bc08      	pop	{r3}
 8001308:	469e      	mov	lr, r3
 800130a:	4770      	bx	lr

0800130c <_fini>:
 800130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130e:	bf00      	nop
 8001310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001312:	bc08      	pop	{r3}
 8001314:	469e      	mov	lr, r3
 8001316:	4770      	bx	lr
